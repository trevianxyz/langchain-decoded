{"title":"Understanding the IQ Pneumatics Kit Components","label_names":"['VEX IQ']","body":"This article is an introduction to the IQ Pneumatics Kit, breaking down each component and explaining how it works. It is a valuable resource for anyone using the Kit to kickstart their pneumatic projects. This guide offers the necessary information to get your system operating smoothly. For guidance on coding your IQ Pneumatics Kit, view this article from the VEX Library. For examples of a basic IQ Pneumatics System operation, view this article from the VEX Library.\nKit Exploration\nThe IQ Pneumatics Kit can be broken down into 5 different functional categories. These categories include the following and are listed in order of importance from the initial pressurization of air and ending with the actuation of mechanical parts:\n\n\nAir Stowage: This pertains to the components responsible for storing and distributing the pressurized air within the system, like the Air Pump and the Air Tank.\n\nFittings: This category includes the various types of fittings such as the Tee Fitting and Straight Fitting that connect and route the Tubing throughout the system.\n\nTubing: This includes the tubes that transport the pressurized air throughout the system.\n\nElectronic Control: This category includes components like the Pneumatic Solenoid that control the operation of the pneumatic system electronically.\n\nCylinders: These dual-action cylinders (2x Pitch Stroke and 4x Pitch Stroke Pneumatic Cylinders) create mechanical movement through the use of compressed air.\n\n\n\n\n Product \n Description \n\n\n Air Stowage \n\n\n\n Air Tank 70mL \n  \n\n\nThe Air Tank acts as a backup system for your pneumatics, storing extra air.\nWhen multiple parts of your pneumatic system (the cylinders) all demand air simultaneously, the Air Tank steps in. It reduces the system's total reliance on the Pneumatic Pump. It's a crucial component in maintaining a consistent and dependable operation of your pneumatic system.\n\n\n\n\n Air Pump \n  \n\n\nThe Air Pump, which you can recognize by its gray rectangular shape, works like an engine by compressing air and mainly sends it to the Cylinders through the Solenoid. \nThe Cylinders can't produce any force on their own, so they need the Air Pump's help. The Air Pump also sends some of the compressed air to the Air Tank. By doing this, it keeps your entire pneumatic system running smoothly and efficiently, especially when the demand is high.\n\n\n\n Fittings \n\n\n\n Tee Fitting \n  \n\n\nThe Tee Fitting, which is easy to recognize because it looks just like the letter 'T', helps send air from one place to two different spots in your pneumatic system. This gives you the power to send air to different places at the same time, like helping multiple cylinders work together or managing more complicated routes. Using the Tee Fitting, you can come up with really creative and flexible designs for your pneumatic system.\n\u00a0\n\n\n\n\n\n  Straight Fi  \n    \n\n\nThe Straight Fitting allows you to connect two pieces of Tube together, and is also an anchor for your Tubing, making sure your pneumatic system stays put and doesn't move when running.\nBy attaching the Tubing firmly to your structure, the Straight Fitting helps control and keep the flow of pressurized air steady. The Straight Fitting is as simple to use as pressing the Tubing into it and guiding it where it needs to go. It makes building your system easier and more reliable.\n\u00a0\n\n\n\n\n Tubing \n\n\n\n 4mm Tubing \n  \n\n\nThe 4mm diameter Tubing in your IQ Pneumatic Kit is very important. It works like veins, moving pressurized air from one part to another. \nYou can cut the tubing to any length you need with scissors, so it's perfect for any project. The tubing links different parts of your pneumatic system and helps it work smoothly. By adjusting the length of the tubing, you can make the best use of space in your robot's design.\n\n\n\n  Electronic Control\n\n\n\n Pneumatic Solenoid \n  \n\n\nThe Pneumatic Solenoid is an important control part, working like an electronic valve. It receives instructions from your Robot Brain and turns them into pneumatic actions by directing compressed air to the cylinders.\nIt can control up to two cylinders at the same time, directing air to make each cylinder extend (push) or retract (pull). This part is key in managing how your pneumatic system works.\n\u00a0\n\n\n\n\n Cylinders \n\n\n\n 2 Pitch Stroke Pneumatic Cylinder \n  \n\n\n The IQ Pneumatic Kit comes with two types of Pneumatic Cylinders: the 2x Pitch and 4x Pitch. These cylinders use air pressure to extend or retract, creating a push or pull motion. \n'Pitch' refers to how far the cylinder can extend, not its starting size. They connect to the Tubing through built-in fittings and use the power of pressurized air to create linear\u00a0 movement. Select either the 2 or 4 Pitch Cylinder for your design based on how far you need it to move.\n\n\n\n\n 4 Pitch Stroke Pneumatic Cylinder \n  \n\n\n\n\nFor examples of a basic IQ Pneumatics System operation, view this article from the VEX Library.\n"}
{"title":"Understanding the Pathways to VEX Certifications","label_names":"[]","body":"In today's education landscape, keeping up-to-date with relevant teaching tools and strategies is key. A noteworthy opportunity for educators in this regard is earning a VEX Professional Development Plus (PD+) certification. VEX Robotics, a leading provider of STEM education, offers an innovative professional development platform known as VEX PD+. This article aims to guide educators through the various pathways to obtaining a VEX PD+ certificate.\u00a0\u00a0\nFree Certification Courses\nOne of the primary routes to VEX PD+ certification involves passing a certification exam at the conclusion of one of VEX's free certification courses. VEX offers free certification courses for each VEX platform.\u00a0 These courses are designed to familiarize educators with their VEX platform and provide hands-on experience with VEX technologies.\n\nUpon successful completion of a course and its associated certification exam, teachers receive a certificate as recognition of their competence. Along with the certification, educators gain entry to VEX PD+'s Professional Learning Community. This vibrant community serves as an invaluable resource where educators can network, share knowledge, and seek guidance on how best to utilize VEX technologies in their classrooms.\nTraining Courses\nVEX PD+ certification can also be obtained through passing a certification exam at the conclusion of one of VEX's many Training Courses. Training Courses are offered for all VEX platforms and include introductory level courses through more advanced pedagogy-focused courses, and are designed to enable educators to advance their VEX STEM teaching proficiency.\n\nUpon successful completion of a course and its associated certification exam, teachers receive a certificate as recognition of their achievement.\u00a0\nLive Sessions\nAnother path to obtaining a VEX PD+ certificate is through attendance at a VEX PD+ Live Session. These interactive sessions are led by VEX experts. They offer insights into the latest advancements in educational robotics and demonstrate best practices in implementing these technologies.\n\nEarning a certificate through live sessions requires active participation. At the end of a session, attendees are awarded certificates, which not only validate their attendance but also their dedication to continual professional growth in the dynamic field of robotics education.\nVEX Robotics Educators Conference\n\nThe final path to VEX PD+ certification highlighted here is attendance at the annual VEX Robotics Educators Conference at VEX Worlds. This conference serves as a significant convergence point for educators from around the globe, where they can learn from leading experts in the field, participate in workshops, and network with other STEM professionals.\nCertificates are awarded to attendees of the conference, making it another valuable avenue for obtaining a VEX PD+ certificate.\u00a0\nIn conclusion, obtaining a VEX PD+ certificate can be accomplished through various means, each offering unique learning experiences. Regardless of the pathway chosen, educators who obtain a VEX PD+ certificate demonstrate their commitment to professional development and their dedication to integrating technological advancements into their pedagogy.\u00a0\n"}
{"title":"Welcome to VEX Professional Development Plus (PD+)","label_names":"[]","body":"We are excited to announce some important changes to the way we provide professional development and certification for teachers. To better serve our educator community, we are streamlining our offerings and merging our certification platform, certification.vex.com, with our professional development platform, pd.vex.com.\u00a0\nAccess to a Wealth of Resources\nMoving forward, educators will have access to a wider array of resources through PD+. PD+ offers ongoing, year-round, personalized professional development. With its flexible learning platform, you can curate your own professional learning according to your needs, interests, and time.\u00a0\n\nAmong the resources PD+ provides are:\n\n\nTraining Courses: Video-based, expert-led courses that range from introductory \u2018Getting Started\u2019 courses to more advanced and pedagogy focused courses.\nVEX Professional Learning Community: A space for educators to engage in dialogue and discussion about STEM teaching and learning. It's like a \"Teacher's Lounge\" for VEX, where you can ask questions, brainstorm, and share stories with other educators.\nLive Sessions: Thematic, hour-long, expert-led sessions that provide insights and practical takeaways about teaching with VEX.\nVEX Video Library: Access to hundreds of videos across a variety of topics and VEX platforms, available anytime and from anywhere.\nVEX Robotics Educators Conference: An annual conference that brings the VEX PD+ Community together for in-person, hands-on learning, inspiring keynotes, and learning sessions with VEX education experts.\n\nEducators who receive a certification from one of the free courses will also now have access to the VEX PD+ Professional Learning Community, allowing them to ask questions, share expertise and work collaboratively to improve STEM teaching skills and student performance.\u00a0\nNew Courses, Features, and Constant Updates\n\nWe are continuously updating PD+ with new materials, ensuring our platform remains a rich, dynamic resource for our educators. New features include the introduction of courses around VEXcode VR and the addition of 1-on-1 sessions where users have the chance to schedule a meeting with a VEX Expert.\nEvery user will also have access to their own dashboard, which includes a tour of all the VEX PD+ features, allowing them to get started easily.\nTransition Details: Your Certifications and In-progress Courses\nPlease note that all current certifications will be automatically transitioned to pd.vex.com. However, progress in in-progress courses will not be transferred. If you are currently undertaking a course on certification.vex.com, you will have to restart the course on pd.vex.com.\n\nImportant Date: Certificates Issue Deadline\nAfter September 1st, certification.vex.com will no longer\u00a0issue certificates.\u00a0\nWe believe these changes will allow us to better meet your professional development needs, providing a more unified and comprehensive learning experience.\u00a0\nStay tuned for more updates and thank you for your continued engagement with VEX!\n"}
{"title":"Understanding the V5 Pneumatics Kit Components","label_names":"['VEX V5']","body":"This article is an introduction to the V5 Pneumatics Kit, breaking down each component and explaining how it works. It is a valuable resource for anyone using the kit to kickstart their pneumatic projects. This guide offers the necessary information to get your system operating smoothly. For guidance on coding your V5 Pneumatics Kit, view this article from the VEX Library.\nKit Exploration\nThe V5 Pneumatics Kit can be broken down into 7 different functional categories. These categories include the following and are listed in order of importance from the initial pressurization of air and ending with the actuation of mechanical parts:\n\n\nReservoir: this includes components related to the influx and storage of compressed air in the system.\n\nPressure Monitor: this includes devices used to regulate and monitor the air pressure in the system.\n\nFittings: this category is for various types of connectors and plugs used to join tubes together or to connect them to different parts of the system.\n\nTubing: this category is for components related to the flexible tubes that carry the air in a pneumatic system.\n\nManual Control: this category contains devices that allow for manual control of the airflow in the system.\n\nElectronic Control: this category is for components that provide electronic control over the system.\n\nCylinders: this is where the mechanical work happens in a pneumatic system. Cylinders use the energy of the compressed air to create motion.\n\n\n\n\n   Product   \n   Description   \n\n\n\n   Reservoir   \n\n\n\n\n  Air Tank 2  \n\n\nThe Air Tank is a big tube-shaped piece that comes in the Kit. It is like the \"backbone\" of your robotics project because it holds all the pressurized air - or the \"power\" - for your robot. You connect it to parts called a Straight Male or Elbow Fitting and a Valve Stem to fill it up with air. Once filled, the air in the tank can be used to make your pneumatic parts work, which means your whole project can get moving. You can easily attach the Air Tank to your project using Zip Ties.Remember, just like you'd need to recharge a battery when it's running low, you need to refill the Air Tank when it's low on air. And, just like turning off a machine when you're done using it, you should also let the air out of the tank after you're done.\n\n\n\n  Valve  \n  \n\nThe Valve Stem is a small gold colored part that looks like the pressure inlet on a bike or car tire (formally called a Schrader Valve). It's important for getting your pneumatic system ready to go. You can screw it securely into the Air Tank or a part called the Straight Female Fitting using its M5 thread, like you're screwing a cap onto a bottle.Once it's in place, it acts like a door that lets you put air into your system. This is like filling up a gas tank - you're storing up the 'fuel' your project needs to work. This part might be simple, but it's important because it makes sure your project is ready to go at any time.\n\u00a0\n\n\n\n\n   Pressure Mo   \n\n\n\n\n  Air Pressure Regul  \n  \n\n\nThe Air Pressure Regulator in your system is like a control knob for the air pressure. It works together with the Air Pressure Gauge, letting you watch and adjust the air pressure that's going in and out. This helps save some pressure for later. You can connect parts called fittings to the regulator's inlet (where the air comes in denoted by an embossed triangle) and outlet (where the air goes out). Then, you can change the pressure of the air that's leaving by turning the black dial. This makes sure that the pressure doesn't go above a certain limit.To make sure the regulator works correctly, it's important that the air pressure goes into the M5 thread that's marked with a triangle.\n\u00a0\n\n\n\n\n  Air Pressure Regulator Bra  \n  \n\nThe Air Pressure Regulator Bracket is like a strong holding spot for your Air Pressure Regulator in your robot. By sliding this bracket over the black dial of the regulator, it makes a stable setup that keeps the big part secure. This easy method gives you two places to attach it, making sure your Air Pressure Regulator won't get loose when your robot is working.\n\n\n\n   Air Pressure Gauge  \n\n\nThe Air Pressure Gauge in your system is like a meter that tells you how much pressure is in the Air Tank, or system depending where it is mounted. It's usually put before the Regulator and helps you see the total pressure. This allows you to make changes to the pressure using the Regulator when you need to. The Gauge has an M5 thread, so you can connect it to the Straight Female Fitting or straight into any M5 hole, like one on the Air Tank.As one of the first parts in a pneumatic system, it's important because it lets you know how much pressure is left in the tank. This makes sure your system works the best it can. \n\n\n\n \u00a0Fittings\u00a0\n\n\n\n\n   Straight Male Fitting  \n\n\nThe Straight Male Fitting is a part made for making direct connections in your pneumatic system. You can screw it into any M5 threaded hole. It acts like a safe bridge for Tubing, which has a red tab on a big, six-sided nut. Inside the fitting, there are metal prongs that hold the tubing tightly. When you press the red tab, it's easy to put in or take out the tubing because it lets the prongs loose.This part is useful because it can screw into M5 threaded holes found on many pneumatic parts, like the Air Tank and Pneumatic Cylinders. This provides a straight route for your PU Tubing. \n\n\n\n Elbow Fitting \n\n\nThe Elbow Fitting is a part that you can screw into M5 threaded holes, and it lets your Tubing make flexible 90-degree turns. On the side with the red tab, metal prongs hold the tubing tightly. When you press the red tab, it's easy to put in or take out the tubing.Just like the Straight Male Fitting, the Elbow Fitting can screw into M5 threaded holes on many pneumatic parts like the Air Tank and Pneumatic Cylinders. This is great for setups that need the tubing to bend or turn. Plus, there's an extra small mounting hole that gives you even more options for setting it up.\n\n\n\n Air Flow Valve Fitting  \n\n\nThe Air Flow Valve Fitting is a part that you can screw into M5 threaded holes, and it lets your Tubing make 90-degree turns. Plus, it has a built-in Flow Control mechanism. This gives you a way to manually adjust how much air is flowing, which gives you exact control over how fast your Pneumatic Cylinder moves.The fitting holds the tubing tightly with prongs on the side with the red tab. When you press the red tab, it's easy to put in or take out the tubing.Like the standard Elbow Fitting, the Air Flow Valve Fitting can screw into M5 threaded holes on parts like Pneumatic Cylinders. But, what makes it different is the Flow Control feature that lets you control the speed of the air in the system (it's usually used on the Pneumatic Cylinders). This lets you fine-tune your system by controlling the influx of pressurized air.\n\n\n\n Tee Fitting \n\n\n\nThe Tee Fitting, which is named for its \"T\" shape, lets you split one input into two outputs in your pneumatic system. This means you can power more than one part from a single source. It's a useful tool for connecting parts like the Dual Acting Solenoid to the same source of air, which makes your setup more powerful and resourceful. This setup allows things to happen at the same time or in a coordinated way, making your project more efficient and capable.\n\u00a0\n\n\n\n\n\nStraight Female Fitting\n\n\nThe Straight Female Fitting is different from the Straight Male Fitting because it has a female M5 thread and a long tube-shaped body, which lets other parts fasten to it. This is different from normal Straight Pneumatic Fittings, which have threads sticking out and sit on large nuts.This fitting easily connects the Air Pressure Gauge and Air Tank with the tubing, which makes it easier to keep track of and manage the pressure in your pneumatic system.\n\n\n\n 4mm Plug \n\n\nThe 4mm Plug, which has a solid black tube on one side and a small handle on the other side, is a useful tool for closing off open ends in your pneumatic system. It fits tightly into any Pneumatic Fitting that isn't being used and is the same size as your tubing.This is useful for parts like the Solenoid where unused outputs could let air escape. Instead of having to reroute extra tubing with a Tee Fitting, you can put this plug straight into a Fitting to stop the airflow. This makes sure all the pressurized air stays in your system, providing a way to save space and use your system efficiently.\n\n\n\u00a0Tubing\n\n\n\n Tubing Cutter \n\n\n\nThe Tubing Cutter, an important part of your pneumatic toolkit, is used to cut your Tubing to just the right lengths. Its triangular blade makes clean, straight cuts, which helps prevent air from leaking out. To use it, you put your Tubing in the cutter and squeeze it to make a neat cut. Don't forget to be careful with the cutter because the blade is sharp. This tool helps make your system work as well as possible.\n\u00a0\n\u00a0\n\n\n\n\n\n 4mm Tubing \n\n\nThe 4mm Outer Diameter x 2.5mm Inner Diameter Polyurethane (PU) Tubing in your Pneumatic Kit works like the veins in your pneumatic system, moving pressurized air from one part to another. Just like how veins carry blood in our bodies, this 3-meter tubing moves air around in your setup.With the Tubing Cutter, you can easily cut this tubing to fit your specific needs. Then, you can use a variety of Pneumatic Fittings to attach the cut tubing to each part. This makes sure your system works smoothly and efficiently.\n\n\n\n  Manual Control  \n\n\n\n\n Shut Off Valve Fitting \n\n\nThe Shut Off Valve Fitting, which you can recognize by its black body and two red spots where the Tubing goes in, works like a safety switch in your pneumatic system for quick control. To use it, connect the source of pressurized air to the valve, making sure the pressurized Tubing goes in the direction of the arrow on the valve.You can control the flow of air by turning the top dial: when it's turned so it's making a \"T\" with the flow, the valve is closed, and when it's turned so it's in line with the flow, it's open. Closing the valve keeps air at the source and lets out air beyond the valve. This provides a safe way to stop operations for maintenance. This easy-to-use tool greatly improves safety and makes managing your system more effective.\n\n\n\n  Electronic Control  \n\n\n\n\n Double Acting Solenoid \n\n\nThe Double Acting Solenoid in your Kit combines the jobs of two Pneumatic Hand Valves into an automatic system controlled by your code. Instead of you having to operate it by hand, this part controls the flow of pressurized air in your pneumatic system electronically. This offers more precision and efficiency.Connected Fittings join the Tubing and Solenoid, letting electronic gates manage the flow of air based on your code. This is important for doing complex tasks and coordinating multiple Pneumatic Cylinders, turning your code into exact, automatic actions.Make sure air flows into the inlet marked with a 'P', and the outlet is directed to 'A\/B' depending on your code. For more information on the uses and applications of the Double Acting Solenoid, view this article from the VEX Library.\n\n\n\n Double Acting Solenoid Driver Cable \n\n\n\nThe Double Acting Solenoid Driver Cable is the important link between your Robot Brain and the system that controls the pneumatics. It plugs into a 3-Wire Port and halfway down, this special wire splits to connect to each end of the Double Acting Solenoid. This allows power and control signals to flow from the Robot Brain to the Solenoid, turning your programming code into real actions.Just remember, the plug with the green and white wires must connect to the side of the Solenoid labeled 'B'. If you don't do this, it could reverse the control, making the cylinder extend when you want it to retract.\n\u00a0\n\n\n\n\n\n  Cylinders  \n\n\n\n\n 25mm Stroke Pneumatic Cylinder \n\n\n\nThe Pneumatic Cylinder, which comes in three sizes in the Kit, turns pressurized air into a back-and-forth motion and can push and pull because it has a dual-acting feature. The \"stroke length,\" or how far the cylinder moves in one cycle, can be different for each size, so it can fit different project needs.You connect the Cylinder to the Tubing using a Straight Male, Elbow Pneumatic Fitting, or Air Flow Valve Fitting. This makes a setup that turns air pressure into movement. Remember, the more pressure you supply to the cylinder, the stronger the force it exerts - so more pressure means more force.\n\u00a0\n\u00a0\n\u00a0\n  \n\n\n\n\n 50mm Stroke Pneumatic Cylinder \n\n\n\n\n\n 75mm Stroke Pneumatic Cylinder \n\n\n\n\n\nFor examples of a basic V5 Pneumatic System operation, view this article from the VEX Library.\n"}
{"title":"Using the VEX V5 Leaderboard","label_names":"['VEX V5']","body":"The VEX V5 Leaderboard is a fun and interactive tool that can be used to display and document student performance in the STEM Labs, keeping students engaged with each other.\n\nUsing the VEX V5 Leaderboard with Your Classroom\nThe VEX V5 STEM Lab are focused around Rethink challenges. Challenges promote collaboration and naturally motivate students to improve their robots, their strategy, and their code. The VEX V5 Leaderboard is designed to help facilitate these challenges by providing an interactive tool for educators to use to present and record challenge data.\nDisplay the leaderboard throughout your challenge to show team scores and ranking, making it easy for students to visualize overall team performance throughout the challenge.\n\n\nCustomizing the Leaderboard for Your Challenge\nThe steps below outline how to add information and customize the leaderboard for your classroom challenge.\nAccess the VEX V5 Leaderboard\n\n\n\n\n\nTo access the VEX V5 Leaderboard, go to https:\/\/education.vex.com\/leaderboard\/. Then select the V5 Leaderboard.\u00a0\n\n\nName Your Leaderboard\n\n\n\n\n\nThe leaderboard name text is editable.\nRename the leaderboard by selecting \u201cLeaderboard Name\u201d and edit the text.\nSelect anywhere outside of the name text or select \"Enter\" once finished.\n\n\nLabel Score Columns\n\n\n\n\n\nThe score column text is editable.\nRename the columns by selecting the title and edit the text.\nSelect anywhere outside of the text or select \"Enter\" once finished.\n\n\n\n\n\n\n\nSelect the \"+\u201d or \u201c-\u201d icon to add or delete score columns. \n\n\nAdd Team Names\n\n\n\n\n\nSelect a team in the Team Name column to enter a team name in the leaderboard.\n\n\n\n\n\n\n\nAdd more teams by selecting the \u201cAdd Team\u201d button.\u00a0\u00a0\n\n\n\n\n\n\n\nDelete teams by selecting the trashcan icon.\n\n\n\n\n\n\n\nOnce you have added all participating teams and score columns, you are ready to start the classroom challenge. \n\n\n\nRunning a Classroom Challenge with the VEX V5 Leaderboard\nThe leaderboard makes it easy to run a classroom challenge. The accessible interface allows you to display the time for all students competing to see, as well as input scores and see team rankings update in real time as the challenge progresses.\nKeep Time for Challenges\n\n\n\n\n\nSelect \u201cStart\u201d to start the timer on the leaderboard.\n\n\n\n\n\n\n\nSelect \u201cStop\u201d to end the challenge run and stop the timer.\n\n\n\n\n\n\n\nSelect \u201cReset\u201d to set the timer back to zero for the next run of the challenge.\n\n\nSee Scores and Team Ranking in Real-time\n\n\n\n\n\nAdd team scores by selecting a score in the score column, then add the score. Scores can be changed or overwritten at any time.\n\n\n\n\n\n\n\nScores for multiple runs are automatically totaled for each team and appear in the \"Total Score\" column.\u00a0\u00a0\n\n\n\n\n\n\n\nAs scores are added, the teams will automatically be ordered by rank from highest to lowest score. If two teams have the same score, they will share the same rank.\n\n\nDocument and Celebrate Student Performance\n\n\n\n\n\nSelect \u201cPrint Leaderboard\u201d to print or save the the entire leaderboard as a PDF.\n\n\n\n\n\n\n\nThe PDF will display the team names as well as the scores.\n\n\n\n\n\n\n\nSelect the printer icon to print or save an individual team certificate as a PDF.\n\n\n\n\n\n\n\nThe certificate will include the challenge name, team name, team rank, and the team's total score.\n\n"}
{"title":"Getting Started with VRC '23-'24 Robot Design: Over Under","label_names":"[]","body":"Introduction\nThe purpose of this article is to offer helpful information for those unfamiliar and just getting started with the 2023-2024 VEX Robotics Competition (VRC) game Over Under. Topics in this article will cover the purpose of building Striker and the next steps to make it your own.\n\n\n\n\n\nHero Bots are designed by VEX engineers each year to play the Competition. The Hero Bot design changes from year to year depending on the game, so the Hero Bot for the VRC game Over Under is Striker.Remember, the Hero Bot is designed as a starting point for you to test and improve upon, not an end product. The Hero Bot is designed so that new teams can learn valuable building skills and have a robot they can customize to compete with early in the season. Advanced teams can also use the Hero Bot to be able to quickly assemble a robot to investigate the game's dynamics.\n\n\n\n\n\n\n\nThe 2023-2024 Hero Bot is in no way a final product however, a Triball scoring machine. To reiterate, the Hero Bot is a starting point. We here at VEX believe that everyone should have a fair chance at competing in this year\u2019s Competition, thus the Hero Bot is born.Competing can seem intimidating, especially when there are teams who have been competing for many years with a lot of experience.Building Striker, one is able to understand more about the game and what is actually needed in a robot design, rather than just reading it on a piece of paper.\n\n\n\n\n\n\n\nPerusing the Over Under Game Manual, it is hard to exactly envision a robot that performs scoring activities while at the same time obeying rules as a newcomer.This is exactly why Striker has been made and offered to everyone, for the purpose of allowing everyone to start in the same place regardless of experience.\n\n\nBeginning Robot Design\nThink about it this way; there is almost an infinite combination of the parts and connection patterns provided in your VEX V5 Competition Starter Kits (link to poster). With that statement being true, mathematically, anything is possible. You just have to find that exact formula to answer all your problems. The question that arises with that is this, \u201cWhere do I start?\u201d\nStarting Line\nBelieve it or not, once you have built Striker and tested the game, you have already started! When beginning to freely-build, it is definitely worth your while to state why and for what purpose you are freely-building. The questions to these answers have most likely been found through your testing of Striker. It is often helpful to document your thinking and design constraints found in the game manual before you begin to build.\n\n\n\n\n\n\nYou could make a chart with the goals you want your design to achieve.\n\nSome examples of goals you may want to achieve include:\n\nI want the design to score a Triball.\nI want the design to be Elevated at the end of the match.\nI want the design to traverse the Long Barrier.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou could also make a chart with the constraints on your design.\n\nSome examples of constraints you may have to consider include:\n\nOnly can use 88W of combined power of all motors (11W &amp; 5.5W).\nOnly can use V5 System parts.\nOnly can store one Triball at a time.\n\n\n\n\n\n\n\nIt is important to lay these questions out not only for the sake of remembering them, but also to stay on track. With infinite combinations of connections, it can be hard to remember exactly why you started once you have started. Listing your goal and all the limiting factors can help to ensure you create what you originally wanted.\nDesign, Create, and Iterate\nKnowing your goal and constraints sets the stage for designing your solution. Before building, it is important to have a plan. Build Instructions offer a very specific and detailed plan for a build. When free building, plans can be looser, but should involve some kind of sketch of what it is that you are trying to build. This means practice creating a mental model of your idea, transferring that to paper, then matching your drawing to actual pieces from the Kit.\n\nOnce you have laid out what you want to achieve with your build and the factors directly in between you and that goal, it is then a balancing act. You must find the perfect balance between your constraints and your goals to create what exactly you set out to achieve. Do not be afraid to try new things! It is important as you experiment with these possible solutions and builds that you do not follow one specific path. With an almost infinite combination of parts in the Kit, there is definitely more than one approach to your problem! Test and iterate on your build to make sure it achieves your goal and still meets your constraints. The entire free building process is loads of fun as it places you in the driver\u2019s seat! Lastly, while this is a competition, it is a friendly competition to say the least.\n\nVisit the VEX Forum and VEX Professional Development Plus (PD+), which has a lot of great resources from other team\u2019s builds! Get inspiration, ask questions, or view solutions to questions you may have that have already been answered by either VEX employees, VEX mentors, or VEX enthusiasts!"}
{"title":"Getting Started with VIQRC '23-'24 Robot Design: Full Volume","label_names":"[]","body":"Introduction\nThe purpose of this article is to offer helpful information for those unfamiliar and just getting started with the 2023-2024 VEX IQ Robotics Competition (VIQRC) game Full Volume. Topics in this article will cover the purpose of building Byte and the next steps to make it your own.\n\n\n\n\n\nHero Bots are designed by VEX engineers each year to play the Competition. The Hero Bot design changes from year to year depending on the game, so the Hero Bot for the VIQRC game Full Volume is Byte.Remember, the Hero Bot is designed as a starting point for you to test and improve upon, not an end product. The Hero Bot is designed so that new teams can learn valuable building skills and have a robot they can customize to compete with early in the season. Advanced teams can also use the Hero Bot to be able to quickly assemble a robot to investigate the game's dynamics.\n\n\n\n\n\n\n\nThe 2023-2024 Hero Bot is in no way a final product however, a Block scoring machine. To reiterate, the Hero Bot is a starting point. We here at VEX believe that everyone should have a fair chance at competing in this year\u2019s Competition, thus the Hero Bot is born.Competing can seem intimidating, especially when there are teams who have been competing for many years with a lot of experience.Building Byte, one is able to understand more about the game and what is actually needed in a robot design, rather than just reading it on a piece of paper.\n\n\n\n\n\n\n\nPerusing the Full Volume\u00a0Game Manual, it is hard to exactly envision a robot that performs scoring activities while at the same time obeying rules as a newcomer.This is exactly why Byte has been made and offered to everyone, for the purpose of allowing everyone to start in the same place regardless of experience.\n\n\nBeginning Robot Design\nThink about it this way; there is almost an infinite combination of the parts and connection patterns provided in your VEX IQ Competition Kits (link to poster). With that statement being true, mathematically, anything is possible. You just have to find that exact formula to answer all your problems. The question that arises with that is this, \u201cWhere do I start?\u201d\nStarting Line\nBelieve it or not, once you have built Byte and tested the game, you have already started! When beginning to freely-build, it is definitely worth your while to state why and for what purpose you are freely-building. The questions to these answers have most likely been found through your testing of Byte. It is often helpful to document your thinking and design constraints found in the game manual before you begin to build.\n\n\n\n\n\n\nYou could make a chart with the goals you want your design to achieve.\n\nSome examples of goals you may want to achieve include:\n\nI want the design to be able to intake Red Blocks and score them.\nI want the design to remove Blocks from the Supply Zone.\nI want the design to be very mobile.\n\n\n\n\n\n\n\n\n\n\n\n\n\nYou could also make a chart with the constraints on your design.\n\nSome examples of constraints you may have to consider include:\n\nOnly can use less than or equal to 6 IQ Smart Motors.\nFit within an 11\u201d wide x 20\u201d long x 15\u201d high (279mm x 483mm x 381mm) volume.\nOnly be built from the VEX IQ product line.\n\n\n\n\n\n\n\nIt is important to lay these questions out, not only for the sake of remembering them, but also to stay on track. With infinite combinations of connections, it can be hard to remember exactly why you started once you have started. Listing your goal and all the limiting factors can help to ensure you create what you originally wanted.\nDesign, Create, and Iterate\nKnowing your goal and constraints sets the stage for designing your solution. Before building, it is important to have a plan. Build Instructions offer a very specific and detailed plan for a build. When free building, plans can be looser, but should involve some kind of sketch of what it is that you are trying to build. This means practice creating a mental model of your idea, transferring that to paper, then matching your drawing to actual pieces from the Kit.\n\nOnce you have laid out what you want to achieve with your build and the factors directly in between you and that goal, it is then a balancing act. You must find the perfect balance between your constraints and your goals to create what exactly you set out to achieve.\nDo not be afraid to try new things! It is important as you experiment with these possible solutions and builds that you do not follow one specific path. With an almost infinite combination of parts in the Kit, there is definitely more than one approach to your problem! Test and iterate on your build to make sure it achieves your goal and still meets your constraints. The entire free building process is loads of fun as it places you in the driver\u2019s seat! Lastly, while this is a competition, it is a friendly competition to say the least.\n\nVisit the VEX Forum and VEX Professional Development Plus (PD+), which has a lot of great resources from other team\u2019s builds! Get inspiration, ask questions, or view solutions to questions you may have that have already been answered by either VEX employees, VEX mentors, or VEX enthusiasts!"}
{"title":"Driving Byte, the 2023-24 VIQRC Hero Bot","label_names":"['VEX IQ']","body":"To get started driving with the 2023-24 VIQRC Hero Bot, Byte, you will need to use a provided code for use with the Controller. The default drive program on the IQ Brain is not compatible with Byte.\n\nDownloading the Controlling Byte Project\nTo use this code on Byte, select your coding method of choice (Blocks, Python, or C++) and download the VEXcode IQ project from the link below.\n\nControlling Byte Blocks Project\nControlling Byte Python Project\nControlling Byte C++ Project\n\n\n\n\n\n\nNote:\u00a0These links will take you to a Google Drive file. Check that the name of the file in the top left corner matches the project you want to download (.iqblocks, .iqpython, .iqcpp), then select the Download button in the middle of the screen.\n\n\nUsing the Controlling Byte Project\n\n\n\n\n\nOpen VEXcode IQ on your device and connect your IQ Brain.\n\nFor more information about accessing and connecting to the app-based version of VEXcode IQ, view these articles.\nFor more information about accessing and connecting to the web-based version of VEXcode IQ, view these articles.\n\n\n\n\n\n\n\n\nOpen the Coding Byte VEXcode IQ project. For more information on how to open a project from your device, select the articles that match your project.\u00a0\n\nOpening VEXcode IQ Blocks Projects\nOpening VEXcode IQ Python Projects\nOpening VEXcode IQ C++ Projects\u00a0\u00a0\n\n\n\n\n\n\n\n\nEnsure your Controller is paired with the IQ Brain, then download and run the project. For more information on how to download and run a project, select the article that matches your project.\n\nDownload and Run a VEXcode IQ Blocks Project\nDownload and Run a VEXcode IQ Python Project\nDownload and Run a VEXcode IQ C++ Project\n\n\n"}
{"title":"Accessing the V5 Workcell Educator Certification Videos for Export","label_names":"['VEX V5']","body":"The videos in the V5 Workcell Educator Certification Course are an essential resource for educators. There may be instances in which you would like to add them to an LMS, or other instances in which videos from the VEX server may be blocked by network firewalls or other restrictions. In order to provide access to the videos, we have supplied a shared Google Drive folder containing all of the videos from the V5 Workcell Educator Certification Course.\nThis article explains the contents and structure of the files in this folder.\nSelect this link to access the Google Drive folder.\n\n\n\n\n\nWhen you open the Google Drive folder, you will see a folder for each Unit of the Certification.\n\n\n\n\n\n\n\nUpon opening one of the Unit folders, you will see a folder for each of the two videos in the Unit: the video that demonstrates the activity for that accompanying STEM Lab, and a video for the facilitation of that activity.\n\n\n\n\n\n\n\nInside each folder is the video for that Unit.\n\n\n\n\n\n\n\nAll videos are named according to the same system. The sections of each video name are separated by underscores and are as listed in this example:\n\nVEX Platform (Workcell)\nCertification Unit (Unit 4)\nName of Video (activity)\n\n\n\n\n\n\n\n\nCaption files for each video are also included in a separate folder. They are provided in .srt and .vtt formats.\n\n"}
{"title":"Connecting to the User\/Console Port in Web-Based VEXcode V5","label_names":"['VEX V5']","body":"To print to the Console in web-based VEXcode V5, a connection to the user\/console web-serial port is needed. This second port is needed because the first serial port links the V5 Brain to the device for project downloads from a browser.\nFor more information about connecting to the first serial port in web-based VEXcode V5, view these articles.\nNote: to print to the Console, the V5 Brain must stay connected to the device via a USB cable while using the user\/console web-serial port.\nConnecting to the User\/Console Web-Serial Port\n\n\n\n\n\nEnsure the V5 Battery is charged and is connected to the V5 Brain.\nTurn on the Brain by pressing the Power button on the Brain.\n\n\n\n\n\n\n\nConnect the V5 Brain to your device using the Micro-USB cable.\n\n\n\n\n\n\n\nEnsure the V5 Brain is connected to the device via the first web-serial port. For more information on this connection process, view the article for your device:\n\nConnecting with Web-based VEXcode V5 - Chromebook\nConnecting with Web-based VEXcode V5 - Mac\nConnecting with Web-based VEXcode V5 - Windows\n\nThe Brain icon should be green and the Brain name\/Team number should appear.\n\n\n\n\n\n\n\nSelect \u2018Connect User \/ Console Serial Port.\u2019\n\n\n\n\nmacOS\/Chromebook\n\n\n\nWindows\n\n\n\nSelect each image above to enlarge.\nA prompt will appear. It will appear slightly different between macOS\/Chromebook and Windows, select \u2018Continue.\u2019\n\n\n\n\nmacOS\/Chromebook\n\n\n\nWindows\n\n\n\nSelect each image above to enlarge.\n\n\nmacOS\/Chromebook: select the V5 Brain with the HIGHEST ID number from the list of Brains available. The lowest ID number should already be paired.\n\nWindows: Select 'User Port.' The Communications Port should already be paired.\n\n\n\n\n\nmacOS\/Chromebook\n\n\n\nWindows\n\n\n\nSelect each image above to enlarge.\nSelect 'Connect' once your choice is highlighted.\n\n\n\n\n\n\n\nThe User \/ Console Port will display as \u2018Connected\u2019 once the connection is successful.\n\n\nDisconnecting from the User\/Console Web-Serial Port\n\n\n\n\n\nTo disconnect your device from a V5 Brain, unplug the Micro-USB cable from your device or the V5 Brain.\n\n\n\n\n\n\n\nYou can also disconnect a V5 Brain from web-based VEXcode V5 by turning the Brain off.\nTurn the Brain off by holding the Power button until the screen on the Brain goes black.\n\n\n\n\n\n\n\nBoth of the methods above will disconnect the V5 Brain from both web-serial ports, showing the V5 Brain icon as white.\n\n"}
{"title":"Playing Custom Imported Sounds in a VEXcode V5 Project","label_names":"['VEX V5']","body":"Playing custom imported sounds is a unique function in the VEXcode V5 software. This article will walk you through where and how to import sounds into VEXcode V5, the setup required to ensure the sounds play properly, and an explanation of how the play VEXcode sound command works.\n\n\nVEXcode V5 Blocks\n\n\n\nVEXcode V5 Python\n\n\n\nVEXcode V5 C++\n\n\n\nSelect each image above to enlarge.\n\n\nAccessing the Play VEXcode Sound Command\nBy default, the play VEXcode sound command does not appear in the toolbox on the left side of the screen. The following steps explain how to enable the command.\n\n\n\n\n\nNavigate to the File menu. Select \u2018Tools\u2019 and \u2018Manage VEXcode Sounds.\u2019\nNote: this image shows blocks in the toolbox but the process is the same for C++ and Python projects.\n\n\n\n\n\n\n\nThe Manage VEXcode Sounds menu will then appear.\n\n\n\n\n\n\n\nSelect the check box to enable the play VEXcode sound command.\n\n\nFunctionality of the Manage VEXcode Sounds Menu\nThe Manage VEXcode Sounds menu is used to add sounds, edit sound names, and delete sounds.\nAdd a sound\n\n\n\n\n\nFind an open row.\n\n\n\n\n\n\n\nEnter the sound name into the associated \u2018Name\u2019 box.\nWhen you input a new name, a blank row appears below the current row.\n\n\n\n\n\n\n\nPaste the associated sound file URL into the same row as the new name.\n\n\n\n\n\n\n\nWhen finished, select \u2018Save Sounds.\u2019\n\n\n\n\n\n\n\nTo edit the Manage VEXcode Sounds menu, select \u2018Cancel.\u2019\nSave changes before hitting 'Cancel' to avoid losing any edits.\n\n\nDelete a sound\n\n\n\n\n\nClick the trash can icon to delete the sound linked to that row.\n\n\n\n\n\n\n\nSelect \u2018Save Sounds\u2019 to save the changes or \u2018Cancel\u2019 to exit the menu.\nNote: at least one sound must always be listed in the table. The trash can icon will be grayed out when only one sound is left, to ensure one sound remains.\n\n\nEdit a sound\n\n\n\n\n\nYou can edit a sound\u2019s name or file URL by selecting it.\n\n\n\n\n\n\n\nSelect \u2018Save Sounds\u2019 to save the changes or \u2018Cancel\u2019 to exit the menu.\n\n\nConnecting to the User\/Console Port\nTo play custom sounds in web-based VEXcode V5, a connection to the user\/console web-serial port is needed. This second port is needed because the first serial port links the V5 Brain to the device for project downloads from a browser.\n\n\n\n\n\nFor steps on how to connect the V5 Brain to the user\/console port, view this article.\n\n\n\n\n\n\n\nTo play custom sounds, the V5 Brain MUST stay connected to the device via a USB cable while using the user\/console web-serial port.\n\n\nUsing the Play VEXcode Sound Command\nDrag and attach or type the play VEXcode sound command to your project. For more information on how the block functions, view the Help.\n\nHelp for VEXcode V5 blocks\nHelp for VEXcode V5 Python\nHelp for VEXcode V5 C++\n\n\n\nVEXcode V5 Blocks\n\n\n\nVEXcode V5 Python\n\n\n\nVEXcode V5 C++\n\n\n\nSelect each image above to enlarge.\n\n\n\n\n\n\n\nSince the sounds play through the connected device, ensure the volume is up when playing sounds.\n\n\n\n\n\n\n\nEnsure the V5 Brain remains connected to the device via a USB cable while the project is downloaded and running.\nNote: custom sounds are stored into the VEXcode V5 project and will function as long as the specific project is loaded. If VEXcode V5 is closed or a new project is loaded, the sounds will not operate. However, upon reloading the original project file, the custom sounds will resume playing as anticipated.\n\n"}
{"title":"Teaching with the VRC Spin Up Activity Lab","label_names":"['VEX V5', 'VEX VR']","body":"The VEX Robotics Competition (VRC) Spin Up Playground in VEXcode VR and the accompanying VRC Activity Lab, can be used as part of your curriculum. This Activity Lab walks you through coding the robot to remove discs from dispensers and then score the discs.\n\n\nOverview of the VRC Spin Up Activity Lab\nVEXcode VR Activity Labs are sequenced Activities with some additional scaffolding and supports added to help students as they complete the Lab. The Activities are all designed to be student-facing so they can be used to extend student engagement with VEXcode VR Playgrounds, like VRC Virtual Skills - Spin Up. Activity Labs are designed to be flexible, so that students can engage with them as is, or activities can be extended or adapted to best meet your students needs and your teaching style\n\n\n\n\n\nEach Activity in the Lab includes an overview of what the robot should accomplish, a bulleted list to help break down the task into smaller components, and helpful hints if students need assistance while coding.\n\n\nThere are 12 Activities that make up the VRC Spin Up Activity Lab. All of these Activities are listed below, including what concepts are covered, and the number of each activity.\u00a0\n\n\n\n\n\nIn\u00a0Take It and Leave It (1) and\u00a0Intake and Score High (2), students will code the intake discs from the field and score them in both the low and high goals. They will learn how to use the Intake motor in order to accomplish each of the tasks.\n\n\n\n\n\n\n\nIn Roll It Red\u00a0(3), students are challenged to drive to a roller on the field then use the Optical Sensor to spin the roller until it is red. They will learn how to use the Intake motor group with the rollers and how to use the Optical Sensor in a VEXcode project.\n\n\n\n\n\n\n\nIn Where to Start (4), students will explore the different starting locations available and then put together all of their skills from the previous activities to intake and score two discs.\n\n\n\n\n\n\n\nIn GPS Guidance (5) and Load It and Launch It (6), students will use sensors to collect discs and score them in the high goal. GPS Guidance has students use the GPS Sensor on Disco, the Hero Robot, and Load It and Launch It has students use the Bottom Distance Sensor to detect when a disc has been moved onto the field through the loaders.\u00a0\n\n\n\n\n\n\n\nIn Score a Pile of Discs (7) and Three Discs, One Launch (8) students will continue to use sensors to gather and score discs. In Score a Pile of Discs, students are introduced the Line Trackers placed throughout the intake to detect how many discs have been gathered by the robot.\nIn the Three Discs, One Launch Activity, students will use the Bottom Distance sensor to drive the Hero Bot to the three Discs highlighted in green, pick up the three Discs, and score them in the blue High Goal.\u00a0\n\n\n\n\n\n\n\nIn Be Efficient! (9), students are challenged to take what they have learned about coding the different sensors on Disco, the Hero Robot, and apply them to score six discs as fast as possible.\n\n\n\n\n\n\n\nIn Along the Shortest Path\u00a0(10) and Aim the Target (11), students will apply the GPS Sensor, the Optical Sensor, the intake motor group, and the Bottom Distance sensor in order to gather discs, score them, and spin rollers.\u00a0\n\n\n\n\n\n\n\nIn Smart Plan (12), students will apply all of the skills they have learned in Activities 1 through 12 to get their highest possible score in VRC Spin Up!\n\n\n\nTeacher Resources\nThe VRC Spin Up Activity Lab is a sequenced version of the Spin and Score, Take It and Leave It, Roll It Red, Load It and Score, and Location, Location, Location VEXcode VR Activities. Solutions for each activity can be found in the VEXcode VR Teacher Portal and is also linked here.\nTo help facilitate your students completing this Activity Lab, you can also use the following VEX Library articles.\u00a0\n\nView this article to learn more about facilitating coding conversations with students.\nLearn more about using pair programming to support student collaboration in this article.\nRead this article to learn about helping students to build resilience as they work through a project.\n\nTo learn about the robot used in the VRC Spin Up Playground, the features of the Playground, and more, see these articles from the VEX Library."}
{"title":"Using Match Loads in VRC Over Under for VEXcode VR","label_names":"[]","body":""}
{"title":"Understanding the VRC Over Under Field Layout","label_names":"[]","body":""}
{"title":"Identifying Location Details Using the GPS Sensor in the VRC Over Under Playground","label_names":"[]","body":""}
{"title":"Using the VRC Over Under Playground Window","label_names":"[]","body":""}
{"title":"Using the Pre-Match Checklist in VRC Virtual Skills","label_names":"[]","body":""}
{"title":"Submitting a Score for VRC Over Under Virtual Skills in VEXcode VR","label_names":"[]","body":""}
{"title":"Get Started with the VRC Over Under Playground","label_names":"[]","body":""}
{"title":"Understanding Robot Features in VRC Over Under","label_names":"[]","body":""}
{"title":"Get Started with VIQC Full Volume Playground","label_names":"[]","body":""}
{"title":"Understanding the VRC Tipping Point Field Layout","label_names":"[]","body":"The Field in the VRC Tipping Point Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2021-2022 VRC Tipping Point Competition game. This information can be useful when creating projects in VRC Tipping Point for VEXcode VR.\n\n\nField Dimensions\n\n\n\n\n\nEach tile on the Field is 600mm by 600mm (~24 inches by 24 inches).\n\n\n\n\n\n\n\nThe Field is six full tiles long. In total, the Field is 3.65m (~12 feet) long, as indicated by the blue line in this image.\nThe Field is six full tiles wide. In total, the Field is 3.65m (~12 feet) wide, as indicated by the red line in this image.\n\n\n\nMeasurement Notes\n\n\n\n\n\nEach full tile measurement begins and ends at the edge of the tile.\n\n\n\n\n\n\n\nThe total Field measurements begin and end at the inner edge of the Field perimeter.\n\n"}
{"title":"Understanding the VIQC Pitching In Field Layout","label_names":"[]","body":"The Field in the VIQC Pitching In Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2021-2022 VIQC Pitching In Competition game. This information can be useful when creating projects in VIQC Pitching In for VEXcode VR.\n\n\nField Dimensions\n\n\n\n\n\nEach full black square on the Field is 300mm by 300mm (~12 inches by 12 inches).\n\n\n\n\n\n\n\nEach half black square on the Field is 150mm by 300mm (~6 inches by 12 inches).\n\n\n\n\n\n\n\nEach corner on the Field is 150mm by 150mm (~6 inches by 6 inches).\n\n\n\n\n\n\n\nThe Field is 5 full black squares, and two half-squares long.\u00a0\nIn total, the Field is 1.8m (~6 feet) long.\n\n\n\n\n\n\n\nThe Field is 7 full black squares, and two half-squares wide.\u00a0\nIn total, the Field is 2.4m (~8 feet) wide.\n\n\n\nMeasurement Notes\u00a0\n\n\n\n\n\nEach full square measurement begins and ends at the center of the black line on the Tile.\u00a0\n\n\n\n\n\n\n\nEach partial square measurement begins at the center of the black line and ends at the inner edge of the wall.\u00a0\n\n\n\n\n\n\n\nThe total Field measurements begin and end at the inner edge of the walls.\n\n"}
{"title":"Understanding the VIQC Slapshot Field Layout","label_names":"[]","body":"The Field in the VIQC Slapshot Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2022-2023 VIQC Slapshot Competition game. This information can be useful when creating projects in VIQC Slapshot for VEXcode VR.\u00a0\n\n\nField Dimensions\n\n\n\n\n\nEach full black square on the Field is 300mm by 300mm (~12 inches by 12 inches).\n\n\n\n\n\n\n\nEach half black square on the Field is 150mm by 300mm (~6 inches by 12 inches).\n\n\n\n\n\n\n\nEach corner on the Field is 150mm by 150mm (~6 inches by 6 inches).\n\n\n\n\n\n\n\nThe Field is 5 full black squares, and two half-squares long.\u00a0\nIn total, the Field is 1.8m (~6 feet) long.\n\n\n\n\n\n\n\nThe Field is 7 full black squares, and two half-squares wide.\u00a0\nIn total, the Field is 2.4m (~8 feet) wide.\n\n\n\nMeasurement Notes\u00a0\n\n\n\n\n\nEach full square measurement begins and ends at the center of the black line on the Tile.\u00a0\n\n\n\n\n\n\n\nEach partial square measurement begins at the center of the black line and ends at the inner edge of the wall.\u00a0\n\n\n\n\n\n\n\nThe total Field measurements begin and end at the inner edge of the walls.\n\n"}
{"title":"Teaching with the VIQC Slapshot Activity Lab","label_names":"[]","body":"The VEX IQ Competition (VIQC) Slapshot Playground in VEXcode VR and the accompanying VIQC Activity Lab, can be used as part of your curriculum. This Activity Lab walks you through coding the robot to remove discs from dispensers and then score the discs.\n\n\nOverview of the VIQC Slapshot Activity Lab\nVEXcode VR Activity Labs are sequenced Activities with some additional scaffolding and supports added to help students as they complete the Lab. The Activities are all designed to be student-facing so they can be used to extend student engagement with VEXcode VR Playgrounds, like VIQC Virtual Skills - Slapshot. Activity Labs are designed to be flexible, so that students can engage with them as is, or activities can be extended or adapted to best meet your students needs and your teaching style.\n\n\n\n\n\nEach Activity in the Lab includes an overview of what the robot should accomplish, a bulleted list to help break down the task into smaller components, and helpful hints if students need assistance while coding.\n\n\nThere are 10 Activities that make up the VIQC Slapshot Activity Lab. All of these Activities are listed below, including what concepts are covered, and the number of each activity.\u00a0\n\n\n\n\n\nIn\u00a0Knock the Dispensers (1) and\u00a0Spin the Dispensers (2), students will code the robot to remove discs from all three types of dispenser (blue, yellow, and purple). They will learn how to use the Intake and Arm motors in order to accomplish each of the tasks.\n\n\n\n\n\n\n\nIn Take It and Score It (3), students will build on their code to pick up one of the discs released from a dispenser using the Intake, then score the disc. This furthers their understanding of the Intake motor to get a higher score in Slapshot.\n\n\n\n\n\n\n\nIn Where to Start (4) and Time It! (5), students will explore the different starting locations available and then put together all of their skills from the previous activities to clear discs from three dispensers in the fastest time possible.\u00a0\n\n\n\n\n\n\n\nIn Explore Locations (6) and Follow the Shortest Route (7), students will create a coordinate system for the VIQC Slapshot Playground and use the coordinates to perform calculations to move from one location to another using the shortest possible route.\n\n\n\n\n\n\n\nIn Aim the Goal Zone (8) and Multitasking Snapshot (9), students continue to use their coordinate grid to move to dispensers and remove discs from the dispensers. They are challenged to change the velocity of the Intake to score as many discs in the 4-point zone as possible. They will apply their skills with the coordinates to plan the trajectory of the disc.\n\n\n\n\n\n\n\nIn Smart Planner\u00a0(10), students will apply all of the skills they have learned in Activities 1 through 9 to get their highest possible score in VIQC Slapshot!\n\n\n\nTeacher Resources\nThe VIQC Slapshot Activity Lab is a sequenced version of the Dispenser Dash, Take a Shot, and Aiming Disks VEXcode VR Activities. Solutions for each activity can be found in the VEXcode VR Teacher Portal and is also linked here.\nTo help facilitate your students completing this Activity Lab, you can also use the following VEX Library articles.\u00a0\n\nView this article to learn more about facilitating coding conversations with students.\nLearn more about using pair programming to support student collaboration in this article.\nRead this article to learn about helping students to build resilience as they work through a project.\n\nTo learn about the robot used in the VIQC Slapshot Playground, the features of the Playground, and more, see these articles from the VEX Library."}
{"title":"Get Started with the VRC Over Under Playground in VEXcode VR","label_names":"['VEX VR']","body":"Welcome to the VRC Over Under Playground in VEXcode VR! As a registered VRC Team for the 2023-2024 season, you can play VRC Over Under Virtual Skills in VEXcode VR and submit your score to the VRC Virtual Skills Leaderboard during the season. View this article to learn more about accessing VRC Over Under with your team registration information.\nIf you are not a registered VRC team for the 2023-2024 season, you must have a\u00a0VEXcode VR Premium License\u00a0to use the VRC Over Under Playground in VEXcode VR. Once you have a Premium License,\u00a0you will activate your License Key\u00a0to log in to VEXcode VR and access the VRC Over Under Playground.\nWatch the following video to learn how to get started with the VRC Over Under Playground in VEXcode VR.\n\n    \n    \n  \n\nArticles to Help You Get Started\nTo get started, learn about the ways to score points in the Over Under game manual. Then, for added challenges, learn more about Striker, the Hero Bot for the game, and other details about the Field in order to strategize and improve your score.\u00a0\n\nBefore diving into coding, it is important to understand Over Under and how it is played . Read the scoring section of the Game Manual to learn more, and begin developing your scoring strategy.\u00a0\n\nTry using the Example Projects to see possible ways to code Striker to move and score in different ways. To learn more about accessing Example Projects in VEXcode VR, view this article for Blocks projects, or this article for Python projects.\n\n\n\nGet familiar with the Over Under Playground Window in VEXcode VR and its features, like the camera angles, so that you can strategize your gameplay. View this article to learn more about the Playground Window.\n\nLearn about starting locations and the rest of the Pre-Match Checklist in this article.\n\n\n\nRead about the Field dimensions and layout on the VRC Over Under Playground to help plan your project. View this article to learn more.\n\nCheck out Striker, the Hero Bot for Over Under, and all of its controls, sensors, and features, so you can code the robot to score in different ways. Learn more about the robot's features in this article.\n\nVirtual Striker is equipped with a GPS Sensor so that you can you use location details and sensor feedback to navigate the Field. Learn more about using the GPS Sensor in Over Under in this article.\n\n\nLooking for more?\u00a0\n\n\n\nWant to learn more advanced coding to help you beat your high score? VEXcode is used with all VEX Robotics platforms.\u00a0\u00a0Check out the Computer Science Level 1 - Blocks course\u00a0or\u00a0the Computer Science Level 1 - Python course\u00a0and learn more about coding with VEXcode!\n\n\n\n\n\u00a0"}
{"title":"Get Started with VIQRC Full Volume Playground in VEXcode VR","label_names":"[]","body":"Welcome to the VIQRC Full Volume Playground in VEXcode VR! As a registered VIQRC Team for the 2023-2024 season, you can play VIQRC Full Volume Virtual Skills in VEXcode VR and submit your score to the VIQRC Virtual Skills Leaderboard during the season. View this article to learn more about accessing VIQRC Full Volume with your team registration information.\nIf you are not a registered VIQRC team for the 2023-2024 season, you must have a\u00a0VEXcode VR Premium License to use the VIQRC Full Volume Playground in VEXcode VR. Once you have a Premium License,\u00a0you will activate your License Key\u00a0to log in to VEXcode VR and access the VIQRC Full Volume Playground.\nWatch the following video to learn how to get started with the VIQRC Full Volume Playground in VEXcode VR.\n\n    \n    \n\n\nArticles to Help You Get Started\u00a0\nTo get started, learn about the ways to score points in the Full Volume game manual. Then, for added challenges, learn more about Byte, the Hero Bot for the game, and other details about the Field in order to strategize and improve your score.\u00a0\n\nBefore diving into coding, it is important to understand Full Volume and how it is played. Read the scoring section of the Game Manual to learn more, and begin developing your scoring strategy.\u00a0\n\nTry using the Example Projects to see possible ways to code Byte to move and score in different ways. To learn more about accessing Example Projects in VEXcode VR, view this article for Blocks projects, or this article for Python projects.\n\n\nGet familiar with the Full Volume Playground Window in VEXcode VR and its features, like starting locations and camera angles, so that you can strategize your gameplay. View this article to learn more.\u00a0\n\nCheck out Byte, the Hero Bot for Full Volume, and all of its controls, sensors, and features, so you can code the robot to score in different ways. Learn more about the robot's features in this article.\n\nCurious about the dimensions and features of the VIQRC Field? Learn more about the Field in this article, to help you as you start planning your project.\n\n\nLooking for more?\u00a0\nWant to learn more advanced coding to help you beat your high score? VEXcode is used with all VEX Robotics platforms. \u00a0Check out the Computer Science Level 1 - Blocks course or the Computer Science Level 1 - Python course and learn more about coding with VEXcode!"}
{"title":"Understanding Robot Features in VIQC Full Volume for VEXcode VR","label_names":"[]","body":""}
{"title":"Understanding the VIQC Full Volume Field Layout","label_names":"[]","body":""}
{"title":"Using the VIQC Full Volume Playground Window","label_names":"[]","body":""}
{"title":"Submitting a Score for VIQC Full Volume Virtual Skills in VEXcode VR","label_names":"[]","body":""}
{"title":"Identifying Location Details Using the GPS Sensor in the VRC Over Under Playground","label_names":"['VEX VR']","body":"You can use the GPS Sensor to help you navigate the VRC Over Under Playground in VEXcode VR, with the (X, Y) coordinates of locations.\n\nHow the GPS Sensor Works in VRC Over Under in VEXcode VR\n\n\n\n\n\nThe GPS (Game Positioning System) Sensor, uses the VEX Field Code on the interior of the Field to triangulate X, Y position and heading. That checkerboard pattern in the Field Code is used to identify the location for each individual block in that pattern. The VEX GPS is an absolute position system, so it does not drift nor does it require calibration on a per-field basis.\nTo sense the Field Code, the VEX GPS Sensor, a black and white camera, is mounted on the rear of the robot and faces rearwards.\nThe GPS Sensor reports the (X, Y) coordinates of the center of rotation of Striker on the Field, in millimeters or inches.\n\n\n\nIdentifying (X, Y) Coordinates on the VRC Field\nThe VRC Over Under Field in VEXcode VR ranges from approximately -1800mm to 1800mm for the X and Y positions. The starting location of Striker depends on the starting position selected.\nThe center location, or the origin (0,0), is located in the center of the Field.\n\n\nIdentifying the (X, Y) Coordinates of the GPS Sensor\n\n\n\n\n\nThe GPS Sensor can be used to identify the X and Y coordinates of Striker on the Field. These coordinates reflect the location of Striker's center of rotation, which is located between the front wheels, as indicated in this image.\n\u00a0\n\n\n\n\n\n\n\nReporter blocks from the Sensing category in the Toolbox can be used to report positional values from the GPS Sensor in your project.\n\n\n\n\n\n\n\nThe current X and Y coordinates of Striker's GPS Sensor on the Field can be displayed in the Print Console using blocks from the Looks category in the Toolbox.\n\n\n\nUsing the GPS Sensor to Help Striker Navigate the Field\nYou can use the GPS Sensor to help Striker navigate the Field by driving to specific locations using your knowledge of the Cartesian coordinate system. Using the GPS Sensor, Striker can drive along the X or Y-axes until the value of the sensor is greater than or less than a threshold value. This allows Striker to drive using sensor feedback instead of set distances.\n\n\n\n\n\nIn this project, Striker will drive forward from starting position A, until the value of the Y-axis is greater than -1000 millimeters (mm), then stop, placing Striker in position to turn and collect a Triball.\nNote: You may have to account for the robot\u2019s inertia or drift when setting your parameters.\n\n\n\nGPS Sensor Location and the Center of Rotation on Striker\n\n\n\n\n\nThe GPS Sensor is mounted in the rear of the robot, whereas Striker's center of rotation is located in the front of the robot.\nThe GPS Sensor is configured in VRC Over Under in VEXcode VR to account for this offset (approximately -150 mm on the X axis, and -295 mm on the Y axis), so that the values that are reported reflect the center of rotation of Striker.\n\n\n\n(X, Y) Coordinates of Game Elements in VRC Over Under for VEXcode VR\nKnowing the coordinates of game elements, like the Triballs and scoring zones, can help you plan your projects in VRC Over Under in VEXcode VR.\nThe following reference is provided as a guide, based on the Field setup at the start of each Match, for the approximate center point coordinate locations of the game elements on the VRC Field in the Playground.\nScoring Zone Coordinates\n\nTriball Coordinates\n\nPost Coordinates\n\n\nIdentifying the GPS Heading of Striker\n\n\n\n\n\nThe GPS Sensor can also be used to identify the GPS heading. The heading ranges from 0 degrees to 359.9 degrees, following a compass heading style.\nWhen using the GPS Sensor to detect location, the GPS heading will remain constant in relation to the Field, regardless of the starting position of the robot.\n\n"}
{"title":"Using the Pre-Match Checklist in VRC Virtual Skills","label_names":"['VEX VR']","body":"To begin your Virtual Skills Over Under Match, you must use the Pre-Match checklist to select your robot starting location, your robot starting direction, whether or not your robot has a preload, and the Field preload location.\nFor more information about Match Load Triballs, view the VRC 2023-2024 Over Under Game Manual and Appendix B - Robot Skills Challenge.\nHow to Choose a Starting Location\n\n\n\n\n\nWhen you open the VR Virtual Skills Over Under Playground, the Pre-Match Checklist will be visible. The first item in the checklist is the starting location.\nThe default starting location is \"E\". To choose a different starting location, select the Edit button in the Pre-Match Checklist.\n\n\n\n\n\n\n\nThen select the letter that corresponds to the desired starting location.\n\n\nHow to Choose a Starting Direction\u00a0\n\n\n\n\n\nSelect the Starting Direction box in the Pre-Match Checklist. Two arrow buttons will appear beside Striker.\n\n\n\n\n\n\n\nSelect the arrow button to rotate Striker to face your chosen starting direction.\n\n\nHow to Select Robot Preloads and Field Preload Locations\u00a0\n\n\n\n\n\nThe Robot Preload setting defaults to 'Yes.' If you do not want to start with a preload, select the toggle switch to turn it to 'No.' The preloaded Triball will removed from Striker.\n\n\n\n\n\n\nTo change your Field Preload Location, select the Field Preload Location Box in the Pre-Match Checklist, and then select the Edit button.\u00a0\n\n\n\n\n\nNext, select the number that corresponds to your desired Field Preload Location. Select the 'Done' button when you are finished.\n\nHow to Close and Reopen the Pre-Match Checklist\n\n\n\n\n\nWhen you open the VRC Over Under Playground, the Pre-Match Checklist will be open. After you have finished making your selections, select the 'Begin Run' button to close the Pre-Match Checklist.\n\n\n\n\n\n\n\nTo reopen the Pre-Match Checklist, select the 'Starting Position' button on the left side of the Playground Window.\nFor additional information about using the VRC Over Under Virtual Skills Window, see this article.\n\n"}
{"title":"Understanding the VRC Over Under Field Layout","label_names":"['VEX VR']","body":"The Field in the VRC Over Under Playground in VEXcode VR has the same dimensions and setup as the Field for an in-person Skills Match in the 2023-2024 VRC Over Under Competition game. This information can be useful when creating projects in VRC Over Under for VEXcode VR.\n\n\nField Dimensions\n\n\n\n\n\nEach tile on the Field is 600mm by 600mm (~24 inches by 24 inches).\n\n\n\n\n\n\n\nThe Field is six full tiles long. In total, the Field is 3.65m (~12 feet) long, as indicated by the blue line in this image.\nThe Field is six full tiles wide. In total, the Field is 3.65m (~12 feet) wide, as indicated by the red line in this image.\n\n\n\nMeasurement Notes\n\n\n\n\n\nEach full tile measurement begins and ends at the edge of the tile.\n\n\n\n\n\n\n\nThe total Field measurements begin and end at the inner edge of the Field perimeter.\n\n"}
{"title":"Submitting a Score for VRC Over Under Virtual Skills in VEXcode VR","label_names":"['VEX VR']","body":"As a registered VRC Team playing VRC Over Under Virtual Skills in VEXcode VR during the 2023-2024 competition season, you can submit your score to the VRC Virtual Skills Leaderboard.\n\n\n\n\n\nWhen a project is stopped, or the timer hits 0 seconds, the Match Results window will appear. The total score for the project will be shown along with the time remaining when the project was stopped, as shown in this image.\u00a0\n\n\n\n\n\n\n\nTo submit your score, select the 'Submit Score' button.\u00a0\nNote: The 'Submit Score' button will be available once score submissions are open for the 2023-2024 VRC season.\u00a0\nRegistered teams can repeatedly submit scores, with the highest one determining their rank in the Virtual Skills Standings.\n\n\n\n\n\n\n\nSelect the 'Retry' button to close the Match Results window and return to the VRC Over Under Playground. Selecting 'Retry' will reset the Field.\u00a0\n\n"}
{"title":"Submitting a Score for VIQRC Full Volume Virtual Skills in VEXcode VR","label_names":"[]","body":"As a registered VIQRC Team playing VIQRC Full Volume Virtual Skills in VEXcode VR during the 2023-2024 competition season, you can submit your score to the VIQRC Virtual Skills Leaderboard.\n\n\n\n\n\nWhen a project is stopped, or the timer hits 0 seconds, the Match Results window will appear. The total score for the project will be shown along with the time remaining when the project was stopped, as shown in this image.\u00a0\n\n\n\n\n\n\n\nTo submit your score, select the 'Submit Score' button.\u00a0\nNote: The 'Submit Score' button will be available once score submissions are open for the 2023-2024 VIQRC season.\u00a0\n\n\n\n\n\n\n\nSelect the 'Retry' button to close the Match Results window and return to the VIQRC Full Volume Playground. Selecting 'Retry' will reset the Field.\u00a0\n\n"}
{"title":"Understanding Robot Features in VRC Over Under for VEXcode VR","label_names":"['VEX VR']","body":"The robot used in VEXcode VR Over Under is a virtual version of Striker, the VEX V5 Hero Bot, used for the 2023-2024 VEX Robotics Competition (VRC) Over Under. Virtual Striker has the same dimensions and motors as the physical Striker, but with added sensors for autonomous programming in VEXcode VR. On the Over Under Playground in VEXcode VR, there is only one robot, and it is already preconfigured. This eliminates the need for a robot configuration, or a predetermined template project.\n\n\nRobot Controls\nStriker has the following controls:\n\n\n\n        \n      \n\n\nA drivetrain. This enables the \u201cDrivetrain\u201d category of blocks in the Toolbox of VEXcode VR to drive and turn the robot.\n\n\n\n\n\n        \n      \n\n\nAn Arm that is controlled by the Arm Motor. The Arm can be raised and lowered. This allows the robot to transport Triballs.\nThe Arm can be lowered using the [Spin for] block. The Arm will be fully lowered when spun forward for 1200 degrees.\n\n\n\n\n\n\n\nAn Intake that is controlled by the Intake Motor. The Intake can be spun forward and in reverse. This allows the robot to collect and score Triballs.\nThe Intake can be spun using the [Spin for] block. The Intake will collect a Triball when spun forward 360 degrees and score or drop a Triball when spun in reverse for 360 degrees.\n\n\n\nRobot Sensors\nVirtual Striker has added sensors for autonomous programming in VEXcode VR.\nInertial Sensor\n\n\n\n\n\nThe Inertial Sensor is used with the drivetrain to allow Striker to make accurate and precise turns using the drivetrain heading.\n\n\n\n\n\n\n\nThe drivetrain heading reports a value from 0 to 359.9 degrees, and clockwise is positive.\nFor more information on the Inertial Sensor, view this article from the VEX Library.\n\n\nOptical Sensor\n\n\n\n\n\nThe Optical Sensor reports if an object is close to the sensor, and if so, what color that object is.\nThe Optical Sensor can also report the brightness and the hue value of an object in degrees.\n\n\n\n\n\n\n\nThe Optical Sensor is located under the Arm of Striker, pointing towards the Intake. It can be used to determine when a Triball is in the Intake, and also what color that Triball is.\nFor more information about the Optical Sensor, see this VEX Library article.\n\n\nRotation Sensor\n\n\n\n\n\nThe Rotation Sensor can report rotational position, total rotations, and rotation speed.\n\n\n\n\n\n\n\nThe shaft that rotates the Arm on Striker is placed through the Rotation Sensor. This sensor can be used to measure the rotational position, total rotations, and rotation speed of the Arm as they are raised and lowered.\n\n\n\n\n\n        \n      \n\n\nThe rotational position when the Arm is raised is 0 degrees (default at the start of the project).\nThe rotational position when the Arm is fully lowered is 168 degrees.\nNote: These values are different from the 1200 degrees used in the [Spin for] block to fully lower the Arm.\nFor more information about the V5 Rotation Sensor, view this article from the VEX Library\n\n\nGame Positioning System (GPS) Sensor\n\n\n\n\n\nThe GPS Sensor can report the current X and Y position of the center of rotation of Striker in millimeters or inches.\nThe GPS Sensor can also report the current heading in degrees.\n\n\n\n\n\n\n\nThe GPS Sensor is located near the back of Striker, and is used to determine the robot\u2019s position and orientation on the Field by reading the GPS Field Code Strips along the inside perimeter of the Field.\n\n\n\n\n\n\n\nYou can use the GPS Sensor to help Striker navigate the Field by driving to specific locations using your knowledge of the Cartesian coordinate system. Using the GPS Sensor, Striker can drive along the X or Y-axes until the value of the sensor is greater than or less than a threshold value. This allows Striker to drive using sensor feedback instead of set distances.\nKnowing the coordinates of game elements, like Triballs and Nets, can also help you plan your projects in VRC Over Under. For more information on identifying location details in VEXcode VR Over Under using the GPS Sensor, see this VEX Library article.\n\n"}
{"title":"Understanding Robot Features in VIQRC Full Volume for VEXcode VR","label_names":"[]","body":"The robot used in VEXcode VR Full Volume is a virtual version of Byte, the VEX IQ Hero Bot, used for the 2023-2024 VEX IQ Robotics Competition (VIQRC) Full Volume. Virtual Byte has the same dimensions and motors as the physical Byte, but with added sensors for autonomous programming in VEXcode VR. On the Full Volume Playground in VEXcode VR, there is only one robot, and it is already preconfigured. This eliminates the need for a robot configuration, or a predetermined template project.\n\n\nRobot Controls\nByte has the following controls:\u00a0\n\n\n\n        \n      \n\n\nA drivetrain. This enables the \u201cDrivetrain\u201d category of blocks in the Toolbox of VEXcode VR to drive and turn the robot.\n\n\n\n\n\n        \n      \n\n\nAn\u00a0Arm\u00a0that is controlled by the Arm Motor Group. The Arm can be raised and lowered. This allows the robot to do things like transport game objects.\nThe Arm can be raised using the [Spin for] block. The Arm will be fully raised when spun forward for 1300 degrees.\n\n\n\n\n\n\n\nAn Intake that is controlled by the Intake Motor Group. The Intake can be spun forward and in reverse. This allows the robot to collect and score game objects.\nThe Intake can be spun using the [Spin for] block. The Intake will collect a Block when spun forward for 90 degrees, and score or drop a Block when spun in reverse for 90 degrees.\u00a0\n\n\n\nRobot Sensors\nVirtual Byte has added sensors for autonomous programming in VEXcode VR.\nInertial Sensor\n\n\n\n\n\nThe\u00a0Inertial Sensor built into the VEX IQ (2nd gen) Brain is used with the drivetrain to allow Byte to make accurate and precise turns using the drivetrain heading.\u00a0\nFor more information on the Inertial Sensor built into the VEX IQ (2nd gen) Brain, view this article from the VEX Library.\n\n\n\n\n\n\n\nThe drivetrain heading reports a value from 0 to 359.9 degrees, and clockwise is positive.\n\n\nDistance Sensor\n\n\n\n\n\nThe\u00a0Distance Sensor reports if an object is close to the sensor, as well as the approximate distance from the front of the sensor to an object, in millimeters or inches.\n\n\n\n\n\n\n\nThe Distance Sensor is in the front of Byte and can be used to detect any objects or obstacles.\u00a0\nNote that Byte's Arm should be raised enough to not block the Distance Sensor when gathering readings.\u00a0\nFor more information about the IQ (2nd gen) Distance Sensor, see this VEX Library article.\n\n\nOptical Sensor\n\n\n\n\n\nThe\u00a0Optical Sensor reports if an object is close to the sensor, and if so, what color that object is. \nThe Optical Sensor can also report the brightness and the hue value of an object in degrees.\u00a0\n\n\n\n\n\n\n\nThe Optical Sensor is located inside Byte's Intake. It can be used to determine when a Block is in the Intake, and also what color that Block is.\u00a0\nFor more information about the Optical Sensor, see this VEX Library article.\n\n\nBumper Switch\n\n\n\n\n\nThe Bumper Switch\u00a0reports if it is currently being pressed or not.\n\n\n\n\n\n\n\nThe Bumper Switch is located inside the Intake behind the Optical Sensor and can be used to determine when a Block is loaded in the Intake.\u00a0\nFor more information about the Bumper Switch, see this VEX Library article.\n\n"}
{"title":"Repairing and Reassembling a V5 Clawbot Claw (V5 Claw Kit v2)","label_names":"['VEX V5']","body":"If the V5 Claw, commonly attached to the V5 Clawbot or other V5 build, has been disassembled, the 3D Build Instructions linked in this article will guide you through the repair and reassembly.\nThe V5 Claw (formally named V5 Claw Kit v2), is a versatile and essential component in the VEX V5 ecosystem.\u00a0Embedded and linked below are step-by-step 3D Build Instructions designed to empower users of all skill levels to confidently rebuild their V5 Claw, restoring its functionality and ensuring continued success in various robotics applications.\n\nSelect this link to open the above 3D Build Instructions in a separate tab."}
{"title":"Using Match Loads in VRC Over Under for VEXcode VR","label_names":"[]","body":"While coding in VRC Over Under Virtual Skills, you may utilize Match Load Triballs in accordance with the guidelines set out in the VRC 2023-2024 Over Under Game Manual and Appendix B - Robot Skills Challenge.\n\nMatch Load Triball Locations\n\n\n\n\n\nSelect the eye icon to see where each of the Match Load areas are located.\n\n\n\n\n\n\n\nLocation labels, 'LZ,' will appear on the Field beneath any game elements. Because there are two Match Load Zones, they will be labeled 'LZ 1' and 'LZ 2.'\nTo remove these labels, select the eye icon again.\n\n\n\nHow to Place Match Load Triballs\n\n\n\n\n\nYou can see the current number of Match Load Triballs available at any point during the match in the upper left of the Playground Window.\nThe number of Match Loads you begin with is dependent on if you choose to use a preload in the Pre-Match Checklist. Any preloads not used will be added to total Match Load Triballs.\n\n\n\n\n\n\n\nSelect the button that corresponds with the Match Load Zone you want to use where you want to place a Match Load Triball. The 'LZ 1' button will put a Triball in the Match Load Zone at the top left of the Field and the 'LZ 2' button will put a Triball in the Match Load Zone on the bottom left side of the Field.\nNote: You must start the project before any Match Load Triballs can be placed on the Field.\n\n\n\n\n\n\n\nIf a Triball is already present in the Match Load Zone, the button for that zone will be disabled and appear transparent.\n\n\n\n\n            \n        \n\nMatch Loads can be added more than once while the project is running.\n\n"}
{"title":"Using the VRC Over Under Playground Window","label_names":"['VEX VR']","body":"The VEX Robotics Competition (VRC) Virtual Skills Playground is a virtual representation of the VRC Over Under (2023-2024) Competition Game. The Virtual Skills Over Under Playground Window is a space for a virtual version of this year's Hero Bot, Striker, to play VRC Over Under Virtual Skills.\n\n\nThe Pre-Match Checklist\n\n\n\n\n\nWhen you open the VRC Virtual Skills Over Under Playground Window, the Pre-Match Checklist will be open. To learn more about making selections in the Pre-Match Checklist, see this article.\n\n\n\nHow to Start, Stop and Reset a Project\n\n\n\n\n\nSelect the \u201cStart\u201d button to start a project.\nThis button will change to a \u201cStop\u201d button when a project is actively running.\n\n\n\n\n\n\n\nSelecting the \u201cStop\u201d button will stop the project and the timer immediately.\nThe Score Window will appear at this time. See below for more information on the Score Window.\n\n\n\n\n\n\n\nSelect the \u201cReset\u201d button to reset the timer, point value, and Field.\n\n\n\nHow to View Your Score and the Timer\n\n\n\n\n\nYour score can be seen above the Field on the left side. This will be updated in real-time after the project is started.\n\n\n\n\n\n\n\nThe timer is located above the Field on the right side.\nThe timer begins when a project is started and counts down from 1:00. The timer will count down until \u201cStop\u201d is selected, the [Stop project] Block is used in the project, or the timer reaches 0 seconds.\n\n\n\nHow to Use Match Loads\n\n\n\n\n\nMatch Loads are available to place on the Field during a match. See this article about Using Match Loads in VRC Over Under for VEXcode VR for more information.\n\n\n\nHow to Retry and Close the Score Window\n\n\n\n\n\nThe Score Window appears when the timer reaches 0, or if the project is stopped.The Score Window shows your team's name, number, total score, and Skills Stop Time.\n\n\n\n\n\n\n\n\"Submit Score\" will send your team's score to Robot Events.\nNote: The 'Submit Score' button will be available once score submissions are open for the 2023-2024 VRC season.\u00a0\nFor more information about submitting a score for VRC Over Under Virtual Skills in VEXcode VR, view this article.\n\n\n\n\n\n\n\nSelect the \u201cRetry\u201d button to return to the Field and reset the timer and score.\n\n\n\n\n\n\n\nSelect the \u201cX\u201d in the top-left corner to close the Score Window and return to the Field.\nThis will not reset the Field, timer, or score. It will return to the Field exactly as it was at the moment the project was stopped.\n\n\n\nHow to Expand and Shrink the Playground Window\n\n\n\n\n\nThe window begins at a smaller size by default. If you want to expand the window, select the \u201cExpand\u201d button at the top left corner.\n\n\n\n\n\n\n\nSelect \u201cShrink\u201d in the top-left corner to return the window to the default size.\n\n\n\nHow to Hide and Show the Playground Window\n\n\n\n\n\nSelect the \u201cHide\u201d button to collapse the VRC Virtual Skills Window. This will still keep the red toolbar at the top of the window visible.\n\n\n\n\n\n\n\nTo view the full window again, select the \u201cShow\u201d button.\n\n\n\nHow to Select Different Camera Views\n\n\n\nSelect the \u201cTop Camera\u201d button to see an overhead view of the entire Field. This is the default view when you open the VRC Over Under Playground Window.\n\n\n\n\n\n\n\nSelect the \u201cChase Camera\u201d button to see a behind-the-robot view.\n\n\n\n\n\n\n\nSelect the \u201cOrbit Camera\u201d button to see an overview of Striker and the full Field.\n\n\n\nHow to View Settings\n\n\n\n\n\nSelect the gear icon to open the Settings window.\n\n\n\n\n\n\n\nIn this window, your team's name and number will appear.\nData about your device will be displayed in the Settings window. This can be used to help troubleshoot any performance issues\u00a0\n\n"}
{"title":"Using the VIQRC Full Volume Playground Window","label_names":"[]","body":"The VIQRC Full Volume Playground is a virtual representation of the Field for the VIQRC Full Volume (2023-2024) Competition game. The VIQRC Full Volume Playground Window is a space for the Hero Bot, Byte, to interact and move to play VIQRC Full Volume Virtual Skills.\u00a0\n\n\u00a0\n\nHow to Choose Your Starting Position\n\n\n\n\n\nThe default starting position is at the \u201cA\u201d location. Select the 'Starting Position' button to choose a different starting position for your robot. Then, select a letter to choose your new starting position.\u00a0\n\n\n\nHow to Start, Stop, and Reset a Project\u00a0\n\n\n\n\n\nSelect the 'Start' button to start a project.\nThis button will change to a 'Stop' button when a project is actively running.\n\n\n\n\n\n\n\nSelecting the \u201cStop\u201d button will stop the project and the timer immediately.\nThe Score Window will appear at this time. See below for more information on the Score Window.\n\n\n\n\n\n\n\nSelect the \u201cReset\u201d button to reset the timer, point value, and Field.\n\n\n\nHow to View Your Score and the Timer\u00a0\n\n\n\n\n\nYour score can be seen above the Field on the left side. This will be updated in real-time after the project is started.\n\n\n\n\n\n\n\nThe timer is located above the Field on the right side.\nThe timer begins when a project is started and counts down from 1:00. The timer will count down until 'Stop' is selected, the [Stop project] block is used in the project, or the timer reaches 0 seconds.\n\n\n\nHow to Retry and Close the Score Window\n\n\n\n\n\nSelect the 'Retry' button to return to the Field and reset the timer and score.\n\n\n\n\n\n\n\nSelect the \u201cX\u201d in the top-left corner to close the Score Window and return to the Field.\nThis will not reset the Field, timer, or score. It will return to the Field exactly as it was at the moment the project was stopped.\n\n\n\nHow to Expand and Shrink the Playground Window\n\n\n\n\n\nThe window begins at a smaller size by default. If you want to expand the window, select the 'Expand' button at the top left corner.\n\n\n\n\n\n\n\nSelect the 'Shrink' button in the top-left corner to return the window to the default size.\n\n\n\nHow to Hide and Show the Playground Window\n\n\n\n\n\nSelect the 'Hide' button to collapse the Playground Window. This will still keep the blue toolbar at the top of the window visible.\n\n\n\n\n\n\n\nTo view the full window again, select the 'Show' button.\n\n\n\nHow to Select Different Camera Views\u00a0\n\n\n\n\n\nSelect the 'Top Camera' button to see an overhead view of the entire Field. This is the default view when you open the VIQRC Full Volume Playground Window.\n\n\n\n\n\n\n\nSelect the 'Chase Camera' button to see a behind-the-robot view.\n\n\n\nHow to View Settings\n\n\n\n\n\nSelect the gear icon to open the Settings window.\n\n\n\n\n\n\n\nData about your device will be displayed in the Settings window. This can be used to help troubleshoot any performance issues.\n\n"}
{"title":"Building with VEX EXP","label_names":"['VEX EXP']","body":"The VEX EXP system has been designed with the latest technology, sensors, and metal construction pieces to teach STEM concepts. There are many resources in this article that will help you get started and begin building with your new system.\n\nNote: Throughout this article, you will find links to other VEX Library articles and resources that will provide more detailed information about each of the subjects.\n\nGetting organized\nAs you start to unpack your VEX EXP Kit, the first thing that becomes obvious is \u2014 there are a lot of parts. The first steps to success are to identify the parts. You may have just one Kit, or an entire bundle. For more information on Getting Started with an EXP Classroom Bundle, view this article from the VEX Library.\nIdentifying the Parts\nVEX Robotics separates its VEX EXP parts into three categories:\n\nElectronics\nStructure &amp; Hardware\nMotion\nTools &amp; Accessories\n\nThe EXP Electronics include devices such as the EXP Brain, EXP Controller, Smart Motors (5.5W), EXP Battery, sensors, and cabling. The Structure &amp; Hardware parts include things like metal C Channels, U Channels, Angles, Plates, gussets and fasteners. The Motion parts include all of the things which move, such as wheels, gears, sprockets, and other accessories. Lastly, Tools and Accessories include the tools in order to assemble, maintain, and optimize your EXP Robot!\nYou will notice that your EXP Storage Bins do the hard work for you. Structure Components and Tools (right) are all contained within the Structure Bin, while Motion Components will be bundled together in the remaining bin alongside Electronics (left).\n\nOne way to identify all these parts is the EXP Parts Poster found at posters.vex.com.\n\n\n\n\n\n\nAnother method of identifying parts is to search on the part name\/part number from your kit\u2019s part list and match them to the images of the parts found on the VEX website.\n\n\n\nPowering Up\nAfter you become familiar with your kit\u2019s parts and organize your kit, the next step is to prepare your EXP Robot Brain and EXP Controller for use. This will include:\n\nCharging the EXP Controller.\nCharging the EXP Battery.\nConnecting the EXP Robot Brain with the EXP Robot Battery.\n\nIn addition, your EXP Controller will need to be paired with the EXP Robot Brain and your EXP Robot Brain will need to have its firmware updated.\n\nTo assist you there are VEX Library articles providing details on how to accomplish each of these tasks. The articles are listed below.\nCharging the EXP Controller\nCharging your Controller is accomplished with the USB-C connection.\n\nFor more information on your Controller refer to:\n\nCharging the EXP Controller\nUnderstanding Button and Joystick Names on EXP Controller\nUnderstanding Indicator Lights on EXP Controller\n\nCharging the EXP Battery\n\n\n\n\n\nThe next step in powering up your VEX EXP System is to charge the EXP Battery. This is accomplished with another USB-C connection.\n\n\n\n\n\n        \n      \n\n\nThe EXP Battery has LED indicators to report the status of the battery.View this animation to see how to check the Battery level using the Battery's indicator lights.\n\n1 light = 0-25% charge\n2 lights = 25-50% charge\n3 lights = 50-75% charge\n4 lights = 75-100% charge\n\n\n\nFor more information about charging the EXP Robot Battery refer to:\n\nCharging the EXP Battery\nUsing the VEX EXP Robot Battery\n\nConnecting the EXP Brain to the EXP Battery\n\n\n\n\n\nAfter the EXP Battery has been charged, it will need to be connected to the EXP Brain. This is accomplished inserting the EXP Battery into the slot underneath the EXP Brain. The EXP Cable has a locking tab and can only be inserted in one orientation. The battery needs to be firmly inserted into the EXP Brain until it locks in place.\n\n\nFor more information about connecting the EXP Battery to the EXP Brain\u00a0refer to:\n\nConnect - Battery for VEX EXP\n\nPairing the EXP Brain and EXP Controller\n\n\n\n\n\nAfter the EXP Brain and the EXP Controller both have charged batteries, you will need to pair the two in order to establish communication. This is accomplished by navigating to the Link option in the EXP Brain's Settings, and quickly double pressing the EXP Controller's Power Button while simultaneously holding both of the Left Bumpers.\nOnce a EXP Controller and a EXP Brain are successfully paired this will not need to be done again. For more information regarding pairing a EXP Controller with a EXP Brain refer to Wirelessly Pairing an EXP Controller to an EXP Brain.\n\n\nUpdating the Firmware\nMany VEX EXP products contain their own internal processors and run on a special Operating System. This software is the VEX EXP Firmware and is called VEXos. It is important to update your new equipment\u2019s firmware in order for it to function correctly.\n\nFor more information on updating your firmware refer to these articles:\n\nUpdating VEX EXP Brain Firmware in App-based VEXcode EXP\nUpdating VEX EXP Brain Firmware in Web-based VEXcode EXP\nUpdating VEX EXP Controller Firmware in App-based VEXcode EXP\nUpdating VEX EXP Controller Firmware in Web-based VEXcode EXP (Mac\/Chromebook)\nUpdating VEX EXP Controller Firmware in Web-based VEXcode EXP (Windows)\n\n\nHelp with Instructions\nThere are a number of options for building your first robot. Whether it will be the EXP BaseBot, one of the many builds found on the VEX Robotics site, or one of the builds found in the STEM Labs; it is recommended to start with a set of instructions in order to familiarize yourself with the VEX EXP system before assembling your first custom-designed robot.\n\nOverview of Build Instructions\n\nBuild Instructions are either a .pdf such as the Clawbot EXP Build Instructions or 3D Build Instructions, as found with the Speed Build.\n\nEach of these Build Instructions includes a set of helpful hints and detailed steps which will guide you throughout the build process.\nHelpful Hints for Using Build Instructions\nA crucial part of the design and the educational process is making mistakes. As you build your first robot you will be experiencing this process.\nHere are a few hints to help limit some of mistakes that can be made:\n\n\n\n\n\nInventory of parts - Be sure to collect all the correct parts prior to starting each step.\n\n\n\n\n\n\n\nGreen lines - Many of the illustrations for assembly will have green lines to indicate where parts should go.\n\n\n\n\n\n\n\nOrientation of parts - Pay close attention to the orientation of parts within the illustrations. For example, a gear placed on the wrong side of a C channel will not work because it will not line up with the driving gear on the Smart Motor that will move the gear.\n\n\n\n\n\n\n\nNotations for connecting cables - When connecting Smart Cables between a device and the EXP Brain the number notation indicates the Smart Port number on the EXP Brain the cable needs to be plugged into.\n\n\n\nAssembly Tips\nIn addition to the many tips which are provided in the build instructions, here are some additional general assembly tips which will assist you with your first robot. For a walkthrough guide to build your first EXP Robot, view this article from the VEX Library.\nInformation on Parts\nThe VEX EXP system has many different types of parts. Substituting the wrong part for an instruction set in most cases does not work. An understanding of the EXP parts can be very helpful.\n\n\nStructural - Structural metal parts include C-channels, Flat Beams, Gussets, and Plates. The instruction sets within the Builds should require no modifications to the structural pieces.\u00a0 For more information refer to, Building with EXP Motor Groups\n\n\nFasteners - Earlier versions of the VEX Educational Robot system utilized screws with a hex socket heads for tightening. The EXP system uses star sockets on the heads of the screws. Star sockets are less prone to stripping and allows you to firmly tighten screw and nut systems. For a walkthrough guide to using EXP tools and fasteners, view this article from the VEX Library. For more information on fasteners refer to:\n\nOverview of VEX Screws\nStandoff Retainers - Structure for VEX EXP\n\n\n\nWheels - There are many different options for wheels to use on a EXP Robot. The wheels come in several different sizes and are available in traction versions or wheels designed for omni-directional motion. For more information about wheels refer to, Understanding EXP Wheels.\n\n\nGears and sprockets - The gears and sprockets which are used on the EXP robot to transfer power from the Smart Motors are sized by their number of teeth. For more information refer to:\n\nOverview of EXP Chains and Sprockets\n\n\n\nAssembling Chain and Tank Treads\nThe VEX EXP system has chains and tank treads which can be used with sprockets. These parts are assembled by connecting individual links together and this allows for custom lengths to be used between sprockets. The links can be assembled by bringing two together at a slight angle, aligning the hole on one link with the boss on the next. Then twist the two links until they snap together as a unit.\n\n\n\n  \n\n\n\nExample of assembling Chain Links.\n\n\n\n\n\n      \n\n\n\nExample of assembling Tank Treads.\n\n\nTo disassemble to chain\/tank tread links, reverse the procedure.\n\n\n\n\n\nOne technique which may help when connecting the two ends of an assembled chain\/tank tread is to lay the chain\/tank tread on a sprocket while connecting the two ends.\n\n\n\nWhat is Next?\nOnce you have assembled your first robot, you can now program it! The Get Started with VEX EXP article will help you get started with programming your robot under the section of coding.\nThe next adventure will be designing your own robot. When you are ready to start building your first custom-designed robot, the following articles will assist you:\n\nBuilding EXP Robot Arms\nBuilding EXP Robot Lift Systems\nPrecautions and Safety Guidelines When Working with VEX EXP Robots\n"}
{"title":"Accessing VEX IQ (2nd gen) STEM Lab Videos for Export","label_names":"[]","body":"The videos in VEX IQ (2nd gen) STEM Labs are an essential resource for educators and students using VEX STEM Labs.\u00a0 There may be instances in which you would like to add them to an LMS, or other instances in which videos from the VEX server may be blocked by network firewalls or other restrictions. In order to provide access to the STEM Lab videos, we have supplied a shared Google Drive folder containing all of the videos from the IQ (2nd gen) STEM Labs.\nThis article explains the contents and structure of the files in this folder.\nSelect this link to access the Google Drive folder.\n\n\n\n\n\nWhen you open the Google Drive folder, you will see a folder for each IQ (2nd gen) STEM Lab.\n\n\n\n\n\n\n\nUpon opening one of the STEM Lab folders, you will see a folder for each Lesson in the STEM Lab.\n\n\n\n\n\n\n\nInside each of the Lesson folders are the videos for that Lesson. They are listed in order as they appear in the Lesson.\n\n\n\n\n\n\n\nAll videos are named according to the same system. The sections of each video name are separated by underscores and are as listed in this example:\n\nVEX Platform (IQ)\nSTEM Lab Name (Castle Crasher)\nLesson Number (Lesson 2)\n# of Video in that Lesson (2)\nLesson Page (Learn)\nName of Video (CalculatingTurns)\n\n\n\n\n\n\n\n\nCaption files for each video are also included in a separate folder. They are provided in .srt and .vtt formats.\n\n"}
{"title":" Accessing VRC Virtual Skills with a Virtual Skills Key","label_names":"['VEX VR']","body":"Each VEX Robotics Competition (VRC) registered team is provided a Virtual Skills Key for accessing VRC Virtual Skills in VEXcode VR.\n\nFinding Your Team's Virtual Skills Key\nTo find your team\u2019s Virtual Skills Key, go to RobotEvents.com.\n\n\n\n\n\n1. Select \u201cLogin.\u201d\n\n\n\n\n\n\n\n2. Enter the email address and password associated with your Robot Events account. Then select the \"Login\" button.\nDon't have an account? Go here to create a RobotEvents account.\n\n\n\n\n\n\n\n3. Once you have logged into your account, select \u201cMy Teams\u201d from the account navigation.\n\n\n\n\n\n\n\n4. Here you will see a list of your registered teams with their Virtual Skills Keys.\nNo key listed? Make sure that your team\u2019s registration has been renewed for the current season.\nNote: The Virtual Skills Key is specific for each team. If you have multiple teams, make sure to record which Key goes with each team.\n\n\n\nEntering Your Team's Virtual Skills Key\nBefore you can enter your team\u2019s Virtual Skills Key, launch VEXcode VR by visiting vr.vex.com in a Chrome browser.\nNote: The Virtual Skills Key can be used by multiple members of the same team.\n\n\n\n\n\nWhen VEXcode VR is launched, you may see this window. Select 'Login Here' to launch the login window.\n\n\n\n\n\n\n\nIf you do not see the window above, select 'File' then 'Login Code' in order to launch the login window.\n\n\n\n\n\n\n\nEnter your team number into the login window.\u00a0\n\n\n\n\n\n\n\nOnce the team number is entered, a space will appear to enter the Virtual Skills Key.\nNote: The Virtual Skills Key is not case-sensitive.\n\n\n\n\n\n\n\nAfter entering both a Team Number and Virtual Skills Key, select 'Submit' to complete the login process.\n\n\n\n\n\n\n\nOnce logged in, the icon in the top left corner will turn white and red.\n\n\nOpening the Playground\n\n\n\n\n\nSelect 'File' then the type of project you want to create, Blocks or Text.\n\n\n\n\n\n\n\nSelect this year's VRC Virtual Skills game.\n\n\n\n\n\n\n\nA prompt may appear to inform you that you will be changing the robot model and beginning a new project. Select 'Yes' to continue.\n\n\n\n\n\n\n\nSelect 'Open Playground' in the Toolbar to then open this year's Virtual Skills game.\n\n"}
{"title":"Troubleshooting VEX GO Sensors","label_names":"[]","body":"When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps.\u00a0\nThe steps of this process are:\n\nIdentify the problem\nCheck hardware\nCheck software\nAnalyze and apply data\n\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot.\nVEX GO Sensors:\n\nCoding with the VEX GO Eye Sensor\nCoding with the VEX GO LED Bumper\nCoding with the VEX GO Brain\nCoding with the VEX GO Electromagnet\n\nOnce you have identified which sensor is causing the unintended behavior, you can move forward in the process.\n\nCheck Hardware\nThe second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor.\nCheck Sensor Placement\n\n\n\n\n\nBegin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended.\nAs shown here, the Eye Sensor has a clear line of vision to the object it is meant to detect.\n\n\n\nCheck Sensor Connection\n\n\n\n\n\nTest the sensor\u2019s functionality by looking at the data reported in the VEX Classroom App. Once you have selected the VEX GO Brain you are troubleshooting, select 'Show Device Info' to view the data for sensors connected to that Brain. This can help you validate that the sensor is plugged in and working.\nTo learn more about the device info shown in the VEX Classroom App view this article.\n\n\n\n\n\n\n\nOnce you have the Device Info displayed in the Classroom App, see if the sensor is reporting data.\nIf not, ensure your sensors are plugged in correctly. When plugging in sensors, you should hear a snap when the sensor\u2019s locking tab is fully engaged in a port. Be sure the port that the sensor is connected to matches what is shown in the Classroom App as well. View this article to learn more about how each of the sensors connects to the GO Brain.\nYou can also try swapping out the sensor you are using with another to see if that resolves your issue.\n\n\nIf you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process.\n\nCheck Software\nOnce you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode GO project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nIf you apply any of these strategies to your VEXcode GO project, test your project again to see if this resolved the issue.\u00a0\nCheck Firmware and Configuration\n\n\n\n\n\nBegin by ensuring that your GO Brain\u2019s firmware is up to date.\nThe Brain will automatically update when connected to VEXcode GO, as shown in this image.\n\n\n\n\n\n\n\nYou can also check and update your GO Brain\u2019s firmware using the VEX Classroom App.\nView this article to learn more about updating the GO Brain firmware with the VEX Classroom App.\n\n\n\n\n\n\n\nNow that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode GO. View the articles in this section to learn more about configuring your robot in VEXcode GO.\nCheck to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port.\nChange any incorrect device configurations.\n\n\nRun an Example Project\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. Select 'File' then 'Open Examples' to view the Example Projects in VEXcode GO.\n\n\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that the Eye Sensor is being used to detect an object so that the robot can stop driving and turn when an obstacle is detected.\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may also want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse Other VEXcode GO Tools\nThere are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode GO. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting.\nThe Help\n\n\n\n\n\nRead the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report and how to view those values, and examples of how to use the command in a project.\nView this article to learn more about accessing Help in VEXcode GO.\n\n\nTutorials\n\n\n\n\n\nView a Tutorial video about the sensor you are using. Select the 'Tutorials' icon in the Toolbar to view the Tutorials in VEXcode GO.\n\n\n\n\n\n\n\nOpen the Tutorial that uses the sensor or behavior you are troubleshooting. The Tutorial will then open in VEXcode GO for you to view.\u00a0\nView this article to learn more about viewing Tutorial videos in VEXcode GO.\n\n\nMonitoring and Printing Data\nYou can also view data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project.\u00a0\n\n\n\n\n\nViewing sensor data in the Monitor Console is helpful when you want to see the values changing as a VEXcode GO project is running. This can help you determine what reported values from the sensor to use as parameters in your project. Blocks in the Sensing category of the Toolbox can be added to the Monitor Console by selecting the checkbox beside the block, as shown in this image.\nView this article to learn more about viewing sensor values in the Monitor Console in VEXcode GO.\n\n\n\n\n\n\n\nPrinting to the Print Console in VEXcode GO be used to display information as a project is running, to help provide visual cues to help see what is happening in a VEXcode GO project at a\u00a0specific\u00a0moment in a project. This can help make the visual connection between the project and the actions of the VEX GO Robot easier to see.\nIn the image shown here, data about the robot's heading at various times while the project is run is being printed. Blocks from the 'Looks' category of the Toolbox are used to print to the Print Console in VEXcode GO. \u00a0\nView this article for more information about using the Print Console in VEXcode GO.\n\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and monitoring or printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nIs your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nDid you try stepping through your project?\u00a0Use the 'Step' button to run your project one block at a time. This can slow down the project execution to make it easier to see where your project is having a problem, or where issues with the project flow might be. View this article to learn more about how to step through a VEXcode GO project.\n\n\nIs your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps.\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode GO.\n\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode GO."}
{"title":"Accessing VIQRC Virtual Skills with a Virtual Skills Key","label_names":"['VEX IQ']","body":"Each VEX IQ Robotics Competition (VIQRC) registered team is provided a Virtual Skills Key for accessing VIQRC Virtual Skills in VEXcode VR.\n\nFinding Your Team's Virtual Skills Key\nTo find your team\u2019s Virtual Skills Key, go to RobotEvents.com.\n\n\n\n\n\n1. Select \u201cLogin.\u201d\n\n\n\n\n\n\n\n2. Enter the email address and password associated with your Robot Events account. Then select the \"Login\" button.\nDon't have an account? Go here to create a RobotEvents account.\n\n\n\n\n\n\n\n3. Once you have logged into your account, select \u201cMy Teams\u201d from the account navigation.\n\n\n\n\n\n\n\n4. Here you will see a list of your registered teams with their Virtual Skills Keys.\nNo key listed? Make sure that your team\u2019s registration has been renewed for the current season.\nNote: The Virtual Skills Key is specific for each team. If you have multiple teams, make sure to record which Key goes with each team.\n\n\n\nEntering Your Team's Virtual Skills Key\nBefore you can enter your team\u2019s Virtual Skills Key, launch VEXcode VR by visiting vr.vex.com in a Chrome browser.\nNote: The Virtual Skills Key can be used by multiple members of the same team.\n\n\n\n\n\nWhen VEXcode VR is launched, you may see this window. Select 'Login Here' to launch the login window.\n\n\n\n\n\n\n\nIf you do not see the window above, select 'File' then 'Login Code' in order to launch the login window.\n\n\n\n\n\n\n\nEnter your team number into the login window.\u00a0\n\n\n\n\n\n\n\nOnce the team number is entered, a space will appear to enter the Virtual Skills Key.\nNote: The Virtual Skills Key is not case-sensitive.\n\n\n\n\n\n\n\nAfter entering both a Team Number and Virtual Skills Key, select 'Submit' to complete the login process.\n\n\n\n\n\n\n\nOnce logged in, the icon in the top left corner will turn white and blue.\n\n\nOpening the Playground\n\n\n\n\n\nSelect 'File' then the type of project you want to create, Blocks or Text.\n\n\n\n\n\n\n\nSelect this year's VIQC Virtual Skills game.\n\n\n\n\n\n\n\nA prompt may appear to inform you that you will be changing the robot model and beginning a new project. Select 'Yes' to continue.\n\n\n\n\n\n\n\nSelect 'Open Playground' in the Toolbar to then open this year's Virtual Skills game.\n\n"}
{"title":"Troubleshooting Sensors in VEXcode VR","label_names":"[]","body":"When your VR robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the troubleshooting process and provide tips for how to make your VR robot with sensors behave as intended.\u00a0\nThe steps of this process are:\n\nIdentify the problem\nCheck the VEXcode VR project\nAnalyze and apply data\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor?\u00a0\nUnderstand Sensor Placement\nIn order to identify a problem with a sensor in VEXcode VR, it is important to understand what sensors are present on each model of VR robot, and where the sensors are located on the particular robot you are coding. Sensor placement differs depending on the model of VR Robot, which varies by Playground. Sensor location will affect how the sensor interacts with its environment. Use the table below to determine which robot you are coding, what sensors are included, and where the sensors on that robot are located. Select the article for more information on sensor placement.\n\n\n\nRobot\nPlayground(s)\nArticle\u00a0\n\n\n\nVEX VR Robot\n\n\n\n\nArt Canvas +\nCastle Crasher +\nArt Canvas\nCastle Crasher\nDisk Maze\nDisk Mover\nDisk Transport\nDynamic Castle Crasher\nDynamic Wall Maze\nEncoded Message\nGrid Map\nHidden Pixel Art\nLine Detector\nNumber Grid Map\nShape Tracer\nWall Maze\nCoral Reef Cleanup (The underwater robot in this playground has the same sensors as the VEX VR Robot).\n\n\nUnderstanding Robot Features in VEXcode VR\n\n\n\nVR MazeBot\n\n\n\n\nWall Maze +\n\n\nUnderstanding Features of the VR MazeBot\n\n\n\nVR Rover\n\n\n\n\nRover Rescue\n\n\n\nFeatures of the VR Rover\n\n\n\n\nDisco\n\n\n\n\nVRC Virtual Skills - Spin Up\n\n\nUnderstanding Robot Features in VRC Virtual Skills\n\n\n\nMoby\n\n\n\n\nVRC Virtual Skills - Tipping Point\n\n\nUnderstanding Robot Features in VRC Tipping Point for VEXcode VR\n\n\n\nSlapshot\n\n\n\n\nVIQC Virtual Skills - Slapshot\n\n\nUnderstanding Robot Features in VIQC Virtual Skills\n\n\n\nFling\n\n\n\n\nVIQC Virtual Skills - Pitching In\n\n\nUnderstanding Robot Features in VIQC Pitching in for VEXcode VR\n\n\n\nVR Competition Advanced Hero Robot\n\n\n\n\nGO Competition - Mars Math Expedition\n\n\nUnderstanding Robot Features in GO Competition - Mars Math Expedition Playground in VEXcode VR\n\n\n\nVR 123 Robot\n\n\n\n\n123 Playspace\n\n\n\nCoding the VEX 123 Eye Sensor with VEXcode 123 (the VR 123 Robot has the same sensors).\n\n\n\nCheck the VEXcode VR Project\nOnce you have identified which sensor is causing the issue, and where it is located on the VR Robot,\u00a0 you can move on to checking your VEXcode VR project. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nRun an Example Project\n\n\n\n\n\nOpen an example project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\nFor more information about using example Blocks projects in VEXcode VR, see this article.\nFor more information about using example Python projects in VEXcode VR, see this article.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that this example project provides an example of how all the available Distance Sensor commands can be used with the robot.\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may also want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse the Help\nUse the Help feature in VEXcode VR for the blocks or commands in the example project, or in your project, to learn about the data that is used, what values the command will report, and examples of how to use the command in a project.\n\n\n\n\n\nFor more information about Accessing Help in a VEXcode VR Blocks project, see this article.\nFore more information about Accessing Help in a VEXcode VR Python project, see this article.\n\n\nRead Data on the Monitor Console\nMonitoring sensor values in the Monitor Console in VEXcode VR allows the user to view real-time reports of a specific sensor value (or multiple values) in a project.\n\n\n\n\n\nTo open the Monitor Window and view the Monitor Console, select the Monitor icon next to the Help.\n\n\n\n\n\n        \n      \n\n\nBlocks from the Sensing category in the tool box can be added and removed from the Monitor Console by selecting and deselecting the corresponding check box.\n\n\n\n\n\n\n\nSelected sensor values will be displayed in the Monitor Console, and can be used to adjust your VEXcode project as needed in order to get the desired behavior from the VR robot.\nFor additional information about monitoring sensor values in VEXcode VR, see this article.\nTo monitor sensor values in VEXcode VR Python, the\u00a0monitor_sensors command needs to be added to the project. For more information about monitoring sensors in VEXcode VR with Python, see this article.\n\n\nStep Through Your Project\nThe Step button in VEXcode VR Blocks allows you to see the Blocks in your project being executed on at a time. This can be helpful in trying to determine which sensing block is causing the issue in your project.\n\n\n\n\n\nThe step button is located in the upper right corner of the screen, beside the Start button.\u00a0\nFor more information about Stepping Through a VEXcode VR Project, see this article.\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nIs your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter in the block or command.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition.\n\nIf you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nAre you running your project in the correct Playground? The correct playground must be selected in order for your project to work as intended.\u00a0\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode VR."}
{"title":"Troubleshooting VEX 123 Sensors","label_names":"[]","body":"When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps.\u00a0\nThe steps of this process are:\n\nIdentify the problem\nCheck hardware\nCheck software\nAnalyze and apply data\n\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify if the sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If you need more information to determine if a sensor may be the problem, read the article(s) below related to the sensors on your robot.\nVEX 123 Sensors:\n\nCoding the 123 Eye Sensor using the Coder\u00a0\nCoding the 123 Eye Sensor with VEXcode 123\nIdentifying the 123 Robot's Features\n\nOnce you have identified which sensor is causing the unintended behavior, you can move forward in the process.\n\nCheck Hardware\nThe second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor.\nCheck that the sensor is not blocked\n\n\n\n\n\nBegin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like the Art Ring? Ensure that the sensor has the space needed to operate as intended.\nAs shown here, the Eye Sensor has a clear line of vision to the object it is meant to detect.\n\n\n\nCheck Sensor Connection\u00a0\n\n\n\n\n\nTest the sensor\u2019s functionality by looking at the data reported in the VEX Classroom App. Once you have selected the 123 Robot you are troubleshooting, select 'Show Device Info' to view the data for sensors connected to that Brain. This can help you validate that the sensor is working.\nTo learn more about the device info shown in the VEX Classroom App view this article.\nYou can also try swapping out the 123 Robot you are using with another to see if that resolves your issue.\n\n\nIf you changed something to unblock the sensor or adjust a Coder card, test your project again to see if this resolved the issue. If your 123 Robot or Coder cards did not change, move onto the next step to continue the troubleshooting process.\n\nCheck Software\nOnce you have identified that the sensor is not blocked and is reporting data successfully, you can look to your Coder or VEXcode 123 project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nIf you apply any of these strategies to your project, test your project again to see if this resolved the issue.\u00a0\nCheck Firmware\n\n\n\n\n\nBegin by ensuring that your 123 Robot\u2019s firmware is up to date.\nThe robot will automatically update when connected to VEXcode 123, as shown in this image.\n\n\n\n\n\n\n\nIf you are using the Coder, be sure both the robot and Coder firmware are up to date. You can check and update both your 123 Robot and Coder firmware using the VEX Classroom App. (The Coder firmware can only be updated with the Classroom App.)\nView this article to learn more about updating the 123 Robot with the VEX Classroom App.\nView this article to learn more about updating the Coder with the VEX Classroom App.\n\n\nCheck Coder cards\n\n\n\n\n\nYou can check that the Coder cards are being read accurately, and are not damaged. To view Coder card data in the Classroom App, select 'Show Device Info' for the Coder you are troubleshooting.\nThe Coder card project that is in the Coder at the time of connection to the Classroom App will be shown. You may need to scroll to see the entire project. If the Coder project is changed, select \u2018Update Cards\u2019 to update the data in the Classroom App.\nIf a Coder card shown does not match the Coder card in the Coder, you may have a damaged Coder card in the project. View this article to learn more about using the Classroom App with your Coder.\nTo learn more about Coder card commands individually, view this article.\u00a0\n\n\nRun an Example Project in VEXcode 123\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. Select 'File' then 'Open Examples' to view the Example Projects in VEXcode 123.\n\n\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that the Eye Sensor is being used to detect an object so that the robot can stop driving and turn when an obstacle is detected.\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may also want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse Other VEXcode 123 Tools\nThere are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode 123. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting.\nThe Help\n\n\n\n\n\nRead the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report and how to view those values, and examples of how to use the command in a project.\nView this article to learn more about accessing Help in VEXcode 123.\n\n\nMonitoring and Printing Data\nYou can also view data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project.\u00a0\n\n\n\n\n\nViewing sensor data in the Monitor Console is helpful when you want to see the values changing as a VEXcode 123 project is running. This can help you determine what reported values from the sensor to use as parameters in your project. Blocks in the Sensing category of the Toolbox can be added to the Monitor Console by selecting the checkbox beside the block, as shown in this image.\nView this article to learn more about viewing sensor values in the Monitor Console in VEXcode 123.\n\n\n\n\n\n\n\nPrinting to the Print Console in VEXcode 123 be used to display information as a project is running, to help provide visual cues to help see what is happening in a VEXcode 123 project at a\u00a0specific\u00a0moment in a project. This can help make the visual connection between the project and the actions of the 123 Robot easier to see.\nIn the image shown here, data about the robot's heading at various times while the project is run is being printed. Blocks from the 'Looks' category of the Toolbox are used to print to the Print Console in VEXcode 123. \u00a0\nView this article for more information about using the Print Console in VEXcode 123.\n\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and monitoring or printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nAre your 123 Robot and Coder connected?\u00a0Be sure your robot and Coder are paired together, and are staying paired as the project is being run. View this article to be reminded of the pairing process.\n\n\nDid you try using the Step button on the Coder? Use the 'Step' button to run your project one Coder card at a time. This can slow down the project execution to make it easier to see where your project is having a problem, or where issues with the project flow might be. View this article to learn more about how to step through a Coder project.\n\n\nAre you checking the conditions more than once in your Coder project? Try adding a 'Go to start' card at the end of your project to cause it to return to the start and continue running. The 'Go to start' card creates a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nAre your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps.\n\nIs your whole stack attached to the {When started} hat block in your VEXcode 123 project? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nDid you try stepping through your project in VEXcode 123? Use the 'Step' button to run your project one block at a time. This can slow down the project execution to make it easier to see where your project is having a problem, or where issues with the project flow might be. View this article to learn more about how to step through a VEXcode GO project.\n\n\nIs your VEXcode 123 project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre your block parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre you checking the conditions in your VEXcode 123 project more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps. If using the Coder, try changing the 'If' card to a different color and see if that helps.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode IQ.\n\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about how to code your 123 Robot."}
{"title":"Troubleshooting VEX EXP Sensors","label_names":"[]","body":"When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps.\u00a0\nThe steps of this process are:\n\nIdentify the problem\nCheck hardware\nCheck software\nAnalyze and apply data\n\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot.\nVEX EXP Sensors:\n\nUnderstanding Inertial Sensor Data from the VEX EXP Brain\nUsing Bumper Switch with VEX EXP\nUsing Distance Sensor with VEX EXP\nUsing Optical Sensor with VEX EXP\n\nOnce you have identified which sensor is causing the unintended behavior, you can move forward in the process.\n\nCheck Hardware\nThe second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor.\nCheck Sensor Placement\n\n\n\n\n\nBegin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended.\nAs shown here, the Optical Sensor has a clear line of vision to the object it is meant to detect.\n\n\nCheck Sensor Connection\n\n\n\n\n\nTest the sensor\u2019s functionality by looking at the data reported in the Devices Screen on the VEX EXP Brain. This can help you validate that the sensor is plugged in and working.\u00a0\nTo access the Devices Screen, follow the steps in this article.\u00a0Once the Devices Screen is open, see if the sensor is reporting data.\n\n\n\n\n\n\n\nIf the sensor is not reporting data, ensure your sensors are plugged in correctly. When plugging in sensors to a Smart Port, you should hear a snap when the sensor\u2019s locking tab is fully engaged in a port.\nWhen plugging sensors into a 3-Wire Port, the cable should be fully inserted in the correct orientation with the white wire closest to the Brain screen.\u00a0\nYou can also try swapping out the sensor you are using with another to see if that resolves your issue.\n\n\nIf you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process.\n\nCheck Software\nOnce you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode EXP project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nIf you apply any of these strategies to your VEXcode EXP project, test your project again to see if this resolved the issue.\nCheck Firmware and Configuration\n\n\n\n\n\nBegin by ensuring that your EXP Brain\u2019s firmware is up to date.\nSee this article to learn more about updating firmware on the EXP Brain in App-based VEXcode EXP.\nSee this article to learn more about updating firmware on the EXP Brain in Web-based VEXcode EXP.\n\n\n\n\n\n\n\nNow that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode EXP.\nCheck to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port.\nChange any incorrect device configurations.\n\n\nRun an Example Project\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\nFor more information about EXP Blocks Example Projects and Templates, see this article.\nFor more information about EXP Python Example Projects and Templates, see this article.\nFor more information about EXP C++ Example Projects and Templates, see this article.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that the Bumper Switch is being used to detect when the switch is pressed so the robot can stop driving when it comes into contact with an object.\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse Other VEXcode EXP Tools\nThere are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode EXP. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting.\n\n\n\n\n\nThe Help\nRead the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project.\nView this article to learn more about accessing Help in VEXcode EXP Blocks.\nView this article to learn more about accessing Help in VEXcode EXP Python.\n\n\nPrinting Data\nYou can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project.\u00a0\nNote that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack.\n\n\nVEXcode EXP Blocks\n\n\n\nVEXcode EXP Python\n\n\n\nVEXcode EXP C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the EXP Brain is helpful when you want to see the values changing as a VEXcode EXP project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode EXP project you have already created so you can see the sensor values change at specific times while the robot is moving.\u00a0\nThese example projects above show how to print values from the Inertial Sensor to the EXP Brain. The comments in each project explain the flow of the project and use of each command.\n\n\n\n\nVEXcode EXP Blocks\u00a0\n\n\n\nVEXcode EXP Python\n\n\n\nVEXcode EXP C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the Print Console in VEXcode EXP is recommended for when you are running a VEXcode EXP project where the robot does NOT move. The EXP Brain must remain plugged in during the execution of the project in order to print to the Print Console. This is beneficial because you can read the values from the VEXcode EXP window rather than trying to read data from the Brain screen.\nThese examples show a project printing data from the Distance Sensor to the Console in VEXcode EXP.\u00a0\nFor more information about using the Print Console in VEXcode EXP Blocks, see this article.\nFor more information about using the Print Console in VEXcode EXP Python, see this article.\n\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nIs your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps.\n\nAre you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode EXP.\n\n\nIf you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode EXP."}
{"title":"Troubleshooting IQ (1st gen) Sensors","label_names":"[]","body":"When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps.\u00a0\nThe steps of this process are:\n\nIdentify the problem\nCheck hardware\nCheck software\nAnalyze and apply data\n\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot.\nVEX IQ (1st gen) Sensors:\n\n\nUsing the VEX IQ (1st gen) Gyro Sensor\u00a0\nUsing the VEX IQ (1st gen) Distance Sensor\nUsing the VEX IQ (1st gen) Color Sensor\nUsing the VEX IQ Bumper Switch\nUsing the VEX IQ Touch LED\n\nOnce you have identified which sensor is causing the unintended behavior, you can move forward in the process.\n\nCheck Hardware\nThe second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor.\nCheck Sensor Placement\n\n\n\n\n\nBegin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended.\nAs shown here, the Color Sensor has a clear line of vision to the object it is meant to detect.\n\n\nCheck Sensor Connection\n\n\n\n\n\nTest the sensor\u2019s functionality by looking at the data reported in the Device Menu on the VEX IQ (1st gen) Brain. This can help you validate that the sensor is plugged in and working.\nTo access the Device Menu, follow the steps in this article.\n\n\n\n\n\n\n\nOnce the Devices Screen is open, see if the sensor is reporting data.\nIf not, ensure your sensors are plugged in correctly. When plugging in sensors, you should hear a snap when the sensor\u2019s locking tab is fully engaged in a port.\nYou can also try swapping out the sensor you are using with another to see if that resolves your issue.\n\n\nIf you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process.\n\nCheck Software\nOnce you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode IQ project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nIf you apply any of these strategies to your VEXcode IQ project, test your project again to see if this resolved the issue.\nCheck Firmware and Configuration\n\n\n\n\n\nBegin by ensuring that your IQ Brain\u2019s firmware is up to date.\nSee this article for information about how to update firmware on the VEX IQ (1st gen) Brain.\n\n\n\n\n\n\n\nNow that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode IQ.\nCheck to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port.\nChange any incorrect device configurations.\n\n\nRun an Example Project\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\nFor more information about IQ Blocks Example Projects and Templates, see this article.\nFor more information about IQ C++ Example Projects and Templates, see this article.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that this project provides an example of how all the available Distance Sensor commands can be used with the robot.\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may also want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse Other VEXcode IQ Tools\nThere are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode IQ. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting.\n\n\n\n\n\nThe Help\nRead the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project.\nView this article to learn more about accessing Help in VEXcode IQ Blocks.\nView this article to learn more about accessing Help in VEXcode IQ C++.\n\n\nPrinting Data\nYou can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project.\u00a0\nNote that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack.\n\n\nVEXcode IQ Blocks\n\n\n\nVEXcode IQ C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the IQ Brain is helpful when you want to see the values changing as a VEXcode IQ project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode IQ project you have already created so you can see the sensor values change at specific times while the robot is moving.\u00a0\nThese example projects above show how to print values from the Distance Sensor to the IQ Brain. The comments in each project explain the flow of the project and use of each command.\n\n\nUsing the Device Menu on the IQ Brain is helpful when you want to view sensor values while manually manipulating the robot. You can access the Device Menu without running a VEXcode IQ project and see the values detected by a sensor.\u00a0\n\n\n\n\n\nSelect the X button to access the Brain Settings, scroll down to Device Info, and press the checkmark button to open the Device Menu.\n\n\n\n\n\n\n\nWhile in the Device Menu, use the arrow buttons to select the device you want to view more information for. The Color Sensor is selected in this image. For more information about viewing Device info on the (1st gen) Brain, see this article.\n\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nIs your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps.\n\nAre you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode IQ.\n\n\nIf you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode IQ."}
{"title":"Troubleshooting IQ (2nd gen) Sensors","label_names":"[]","body":"When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps.\u00a0\nThe steps of this process are:\n\nIdentify the problem\nCheck hardware\nCheck software\nAnalyze and apply data\n\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot.\nVEX IQ (2nd gen) Sensors:\n\nUnderstanding Inertial Sensor Data from the VEX IQ (2nd gen) Brain\nUsing the IQ Distance Sensor (2nd gen)\nUsing the IQ Optical Sensor\nUsing the VEX IQ Bumper Switch\nUsing the VEX IQ Touch LED\n\nOnce you have identified which sensor is causing the unintended behavior, you can move forward in the process.\n\nCheck Hardware\nThe second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor.\nCheck Sensor Placement\n\n\n\n\n\nBegin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended.\nAs shown here, the Optical Sensor has a clear line of vision to the object it is meant to detect.\n\n\nCheck Sensor Connection\n\n\n\n\n\nTest the sensor\u2019s functionality by looking at the data reported in the Devices Screen on the VEX IQ (2nd gen) Brain. This can help you validate that the sensor is plugged in and working.\nTo access the Devices Screen, follow the steps in this article.\n\n\n\n\n\n\n\nOnce the Devices Screen is open, see if the sensor is reporting data.\nIf not, ensure your sensors are plugged in correctly. When plugging in sensors, you should hear a snap when the sensor\u2019s locking tab is fully engaged in a port.\nYou can also try swapping out the sensor you are using with another to see if that resolves your issue.\n\n\nIf you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process.\n\nCheck Software\nOnce you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode IQ project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nIf you apply any of these strategies to your VEXcode IQ project, test your project again to see if this resolved the issue.\nCheck Firmware and Configuration\n\n\n\n\n\nBegin by ensuring that your IQ Brain\u2019s firmware is up to date.\nSee this article to learn more about updating firmware on the IQ (2nd gen) Brain in App-based VEXcode IQ.\nSee this article to learn more about updating firmware on the IQ (2nd gen) Brain in Web-based VEXcode IQ.\n\n\n\n\n\n\n\nNow that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode IQ.\nCheck to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port.\nChange any incorrect device configurations.\n\n\nRun an Example Project\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\nFor more information about IQ Blocks Example Projects and Templates, see this article.\nFor more information about IQ Python Example Projects and Templates, see this article.\nFor more information about IQ C++ Example Projects and Templates, see this article.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that the Distance Sensor is being used to detect an object so that the robot can stop driving once the object is reached.\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse Other VEXcode IQ Tools\nThere are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode IQ. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting.\n\n\n\n\n\nThe Help\nRead the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project.\nView this article to learn more about accessing Help in VEXcode IQ Blocks.\nView this article to learn more about accessing Help in VEXcode IQ Python.\nView this article to learn more about accessing Help in VEXcode IQ C++.\n\n\nPrinting Data\nYou can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project.\u00a0\nNote that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack.\n\n\nVEXcode IQ Blocks\n\n\n\nVEXcode IQ Python\n\n\n\nVEXcode IQ C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the IQ Brain is helpful when you want to see the values changing as a VEXcode IQ project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode IQ project you have already created so you can see the sensor values change at specific times while the robot is moving.\u00a0\nThese example projects above show how to print values from the Inertial Sensor to the IQ Brain. The comments in each project explain the flow of the project and use of each command.\n\n\n\n\nVEXcode IQ Blocks\u00a0\n\n\n\nVEXcode IQ Python\n\n\n\nVEXcode IQ C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the Print Console in VEXcode IQ is recommended for when you are running a VEXcode IQ project where the robot does NOT move. The IQ Brain must remain plugged in during the execution of the project in order to print to the Print Console. This is beneficial because you can read the values from the VEXcode IQ window rather than trying to read data from the Brain screen.\nThese examples show a project printing data from the Distance Sensor (2nd gen) to the Console in VEXcode IQ.\u00a0\nFor more information about using the Print Console in VEXcode IQ Blocks, see this article.\nFor more information about using the Print Console in VEXcode IQ Python, see this article.\n\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nIs your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps.\n\nAre you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode IQ.\n\n\nIf you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode IQ."}
{"title":"Troubleshooting VEX V5 Sensors","label_names":"[]","body":"When your robot is not behaving as intended while using sensor feedback, you can follow a step-by-step troubleshooting procedure to find and fix your issues. This article will explain the steps in a troubleshooting process, and provide tips for how to use these steps.\nThe steps of this process are:\n\nIdentify the problem\nCheck hardware\nCheck software\nAnalyze and apply data\n\n\nIdentify the Problem\nThe first step to troubleshooting your sensor is to identify which sensor is causing the problem. Compare the observed robot behavior with the intended robot behavior. Is the problematic behavior caused by a sensor? If so, which sensor? If you need more information to determine which sensor may be the problem, read the article(s) below related to the sensors on your robot.\nVEX V5 Sensors:\n\nUsing the V5 Distance Sensor\nUsing the V5 GPS Sensor\nUsing the V5 Inertial Sensor\nUsing the V5 Optical Sensor\nUsing the V5 Rotation Sensor\nUsing the V5 3-Wire Bumper Switch v2 &amp; Limit Switch\nUsing the V5 3-Wire LED Indicator\nUsing the V5 3-Wire Light Sensor\nUsing the V5 3-Wire Line Tracker\nUsing the V5 3-Wire Potentiometer\n\nOnce you have identified which sensor is causing the unintended behavior, you can move forward in the process.\n\nCheck Hardware\nThe second step is to check the hardware on the robot to be sure that the sensor can function as intended. Each of the following hardware considerations could be affecting the functionality of your sensor.\nCheck Sensor Placement\n\n\n\n\n\nBegin by looking at where the sensor is located on your robot. Is the sensor being blocked by anything, like another part of your robot? Ensure that the sensor has the space needed to operate as intended.\nAs shown here, the Optical Sensor has a clear line of vision to the object it is meant to detect.\n\n\nCheck Sensor Connection\n\n\n\n\n\nTest the sensor\u2019s functionality by looking at the data reported in the Devices Screen on the VEX V5 Brain. This can help you validate that the sensor is plugged in and working.\u00a0\nTo access the Devices Screen, follow the steps in this article.\u00a0Once the Devices Screen is open, see if the sensor is visible in the correct port location and reporting data. Here the Optical Sensor is detected in Smart Port 11.\n\n\n\n\n\n\n\nIf the sensor is not reporting data, ensure your sensors are plugged in correctly. When plugging in sensors to a Smart Port, you should hear a snap when the sensor\u2019s locking tab is fully engaged in a port.\nWhen plugging sensors into a 3-Wire Port, the cable should be fully inserted in the correct orientation with the white wire closest to the Brain screen.\u00a0\nYou can also try swapping out the sensor you are using with another to see if that resolves your issue.\n\n\nIf you changed something with your sensor placement or sensor connection, test your project again to see if this resolved the issue. If your sensor placement and connection did not change, move onto the next step to continue the troubleshooting process.\n\nCheck Software\nOnce you have identified that the sensor is placed on and connected to the robot successfully, you can look to the VEXcode EXP project next. Iterating on a project can help you to ensure that the data from the sensor is being used effectively in your project. The following strategies can help you with coding your sensor.\nIf you apply any of these strategies to your VEXcode V5 project, test your project again to see if this resolved the issue.\nCheck Firmware and Configuration\n\n\n\n\n\nBegin by ensuring that your EXP Brain\u2019s firmware is up to date.\nSee this article to learn more about updating firmware on the V5 Brain.\n\n\n\n\n\n\n\nNow that you are sure all devices are correctly connected to the Brain, check the Device Configuration in VEXcode V5.\nCheck to be sure all of the sensors are present in the configuration. Then, check to be sure each one is connected to the correct port.\nChange any incorrect device configurations.\n\n\nRun an Example Project\n\n\n\n\n\nOpen an Example Project that uses the sensor you are troubleshooting. You can select the \u2018Sensing\u2019 category to filter example projects.\nFor more information about V5 Blocks Example Projects and Templates, see this article.\nFor more information about V5 Python Example Projects and Templates, see this article.\nFor more information about V5 C++ Example Projects and Templates, see this article.\n\n\n\n\n\n\n\nOnce open, read the Note to determine if the functionality in the example project aligns with what you are trying to do with the sensor.\nIn the example project shown here, the note indicates that the state of the Bumper Switch or Limit Switch being pressed will be printed on the Brain screen. In this case True indicates pressed and False indicates not pressed.\u00a0\nRun the example project and observe the robot behavior. Then look at the project to see how the sensor data is being used in order to cause the observed behaviors. You may want to run the example project multiple times to help with this.\nYou may want to try to create your own simplified project to apply what you have learned from the example project to your task.\n\n\nUse Other VEXcode V5 Tools\nThere are also tools and strategies that you can use to help you as you learn more about coding your sensor in VEXcode V5. You can learn about the blocks or commands in the Toolbox individually by using the Help. You can also view sensor data as a project is running to learn more about what the sensor is reporting.\n\n\n\n\n\nThe Help\nRead the Help for the blocks or commands in the example project, or in your project to learn about the data that is used, what values the command will report, and examples of how to use the command in a project.\nView this article to learn more about accessing Help in VEXcode V5 Blocks.\nView this article to learn more about accessing Help in VEXcode V5 Python.\nView this article to learn more about accessing Help in VEXcode V5 C++.\n\n\nPrinting Data\nYou can also print data from the sensor as the example project or your project is running, to help you better understand what the sensor is reporting in real time. This can help you determine what reported values from the sensor to use as parameters in your project.\u00a0\nNote that in a Blocks project, a separate {When started} hat block can be used to keep all of the printing commands organized in their own stack.\n\n\nVEXcode V5 Blocks\n\n\n\nVEXcode V5 Python\n\n\n\nVEXcode V5 C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the EXP Brain is helpful when you want to see the values changing as a VEXcode V5 project is running. This can help you determine what reported values from the sensor to use as parameters in your project. These print commands can be built into the VEXcode V5 project you have already created so you can see the sensor values change at specific times while the robot is moving.\u00a0\nThese example projects above show how to print values from the Distance Sensor to the V5 Brain. The comments in each project explain the flow of the project and use of each command.\n\n\n\n\nVEXcode V5 Blocks\n\n\n\nVEXcode V5 Python\n\n\n\nVEXcode V5 C++\n\n\n\nSelect each image above to enlarge.\nPrinting to the Print Console in VEXcode V5 is recommended for when you are running a VEXcode EXP project where the robot does NOT move. The V5 Brain must remain plugged in during the execution of the project in order to print to the Print Console. This is beneficial because you can read the values from the VEXcode V5 window rather than trying to read data from the Brain screen.\nThese examples show a project printing data from the Rotation Sensor to the Console in VEXcode V5.\u00a0\nFor more information about using the Print Console in VEXcode V5 Blocks, see this article.\n\n\n\nAnalyze and Apply Data\nNext, use what you have learned in the previous steps to adjust your original project. You can continue to use tools like the Help and printing data to enable you to use the sensor effectively to accomplish your goal.\nYou can also ask questions about your project to help you move forward. Think about things like:\n\n\nAre you using greater than &lt; or less than &gt; in your project? Is the symbol facing the right direction? If you are using equal to = try replacing it with a greater than or less than, to use a range of values.\n\nAre your parameters correct? Are you using the data from the sensor to set your parameters? Did you choose the dropdown option that you need?\n\nAre you checking the conditions more than once? Try adding a Forever loop to your project, so that the condition is checked repeatedly when the project is run.\n\nIs your project getting stuck? Are your conditions set correctly? If you are using nested loops, try simplifying your project to isolate individual behaviors.\n\nAre your environmental conditions influencing the sensor? Is it too bright or too dark? Are there objects or people in the way? Try running your project in a different location to see if that helps.\n\nAre you running the most recent version of your project? Have you downloaded your updated project to the Brain? Make sure you redownload the project each time you make a change.\n\nAre you detecting the correct color? Is the sensor reporting a different color than the one you have in your project? Try changing the color parameter, or using a range of hue values, to see if that helps.\n\nAre you detecting an object within the sensor\u2019s field of view? Remember that the field of view moves in conjunction with the movement of the robot.\n\nAre you using a waiting block while checking a condition? Be sure to use non-waiting blocks in a project when checking for a condition. View this article to learn more about waiting vs. non-waiting blocks in VEXcode V5.\n\n\nIf you are coding in blocks, is your whole stack attached to the {When started} hat block? Blocks will only run when they are connected. You can listen for a click sound when you drag blocks and connect them together.\n\nAs you answer these questions, be sure to change one thing in your project at a time, test it, then evaluate whether that change was effective. Testing your project frequently can help you to more easily see how your code is connected to the robot\u2019s behaviors.\u00a0 You may need to repeat steps in the troubleshooting process multiple times to solve your problem, and that is ok. Each iteration will help you learn more about the sensor you are using and how to code it in VEXcode V5."}
{"title":"Building VEX IQ Claws","label_names":"['VEX IQ']","body":"Claws are usually attached to an end of an arm and are used for grasping an object. Motors are used to activate the claws. Motors are commonly used with a gear ratio or sprocket\/chain system.\u00a0\nSingle-sided and double-sided claws may use an increase torque gear ratio and roller claws may use an increase speed gear ratio. Claws can be assembled using a variety of Beams, Gears, and the Other Products from the VEX IQ System. Rubber bands, Intake Flaps, and\/or Traction Links can be used to increase the grip on claws.\u00a0\nIf time is available, several prototypes of claws should be developed during the design stage to assess which will be most effective for manipulating game pieces. Sometimes a simple claw design can be the most competitive.\u00a0\nSome common types of claws are explained in this article. Please note that 3D build examples of these common types types of claws are included. The models can be manipulated, turned, and zoomed in and out in order to see multiple viewpoints.\u00a0\n\nSingle-sided Claw\nSingle-sided claw or sometimes called a clamping claw is typically assembled with a fixed beam and a second beam attached to a motor\/gear system.\n\nThe side of the claw activated by the motor opens, and closes, clamping the game piece against the fixed beam.\n\nTo understand how the Single-sided Claw functions and how it is built, please refer to the resources below. The Animation provides a demonstration of its working, while the 3D Build offers a detailed look at its construction.\n\n    \n  \n\n\nDouble-sided Claw\nDouble-sided claw (as seen on the Clawbot) will activate both sides of the claw.\n\nCustom assembled double-sided claws typically have an even number of gears setup to move the two sides of the claw.\nOne side of the claw will be attached to the first gear in the assembly and the second side of the claw will be attached to the last gear in the assembly, allowing the claw to open and close as the gears are rotated.\n\nTo understand how the Double-sided Claw functions and how it is built, please refer to the resources below. The Animation provides a demonstration of its working, while the 3D Build offers a detailed look at its construction.\n\n    \n\n\n\nRoller Claws\nRoller claws are typically assembled using Wheels, Intake Belts, or Tank Treads. Roller claws function by spinning their rollers and having game pieces pulled into the claw. Then the rollers can be reversed, pushing them out.\n\nRoller claws can be assembled with one side of the claw having a fixed beam serving as a friction plate. The other side will have an active roller to roll the game piece in, along the fixed side.\nA roller claw can also be assembled with a roller on both sides of the claw.\nTypically roller claws are designed to spin faster than the robot can move forward.\nRoller claws allow game pieces to be picked up with less time aligning the robot, however, they require more time and planning to assemble.\n\nTo understand how the Roller Claw functions and how it is built, please refer to the resources below. The Animation provides a demonstration of its working, while the 3D Build offers a detailed look at its construction.\n\n    \n\n"}
{"title":"Custom Controller Code in VEXcode IQ","label_names":"['VEX IQ']","body":"Using the Controller can make it easier to drive and move your robot to complete a task. However, there are limitations to using the Drive program, and depending on your robot build or the task at hand, you may want different controls. Coding the Controller allows you to optimize the Controller to make it fit your robot and the task at hand better. There are several ways to code the Controller in VEXcode IQ. Each has its advantages and limitations, and some methods are better suited for certain situations depending on the desired outcome.\nThis article will walk you through three different options for custom coding the Controller in VEXcode IQ. Each method will be described with its advantages, limitations, and an example use case to help guide you when choosing a method. For the purposes of this article, all code examples shown were created for the Clawbot. However, the same concepts could be applied to numerous other builds found on builds.vex.com, and custom builds.\nOption 1: Assigning Buttons in the Device Configuration\nThis option is great when you are using a standard build, like a BaseBot or Clawbot, and want to get up and running quickly.\nThis option lets you assign motors, a drivetrain, or motor groups to buttons on the Controller in the Device Configuration. For more information about how to assign buttons to the Controller in the Device Configuration, view this article.\n\nSummary of Option 1: Assigning Buttons in the Device Configuration\n\n\n\n\n  Advantages  \n\n\n  Limitations  \n\n\n  Example Situation  \n\n\n\n\n\nQuick setup with no coding needed\nSimplest method\nEasily adjustable\nCan assign individual motors, a standard drivetrain, and motor groups to buttons\n\n\n\n\nButton assignments are limited to the number of buttons on the Controller\nDrivetrain cannot exceed 4 motors or be customized (only a standard drive is supported, not an H drive, holonomic, or other custom drivetrain)\n\n \u00a0 \n\n\n\nManipulating a standard build such as a BaseBot, Clawbot, or a simple modification of those standard builds. For example, a BaseBot with an intake attached to the front controlled by a motor group.\nManipulating which buttons correspond to different behaviors on the robot quickly without much coding\n\n\n\n\n\n\nOption 2: Using a Forever Loop\nIf you are using a custom build instead of a standard build, or want to be able to have more customization in your Controller, this option is a good one. Using a Forever loop is a great introduction to create custom code for your Controller.\nThis option places all of the conditions for the Controller, and its associated buttons, in a Forever loop. This provides more flexibility, especially with custom build designs, but also requires some coding experience. One consideration when using this option however, is the length and complexity of your project. The more conditions that are added, the longer the code stack may become. This means that multiple blocks have to be executed in order, and when there are a lot of blocks, this can slow down project execution. Slower project execution may create a lag between pressing Controller buttons and seeing the robot behavior.\nThe specific example shown below is one way that you can use a Forever loop with a custom design robot (such as a robot with a custom drivetrain) to drive the robot and manipulate the claw and arm in order to interact with objects.\n\nDownload the \"Option 2\" VEXcode IQ (2nd generation) project file &gt;\nNote: If using a 1st Gen Clawbot the arm motor will need to be reversed in the Device Configuration to work as intended in the project above.\nExplanation of Option 2 Code.\n\n\n\n\n   Code Piece   \n\n\n   Explanation   \n\n\n\n    \n\n  A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to \u201chold\u201d will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released.  \n  \u00a0  \n\n\n\n\n\n  \n\n  A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to \u201chold\u201d will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released.  \n A Forever loop is used in order to continuously check for which buttons are being pressed on the Controller. \n The [Set motor velocity] blocks are used to set the motor velocity to the current Controller\u2019s position along the A and D axes. This is the equivalent to setting a car in drive. That doesn\u2019t necessarily make the car move, it just sets it. \n Each joystick axis returns a value between -100 to +100, and returns a value of zero when centered. This then means that the joystick axes, when pushed, equate to -100% to 100%. The farther towards 100 or -100 the axes are pushed, the faster the motor will spin. \n The [Spin] block is then used to actually move the motor. This is the equivalent to pressing the gas on the car once the direction has been set. This allows each motor to be controlled by one of the four Controller axes. \n  \u00a0  \n\n\n\n\n\n  \n\n  A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to \u201chold\u201d will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released. \nThe [If then else if then else] block is used to map certain behaviors to buttons being pressed or released on the Controller. In this section of code, the conditions set are if the E Up or E Down buttons are pressed. If so, certain behaviors will happen, such as the arm raising and lowering. There is also the else portion of the condition, if neither button is pressed, the arm is set to stop moving.\nNote the following section of code in the project for the Claw follows the same explanation.\n  \n  \u00a0  \n\n\n\n\nSummary of Option 2: Using a Forever Loop\n\n\n\n\n  Advantages  \n\n\n  Limitations  \n\n\n  Example Situation  \n\n\n\n\n\nCan accommodate custom builds, especially drivetrains with more than 4 motors\nCan assign multiple behaviors to a single button\nCan assign behaviors to different axes on the Controller (as opposed to the only options of Left Arcade, Right Arcade, Split Arcade, and Tank Drive in the Device Configuration)\n\n\n\n\nRequires some amount of coding knowledge (conditionals, loops, and knowledge of the buttons\/joysticks on the Controller)\nPotential for slower project execution, or lag in button response time. Since all commands are contained within a single Forever loop, the code execution could run slowly depending on the conditions set and the length of the code.\n\n \u00a0 \n\n\n\nUsing the Controller with a custom built robot, especially with a non-standard drivetrain\nWhen wanting to assign multiple behaviors to a single button. For example, when the F Up Button is pressed, the Claw can open, drive forward, and then close around an object.\n\n\n\n\n\n\nOption 3: Using Events\nIf you want a lot of customization to your Controller, Using Events is the best option for you. One button press can trigger multiple robot behaviors, like pressing a button to open the claw, raise the arm, and drive forward for a set distance. Trying to code multiple behaviors per button within a Forever loop would cause the project execution to slow dramatically \u2013 using Events allows you to do this more effectively.\nThis option uses Events to break up the project flow. This is similar to using a Forever loop, but allows for the code to be more organized, so that the button execution has a faster response time. Faster response time means you will not see a lag between pressing Controller buttons and seeing the robot behavior. This example shows the same behaviors as the previous project, but done using the Events instead of the Forever Loop.\n\nDownload the \"Option 3\" VEXcode IQ (2nd generation) project file &gt;\nNote: if using a 1st Gen Clawbot the arm motor will need to be reversed in the Device Configuration to work as intended in the project above.\nExplanation of Option 3 Code.\n\n\n\n\n    Code Piece    \n\n\n    Explanation    \n\n\n\n    \n\n   A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to \u201chold\u201d will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released.   \n  \u00a0  \n\n\n\n\n\n    \n\n   A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to \u201chold\u201d will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released.  \n {When controller axis} Event blocks are used to trigger certain behaviors when one of the four axes on the Controller are changed by using the joysticks. \n The [Set motor velocity] blocks are used to set the motor velocity to the current Controller\u2019s position along the A and D axes. This is the equivalent to setting a car in drive. That doesn\u2019t necessarily make the car move, it just sets it. \n Each joystick axis returns a value between -100 to +100, and returns a value of zero when centered. This then means that the joystick axes, when pushed, equate to -100% to 100%. The farther towards 100 or -100 the axes are pushed, the faster the motor will spin. \n The [Spin] block is then used to actually move the motor. This is the equivalent to pressing the gas on the car once the direction has been set. This allows each motor to be controlled by one of the four Controller axes.  \n   \n  \u00a0  \n\n\n\n\n\n  \n\n   A Clawbot was used for this code example. When the buttons on the Controller are used to raise and lower the arm, as soon as the button is released, due to gravity the arm will fall back down. Setting both the arm and claw to \u201chold\u201d will ensure that both the arm and claw will remain in place even after the buttons on the Controller have been released.  \n{When controller axis} Event blocks are used to map certain behaviors to buttons being pressed or released on the Controller. In this section of code, the conditions set are if the E Up or E Down buttons are pressed. If so, certain behaviors will happen, such as the arm raising, lowering, or stopping.\nNote the last section of code in the project for the Claw follows the same explanation.\n    \n  \u00a0  \n\n\n\n\nSummary of Option 3: Using Events\n\n\n\n\n  Advantages  \n\n\n  Limitations  \n\n\n  Example Situation  \n\n\n\n\n\nCan accommodate custom builds, especially drivetrains with more than 4 motors\nCan assign multiple behaviors to a single button\nCan assign behaviors to different axes on the Controller (as opposed to the only options of Left Arcade, Right Arcade, Split Arcade, and Tank Drive in the Device Configuration)\nFaster code execution and thus, button responsiveness (as each condition is called on separately and not embedded in one single stack of code)\n\n\n\n\nRequires the most coding knowledge of the options (conditionals, loops, events, and knowledge of the buttons\/joysticks on the Controller)\nIf using a 1st generation VEX IQ Brain, having too many Events in a project may result in the project not running, due to the processing limitations of the Brain.\n\n \u00a0 \n\n\n\nUsing the Controller with a custom built robot, especially with a non-standard drivetrain\nWhen wanting to assign multiple behaviors to a single button with no lag. For example, when the F Up Button is pressed, the Claw can open, drive forward, and then close around an object.\n\n\n\n\n"}
{"title":"Troubleshooting VEX V5 Smart Motors","label_names":"['VEX V5']","body":"The following article will provide guidance on how to troubleshoot VEX V5 Smart Motors if you are experiencing one or more of the following issues:\n\nMotor is not spinning to the intended position\nThe VEXcode V5 project is stopping unexpectedly in the middle of the project\nMotors are moving unexpectedly\n\n\nProblem: Motor Not Spinning to Intended Position\nIf your motor is not spinning to the intended position, try the following steps to troubleshoot.\n\n\n\n\n\nBefore editing your VEXcode V5 project, check that you have the correct gear cartridge selected in the device configuration. The default choice is the green 18:1 gear cartridge.\nFor more information about configuring individual motors in VEXcode V5, view this article.\n\n\n\n\n\n\n\nCheck the commands used in your project. [Spin to position] is used to spin a motor to a specific position. In contrast, the [Set position to] block sets the motor encoder\u2019s position to the given value and will not move the motor.\nEnsure that you are using [Spin to position] rather than [Set position to] in your projects.\n\n\n\n\n\n\n\nMake sure that you know the correct degree position that you want the motor to move to. Any gear trains could impact the number of degrees needed to fully raise an arm or open a claw.\nSee this article to learn more about gear ratios with VEX V5 Smart Motors.\n\n\n\n\n\n\n\nIf you are unsure of how far to move a motor, use the device information available on the V5 Brain screen. To open the device information for a motor, first select 'Devices' from the V5 Brain screen.\n\n\n\n\n\n\n\nThen select the motor that you want to see more information for.\nNOTE: The motor must be plugged into the V5 Brain in order to be seen on the devices screen.\n\n\n\n\n\n\n\nOnce opened, you will be able to see the degree and rotational position of the V5 Smart Motor selected. This will update in real time if you want to see how the values change as the motor spins.\nThe device information reports the position of the motor in degrees and revolutions, so as you move a motor (like opening and closing a claw) the numbers will change. Use this testing to determine how many degrees or rotations are needed to close a claw, raise an arm, spin an intake, etc.\n\n\n\nProblem: VEXcode Project Getting Stuck\nYour project may seem to get stuck because the motor cannot reach its intended target position. You can adjust the position the motor is moving towards or can set a \u201ctimeout\u201d for the motor.\n\n\n\n\n\nMotor timeouts allow you to set a time limit for the motor to reach its target position. If it has not met that position when time expires, the motor will stop trying to spin and the project will move to the next command.\n\n\n\n\n\n\n\nIn this example, the motor timeout is set to 3 seconds. If the claw does not close to 360 degrees within 3 seconds, the motor will stop spinning at the 3 second mark then move to the next command and drive forward.\n\n\n\nProblem: Motors Not Holding a Position \nYou may have an arm motor that moved down unexpectedly because it is being pulled by gravity or other forces. Using [Set motor stopping] allows you to control that movement of the arm after another command is completed.\n\n\n\n\n\nThe [Set stopping to] command allows you to determine the behavior of the motor after it stops spinning.\nUsing the \u2018hold\u2019 parameter will instruct the motor to fight gravity. \u2018Hold\u2019 causes the motor to come to an immediate stop and will return it to the stopped position if moved.\n\n\n\n\n\n\n\nSet the motors to \u2018hold\u2019 before other commands using the motors as shown in this custom Controller code example here.\n\n"}
{"title":"Overview of VEX IQ (2nd gen) Sensors","label_names":"[]","body":"Sensors provide the ability for a robot to receive feedback from the environment. There are a variety of VEX IQ (2nd gen) sensors that can be used to obtain different types of input for the robot. The table below provides an overview of what each sensor can do, and examples of how it can be used in a project.\nVEX IQ (2nd gen) Sensor Comparison Table\n\n\n\nSensor\nFunction\nExample Uses\n\n\n\nBumper Switch\n\n\n\n\nTells the robot whether its bumper is pressed (sensor value of 1) or released (sensor value of 0).\n\n\n\n\nDetecting if the robot has bumped into an object, such as a maze wall or game object\nTriggering a robot action, when pressed or released\nToggling to turn on or off motors when pressed\nDetecting other parts of the robot, such as an arm, when it presses in the bumper\n\n\n\n\n\nTouch LED\n\n\n\n\nCan detect capacitive touch, such as the touch of a finger. \nCan be set to display many colors.\n\n\n\n\nTriggering a robot action when touched\nStarting or pausing a program when touched\nDisplaying different colors during different parts of a program, so it is easier to pinpoint code for troubleshooting\n\n\n\n\n\nOptical Sensor\n\n\n\n\n\nDetect the color of an object\n\n\nDetect an object\n\n\nDetect the brightness level of ambient light\n\n\nMeasure the numerical Hue Value of an object\n\nWhite LEDs on the sensor can provide a consistent light source when detecting colors regardless of the surrounding light conditions.\n\n\n\n\n\nCoding the robot to interact specifically with an item of a certain color, such as sorting cubes by color\nDetecting whether an object is present, such as a wall or game object\nTriggering the robot to perform a behavior when the light level is at a certain brightness\nUnderstanding precisely how the Optical Sensor is detecting color in varied lighting conditions\nFollowing a line\u00a0\nDetecting whether an object is present\n\n\n\n\n\nDistance Sensor\n\n\n\n\nDetects if there is an object in front of it\nMeasures the distance between itself and an object\nDetermine the relative size of an object\nReports the velocity of an object\n\n\n\n\nDriving forward until the sensor detects that it is a certain distance away from a wall, then stopping driving.\nDriving forward a certain distance to pick up a game object\nDriving away from an object or surface until it has reached a specific distance\u00a0\nInteracting with an object that is one size and avoiding interacting with an object that is another size, such as picking up only the small balls on a Field\nDetermining the velocity of an approaching object and printing it on the Brain's screen\n\n\n\n\n\n\nAdditional Sensor Information\nNote that the IQ (2nd gen) Brain has a built in Inertial Sensor rather than a Gyro Sensor. For detailed information on IQ (2nd gen) Sensors, see the following articles:\n\nUsing the VEX IQ Bumper Switch\nUsing the VEX IQ Touch LED\nUsing the IQ Optical Sensor\nUsing the IQ Distance Sensor (2nd gen)\nUnderstanding Inertial Sensor Data from the VEX IQ (2nd gen) Brain\n"}
{"title":"Overview of VEX IQ (1st gen) Sensors","label_names":"[]","body":"Sensors provide the ability for a robot to receive feedback from the environment. There are a variety of VEX IQ (1st gen) sensors that can be used to obtain different types of input for the robot. The table below provides an overview of what each sensor can do, and examples of how it can be used in a project.\nVEX IQ (1st gen) Sensor Comparison Table\n\n\n\nSensor\nFunction\nExample Uses\n\n\n\nBumper Switch\n\n\n\n\nTells the robot whether its bumper is pressed (sensor value of 1) or released (sensor value of 0).\n\n\n\n\nDetecting if the robot has bumped into an object, such as a maze wall or game object\nTriggering a robot action, when pressed or released.\nToggling to turn on or off motors when pressed.\nDetecting other parts of the robot, such as an arm, when it presses in the bumper.\n\n\n\n\n\nTouch LED\n\n\n\n\nCan detect capacitive touch, such as the touch of a finger. \nCan be set to display many colors.\n\n\n\n\nTriggering a robot action when touched\nStarting or pausing a program when touched\nDisplaying different colors during different parts of a program, so it is easier to pinpoint code for troubleshooting.\n\n\n\n\n\nColor Sensor\n\n\n\n\n\nUses reflected light to detect an object\u2019s \n\ncolor\nhue value\ngrayscale value\nbrightness\nproximity.\n\n\n\n\n\n\nInteracting with an item of a certain color, such as when sorting objects by color.\nDetermining the numerical hue value of a colored object. This data can be useful when troubleshooting the color sensor in varied lighting conditions.\nUnderstanding how the Sensor is detecting color in varied lighting conditions.\nDetecting a line\u00a0\nDetecting whether an object is present\n\n\n\n\n\nGyro Sensor\n\n\n\n\nDetects the robot's speed and rotation\n\n\n\n\nMaintaining straight driving\nMaking accurate turns\n\n\n\n\n\nDistance Sensor\n\n\n\n\nDetects if there is an object in front of it\nMeasures the distance between itself and an object\n\n\n\n\nDriving to a certain distance in front of an object, such as a wall or game object\nDriving forward until it detects that it is a certain distance away from a wall, then stopping.\u00a0\u00a0\nDriving to an object to pick it up.\nDriving away from an object or surface until it has reached a specific distance.\u00a0\n\n\n\n\n\n\nAdditional Sensor Information\nFor detailed information on the sensors above, see the following articles:\n\nUsing the VEX IQ Bumper Switch\nUsing the VEX IQ Touch LED\nUsing the VEX IQ (1st gen) Color Sensor\nUsing the VEX IQ (1st gen) Gyro Sensor\nUsing the VEX IQ (1st gen) Distance Sensor\n"}
{"title":"Charging the VEX V5 Controller","label_names":"['VEX V5']","body":"In order to charge your V5 Controller, follow along with the steps in this article.\n\nFirst, ensure you have all of the materials you need to get started:\n\nA micro-usb cable\nA V5 Controller\nA power source (such as a charging cube connected to an outlet or a computer)\n\nHow to Charge a V5 Controller\n\n\n\n\n\nConnect the micro-usb cable to the Controller\u2019s charge port located underneath the power button.\nThe micro-usb cable must be connected to a power source to charge the Controller.\nThe battery charge icon on the screen will indicate that the Charger is successfully charging.\n\n\n\n\n\n\n\nYou can turn the Controller on and off by pressing and holding the power button.\n\n\n\n\n\n\n\nIf the Controller is still actively charging, the battery indicator will fluctuate.\nOnce the Controller is fully charged, the battery icon will be displayed as full.\n\n"}
{"title":"Configuring Sensors in VEXcode V5","label_names":"['VEX V5']","body":"When starting to program with VEXcode V5, Sensor blocks will not appear in the Toolbox until a sensor has been configured.\nAdding a Sensor\n\n\n\n\n\nTo configure a sensor, select the Devices icon to open the Devices window.\u00a0\n\n\n\n\n\n\n\nSelect \u201cAdd a device.\u201d\n\n\n\n\n\n\n\nSelect a sensor.\nNote: Sensors include the Rotation Sensor, Distance Sensor, Vision Sensor, Optical Sensor, Inertial Sensor, and GPS Sensor. All sensors follow the same configuration process. For more information about configuring 3-wire devices, view this article.\u00a0\n\n\n\n\n\n\n\nSelect which port the sensor is attached to on the VEX V5 Brain. Ports that are already configured for other devices will be unavailable. Once the port has been selected, select \u201cDone\u201d to submit the device to the configuration or \u201cCancel\u201d to return back to the Devices menu.\nNote: Selecting \u201cCancel\u201d will undo any changes you have made to the device and will not be a part of the configuration.\n\n\n\nChanging a Sensor\u2019s Port Number\n\n\n\n\n\nYou can change the port number for the Sensor by selecting on the Sensor in the Devices window.\n\n\n\n\n\n\n\nSelect a different port on the Port Selection screen and the port number will turn green. Then select Done to submit the change.\u00a0\n\n\n\nRenaming a Sensor\n\n\n\n\n\nYou can also rename the sensor by changing the name in the text box at the top of the Port Selection screen. If you select an invalid name, the text box will highlight red to indicate.\u00a0Then select Done to submit the device changes to the configuration.\u00a0\n\n\n\n\n\n\n\nIf you change the name of a sensor that is already being used in your project, you will need to update the sensor name in the Block to the new name using the drop down.\n\n\n\nDeleting a Sensor\n\n\n\n\n\nSensors can also be deleted by selecting the \u201cDelete\u201d option at the bottom of the Port Selection screen.\nNote:\u00a0If you delete a sensor that is already being used in your project, your project will not work until you also delete the blocks that were using the deleted sensor.\n\n"}
{"title":"Accessing Help in a VEXcode EXP Python Project","label_names":"['VEX EXP']","body":"Help explains what a command does so that you can figure out if it\u2019s helpful for your project.\n\nAccessing Help from the Tool Box\n\n\n\n\n\nSelect the Help icon on any command in the Tool Box.\n\n\n\n\n\n\n\nYou will see a screen extend from the right with information on the command selected.\n\n\n\n\n\n\n\nSelect any commands that you want to learn more about.\n\n\n\n\n\n\n\nHide the Help window when finished by selecting the right arrow next to the Help icon.\n\n\n\nAccessing Help from the Workspace\n\n\n\n\n\nRight click or long press on any command in the Workspace.\n\n\n\n\n\n\n\nA context menu will appear. Select \u201cCommand Help.\u201d\n\n\n\n\n\n\n\nYou will see a screen extend from the right with information on the command selected.\n\n\n\n\n\n\n\nHide the Help window when finished by selecting the right arrow next to the Help icon.\n\n"}
{"title":"Using VEXcode VR Switch to Transition from Blocks to Text-Based Coding","label_names":"[]","body":"While beginner programmers are more inclined to use the block-based interface, more advanced students may be interested in coding their robot using a text-based programming language, like Python. Historically this transition from blocks to text-based programming can feel to students like learning an entirely new language, where they cannot apply the logic they had previously learned using blocks.1 VEXcode VR Switch was developed in order to facilitate that transition from block-based to text-based programming. This article will cover how to use VEXcode VR Switch and walk you through a classroom scenario to explain and illustrate those features in context.\n\nUsing Switch Blocks\nSwitch incorporates familiar elements of block-based programming and integrates text-boxes where text commands can be typed. This allows the students to slowly transition to text as they learn the commands and syntax that goes along with Python.\n\n    \n  \n\n\n\n        \n      \n\n\nSwitch provides students a natural bridge from Blocks into text-based coding. As students gain familiarity with the logic and sequencing of commands, they can begin to convert a project one block at a time.\u00a0\n\n\nThis allows students to continue working with the logic flow of a block-based program where they can physically see things like the wrapping of a loop around other blocks while also beginning to experiment with text commands themselves. Once the blocks are converted to Switch, students can easily change parameters and begin to understand the syntax of the text command. This section will walk you through a student's use of Switch to explain how you can use these blocks in a VEXcode VR project.\nSwitch is available with a VEXcode VR Premium license. Learn more about VEXcode VR subscriptions here.\nOnce you have your license, learn how to access Switch using the information in this article.\nSwitch in the Classroom\nAustin is a student who has been coding with blocks for several years. While some students in the class are still new coders, Austin wants to learn more about Python and how to move into coding the VR robot using text. Ms. Hunter, the Computer Science teacher, noticed that Austin was ready for an additional challenge and introduced Switch to help scaffold Austin's learning and introduce text-based coding. Ms. Hunter demonstrated some of the basics like converting a block and opening the Help to learn more about the Switch Python command for each of the blocks.\u00a0\nToday Ms. Hunter assigned the Coral Reef Cleanup activity to the class. She uses VEXcode VR for her coding classes because she knows that she can differentiate her instruction and reach students of varying coding levels with the same activities. Switch mode helps to facilitate that differentiation for students like Austin. In the Coral Reef Cleanup activity, the goal is to collect as much trash as possible before the battery runs out on the VR Robot. Understanding the challenge and how to code basic algorithms, Austin creates a VEXcode VR project that uses the Down Eye Sensor to detect the border of the Playground and drive in reverse to avoid harming the coral.\n\nConverting a Single Block to Switch\nConvert 1 block\n\n\n\n        \n      \n\n\nNow that Austin has a project he has tested and verified works, the next step is to convert a block to Switch in order to begin exploring Python.\u00a0\n\nBlocks can be converted to Switch by long pressing or right clicking on the block, then selecting the \u2018Convert to Switch Block\u2019 option, as shown in the video here.\n\n\nAustin can now see that the [Drive for] block turned into the drive_for Python command. After converting, Austin runs the project to ensure it still works as intended. After the conversion, Austin wants to learn more about the drive_for command. By opening the Help of the [Drive for] block, Austin can make connections between the parameters from the block to the Python command.\nUsing the Help to learn more about Switch Python Commands\nOpen Help\n\n\n\n        \n      \n\n\nIn order to look at the Switch Python Command information in the Help, Austin opens the Help window and selects the [Drive for] block, then scrolls to the bottom as shown in the video here.\u00a0\n\n\nMs. Hunter checked in and could see that Austin was learning more about the [Drive for] block. She challenged him to apply what was learned from converting a block and typing into a new block. She showed how to drag a Switch block in, and had Austin try to type a turn_for command into the block. Austin open the Help for the block and makes a note about the structure of the command.\u00a0\nTyping in a Switch Block\nAdd a block\n\n\n\n        \n      \n\n\nKnowing the Python command from checking the Help, Austin wants to type directly into a Switch block. Dragging a [Switch Stack] block from the Toolbox, Austin adds it above the [Turn for] block.\u00a0\n\n\nType in the block\n\n\n\n        \n      \n\n\nThen Austin uses the cursor to select the Switch block and begin typing the turn_for Python command as shown here.\u00a0\n\nAfter typing in the new command and ensuring the parameters match the original block, the [Turn for] block can be deleted.\u00a0\n\n\nMs. Hunter comes around to check on Austin\u2019s progress. She sees the Switch project and asks to see it run to ensure the commands are typed correctly. After verifying the project works, she demonstrates another feature - multi-line blocks.\nCopy and Paste\n\n\n\n        \n      \n\n\nThe [Switch Stack] block can have multiple lines of code typed within it. Austin copies the turn_for text and pastes it into the block above as shown in the video here.\n\u00a0\nAustin sees that by hitting \u2018enter\u2019 or \u2018return\u2019 on the keyboard, additional lines can be added to the block, and continues adding Python commands.\n\n\nFeeling like a master of Drivetrain commands in Python, Austin prints out a certificate and saves the project for next time.\nConverting Stacks to Switch\nLater in the school year, Ms. Hunter revisits the Coral Reef Cleanup activity and challenges students to either earn a higher score or use text-based coding. While Austin has been using Drivetrain commands in Switch blocks, this activity is an opportunity to learn more about the equivalent of \u2018C\u2019 blocks and Booleans in Python.\u00a0\nConvert wrapper\n\n\n\n        \n      \n\n\nAustin long presses or right clicks on the [If then else] block and selects \u2018Convert wrapper and contents to Switch Block.\u2019 This converts the loop and the contents of the loop to a single Switch block.\n\nNote the indentation after the conversion is complete. Multiple commands in one Switch block must have the proper indentation to work as intended.\n\n\nAdditional Switch Blocks\nWhile Austin has been exclusively using the [Switch Stack] block, there are additional Switch blocks available. Austin is ready to turn in an improved Coral Reef Cleanup project, but makes a plan with Ms. Hunter to try a new kind of Switch block like those listed below in the next class.\nSwitch blocks follow the same shape conventions as other blocks. The table here shows the comparison between the block shape, its meaning, and the Switch blocks of the same type.\n\n\n\n\nBlock Shape\nDescription\nBlock Examples\nSwitch Examples\n\n\n\n\nHat blocks\nStart a stack of blocks and are shaped to attach blocks below them.\n\n\n\n\nStack blocks\nPerform main commands. They are shaped to attach above or below other stack blocks.\n\n\n\n\nBoolean blocks\nReturn a condition as either true or false and fits inside any blocks with hexagonal (six-sided) inputs for other blocks.\n\n\n\n\nReporter blocks\nReport values in the form of numbers and fits inside any blocks with oval inputs for other blocks.\n\n\n\n\nC blocks\nLoop the block(s) within them or check if a condition is true or false. They are shaped to attach stack blocks above, below, or inside them.\n\n \n\n\n \n\n\n\n\n\nPutting It All Together\nAs Ms. Hunter watched Austin test out typing different Python commands in Switch blocks, she could see how Switch allowed her students to scaffold their own learning. Her students all had different coding experiences before beginning her class, and the challenges within VEXcode VR allow them to code at their own levels. Some students code solely in Blocks, some in Python, and others, like Austin, use Switch to transition into Python coding. Over the next few months, Austin moved to coding exclusively in Python, applying the learning from using Switch to make the transition from blocks to text much easier and smoother.\u00a0\nVEXcode VR Switch allows teachers, like Ms. Hunter, to be facilitators of learning while students of all different coding levels complete the same challenge. All while the students, like Austin, feel empowered to try new methods of solving coding activities as they transition from blocks to text using VEXcode VR Switch.\n\n1\u00a0 Weintrop, David, and Uri Wilensky. \"How block-based, text-based, and hybrid block\/text modalities shape novice programming practices.\"\u00a0 International Journal of Child-Computer Interaction 17 (2018): 83-92\n"}
{"title":"Using the Python Competition Template in VEXcode V5","label_names":"[]","body":"The Competition Template is an example project that has commands already included to communicate with the Field Control System during competitions, ensures commands are in compliance with field regulations, and aids in setting up projects in order to avoid complications and disqualification (\"competition\" refers to a VRC event using the official field control hardware).\u00a0\u00a0\n\nOpen the Competition Template from the Examples Page\n\n\n\nThree sections of the template: Pre-autonomous, Autonomous Mode, and Driver Control\n\n\n\n\n\nNote: In order for your project to work at a competition, you must leave these functions in your project. Add commands where the comments indicate for each section.\n\n\n\nUse the pre_autonomous Function for any Setup\n\n\n\n\n\nThe\u00a0pre_autonomous function is used for any set-up your robot may need such as calibrating a Gyro, setting variables, or other device settings. These commands will run immediately when the project is started, before the autonomous portion of the match begins.\n\n\n\n\n\n\n\nEnsure that all commands are properly indented to that the guiding line is visible between the\u00a0pre_autonomous and\u00a0autonomous functions.\nNote: If no setup is needed, this function can remain empty.\n\n\n\nAutonomous\n\n\n\n\n\nThe autonomous function is used for controlling your robot during the autonomous portion of a VRC match. Commands within this function will run when the match begins the Autonomous period.\n\n\n\n\n\n\n\nEnsure that all commands are properly indented to that the guiding line is visible between the\u00a0pre_autonomous and\u00a0autonomous functions.\nNote: If no setup is needed, this function can remain empty.\n\n\n\nUser Control\n\n\n\n\n\nThe user_control function is used for controlling your robot during the driver control portion of a VRC match.\u00a0 Commands within this function will run when the match begins the Driver Control period.\nNote: The while True loop is shown above so the robot will respond to input from the V5 Controller for the entirety of the match.\n\n\n\n\n\n\n\nEnsure that all commands are properly indented within the\u00a0while True loop while coding the user control portion. Two guiding lines should be visible as shown here. One because the\u00a0while True is within the\u00a0user_control function. The other to ensure commands are within the\u00a0while True loop.\n\n"}
{"title":"Using the Context Menu in VEXcode V5 Python","label_names":"[]","body":"Right-clicking in VEXcode V5 leads to many options to help you with your Python coding.\u00a0\n\nOpening the Context Menu\n\n\n\n\n\nRight-clicking on a command or in the programming area will open the Context Menu\n\n\n\n\n\nNotice the shortcuts on the right side of the Context Menu. These will match with your keyboard depending on your operating system. Here a macOS device is being used.\n\n\nChanging Font Size\n\n\n\n\n\nSometimes it can be hard to read the text commands because the font is too small. Use the 'Font Increase' option to make the commands in the workspace larger.\n\n\n\n\n\n\n\nTo make the font smaller, use the 'Font Decrease' option.\n\n\n\n\n\n\n\nIf you want to return to the default font size in the workspace, select the 'Font Reset' option\n\n\nLine Comments\n\n\n\n\n\nSelecting one of the 'Line Comment' options will allow you to change a command to a comment or vice versa. This is useful if you want to momentarily disable a command and test your project again.\n\n\n\n\n\n        \n      \n\n\nIn the video shown here, each of the three line commands are used to edit what is a comment in the project.\n\n\nCut, Copy, and Paste\n\n\n\n\n\nUsing the options in the Context Menu or the same traditional keyboard shortcuts, you can cut, copy, and paste text in your project. This is useful when you want to move code from one location to another or edit large chunks of code in your project.\n\n\nCommand Help and Changing Occurrences\n\n\n\n        \n      \n\n\nBy right-clicking a command and then selecting 'Command Help' in the Context Menu, the Help information will appear.\n\n\n\n\n\n        \n      \n\n\nChanging occurrences is helpful when you want to bulk change a set of commands in your project. In the example shown here, the\u00a0drive_for\u00a0command was incorrectly typed, then copy and pasted 3 additional times. By right-clicking on the first command to open the Context Menu, you can select 'Change All Occurrences' and it will select all occurrences of that typed command. Then you can edit the commands as shown in this video.\u00a0Note: Occurrences must exactly match. If one of the\u00a0drive_for commands, in this video, was spelled correctly, it would not be highlighted.\n\n\nCommand Pallet\n\n\n\n        \n      \n\n\nThe Command Pallet opens all of the available commands and shortcuts that can be used in the workspace. Open the Command Pallet by right-clicking then selecting 'Command Pallet.'\n\n"}
{"title":"Using Comments in VEXcode V5 Python","label_names":"[]","body":"Comments are usually added to projects to explain what a programmer wanted parts of the program to do. Comments are helpful when collaborating and troubleshooting, as they document what the code does without having to reread and comprehend many lines of code. Other programmers can read the comments to understand the code's functionality, and the original programmer can remember what their code does after revisiting a project.\nPython Comments\n\n\n\n\n\nAll comments in Python start with a # (pound) symbol.\n\n\n\n\n\n\n\nType any text, numbers, or symbols after the # (pound) sign. Comments typically describe the functionality of the code to help the programmer understand what a piece of code does.\n\n\n\n\n\n\n\nWhen the comment is complete, press the \"Enter\" or \"Return\" key to go to the next line. Comments only span one line.\n\n"}
{"title":"Understanding the Colorization of Code in VEXcode V5 Python","label_names":"[]","body":"When creating Text projects, the syntax, spacing, indenting, and spelling in your code in very important to ensure that your project runs as intended. The color coding present in the Workspace in VEXcode EXP Python is an extra visual cue that you have entered your code into your project correctly.\nIf there is an unrecognizable component while typing commands into the Workspace, it will remain black (like the user-created category). This can be a useful indicator as you are working to prevent frustration or extra troubleshooting later on.\nUse the cursor and keyboard to correct errors. As the components are recognized, they will be colorized correctly.\nThe colorization of code follows the following conventions:\n\nClasses\n\n\n\n\nThe individual device the command pertains to (i.e. drivetrain, sensor, brain)\n\n\n\nCommands\n\n\n\n\nThe behavior within the command (i.e. drive, turn)\n\n\n\nParameters\n\n\n\n\nInformation about how the behavior executes (i.e. direction, distance)\n\n\n\nStructures\n\n\n\n\nControl the flow of the project (i.e. conditionals, loops)\n\n\n\nValues\n\n\n\n\nNumerical parameter assigned to the behavior (i.e. number of degrees of a turn)\n\n\n\nUser Created\n\n\n\n\nUser created variables and commands\n\n\n\nComments\n\n\n\n\nThe text following a # that will not effect the program.\n\n"}
{"title":"Guide to the VEX IQ Brain Screen (2nd gen) ","label_names":"[]","body":"There are many things that you can do and learn by navigating the VEX IQ (2nd gen) Brain screen. This article will walk you through each of the icons on the Brain screen and what they are used for, so that you can make use of the features on the Brain in your setting.\u00a0\n\nNavigating the Brain Screen\n\n\n\n\n\nPress the Check button to power on the Brain.\u00a0\n\n\n\n\n\n\n\nOnce the Brain is powered on, the indicator light will show green, and the Home Screen will appear, as shown here.\u00a0\nThe buttons on the Brain are used to navigate the Brain screen.\nView this article to learn more about what each button does, and how they can be used to move through the options on the Brain screen.\n\n\n\n\n\n\n\nAs you toggle to an option, its icon will have a black surround, and the name of the option will show on the bottom of the screen. In this image, the 'Drive' program is selected.\n\n\n\nOptions on the Home Screen\nDrive\n\n\n\n\n\nSelect the 'Drive' option to open the built-in Driver Control Program on the Brain.\u00a0\n\n\n\n\n\n\n\nFrom the Drive menu, you can now run the Driver Control Program or access the settings within it, like Driver Configuration.\nView this article to learn more about running the Driver Control Program on the IQ (2nd gen) Brain.\n\n\nPrograms\n\n\n\n\n\nSelect the 'Programs' option to access programs that are downloaded to the Brain.\u00a0\n\n\n\n\n\n\n\nFrom the Programs menu, you can now access projects that are downloaded to the Brain or toggle to an open project slot.\nView this article to learn more about running user programs on the IQ (2nd gen) Brain.\n\n\nDevices\n\n\n\n\n\nSelect the 'Devices' option to access information about the devices that are currently connected to the Brain, like motors and sensors.\u00a0\n\n\n\n\n\n\n\nFrom the Devices menu, you can now toggle to different connected devices to see what information they are reporting in real time.\nView this article to learn more about using the sensor dashboard in the devices window.\n\n\nSettings\n\n\n\n\n\nSelect the 'Settings' option to open the various Brain settings. Continue reading to learn about each of the options within the Settings menu.\n\n\n\nOptions in the Settings Menu\nLanguage\n\n\n\n\n\nThe default language on the Brain screen is English. Use the Check button to toggle to different language options. When you have reached your desired language option, use the Right button to select it and move out of the Language selector.\u00a0\n\n\nLink\n\n\n\n\n\nSelect 'Link' to begin the process of wirelessly pairing your VEX IQ (2nd gen) Controller to your VEX IQ (2nd gen) Brain.\nView this article to learn more about the wireless pairing process and follow the steps in the article to connect your Controller and Brain.\n\n\nCalibrate\n\n\n\n\n\nSelect 'Calibrate' to calibrate the VEX IQ (2nd gen) Controller that is connected to your VEX IQ (2nd gen) Brain. Calibrating the Controller ensures that the Brain is receiving accurate positions of the joysticks, and can be useful if you notice that the joysticks on the Controller are not moving the robot accurately.\nView this article to learn more about how to calibrate the Controller.\n\n\nSystem Info\n\n\n\n\n\nSelect 'System Info' to view information about your VEX IQ (2nd gen) Brain.\n\n\n\n\n\n\n\nHere you can view identifying information about your VEX IQ (2nd gen) Brain, including the firmware version, Name, Team, and Brain ID number.\u00a0\n\n\nLog\n\n\n\n\n\nSelect 'Log' to view the Event Log of your VEX IQ (2nd gen) Brain. The Event Log can be used during troubleshooting to offer diagnostic information.\n\n\n\n\n\n\n\nThe Event Log can includes information like project execution, download, or stop actions, as well as hardware events such as a device being disconnected from a port. Each Event is listed with a timestamp of the amount of time that has elapsed since the Brain has been powered on. The Event Log shows most recent events first, and you can toggle to the left to view older events in the log.\u00a0\n\n\nDelete All\n\n\n\n\n\nSelect 'Delete All' to delete all programs that are currently downloaded to the VEX IQ (2nd gen) Brain.\u00a0\n\n\n\n\n\n\n\nYou will then be prompted to confirm whether to delete all programs. Select the Check button to confirm and delete programs, or the X button to cancel and keep all programs downloaded on the Brain.\n\n\nFactory Reset\n\n\n\n\n\nSelect 'Factory Reset' to reset the VEX IQ (2nd gen) Brain to its original factory settings. All information, like language selections or downloaded programs, will be deleted and the Brain will be restored to its factory settings.\n\n"}
{"title":"Opening a VEXcode EXP Blocks Project on Windows","label_names":"[]","body":"\u00a0Users can open a project in VEXcode EXP in different ways.\n\nOpening an Existing Project\n\n\n\n\n\nOpen an existing project by selecting \u201cOpen\u201d from the File menu.\n\n\n\n\n\n\n\nThen, use the Windows interface to navigate and open your existing project.\u00a0\n\n\n\nOpening a Recent Project\n\n\n\n\n\nOpen the list of recent projects from the File menu.\n\n\n\n\n\n\n\nThen, select a recent project to open it.\n\n\n\nOpening an Example\u00a0\n\n\n\n\n\nOpen the example project chooser from the File menu.\n\n\n\n\n\n\n\nThen, select an example project to open it.\nNote: When opening a project, a prompt will appear asking to save if the current project has not been saved yet.\n\n"}
{"title":"Opening a VEXcode EXP Blocks Project on macOS","label_names":"[]","body":"\u00a0Users can open a project in VEXcode EXP in different ways.\n\nOpening an Existing Project\n\n\n\n\n\nOpen an existing project by selecting \u201cOpen\u201d from the File menu.\n\n\n\n\n\n\n\nThen, use the macOS interface to navigate and open your existing project.\u00a0\n\n\n\nOpening a Recent Project\n\n\n\n\n\nOpen the list of recent projects from the File menu.\n\n\n\n\n\n\n\nThen, select a recent project to open it.\n\n\n\nOpening an Example\u00a0\n\n\n\n\n\nOpen the example project chooser from the File menu.\n\n\n\n\n\n\n\nThen, select an example project to open it.\nNote: When opening a project, a prompt will appear asking to save if the current project has not been saved yet.\n\n"}
{"title":"Opening a VEXcode EXP Blocks Project on an Android","label_names":"[]","body":"\u00a0Users can open a project in VEXcode EXP in different ways.\n\nOpening an Existing Project\n\n\n\n\n\nOpen an existing project by selecting \u201cOpen\u201d from the File menu.\n\n\n\n\n\n\n\nThen, use the Android interface to navigate and open your existing project.\u00a0\n\n\n\nOpening a Recent Project\n\n\n\n\n\nOpen the list of recent projects from the File menu.\n\n\n\n\n\n\n\nThen, select a recent project to open it.\n\n\n\nOpening an Example\u00a0\n\n\n\n\n\nOpen the example project chooser from the File menu.\n\n\n\n\n\n\n\nThen, select an example project to open it.\nNote: When opening a project, a prompt will appear asking to save if the current project has not been saved yet.\n\n"}
{"title":"Upgrading from Cortex to EXP","label_names":"['VEX EXP']","body":"This article is for those who currently are using the Cortex System and are upgrading \/ considering upgrading to the VEX EXP System. The purpose of this article is to cover what contents from Cortex can be used with the VEX EXP System.\nStructure Compatibility\nEXP Structure (metal pieces, wheels, gears) was designed with backwards compatibility in mind. This means, the standard used to create Cortex Structure is the same standard used for EXP. Therefore, the pitch (or distance between holes on structural components) is the same, so Cortex Structure can be aligned and fastened to EXP structure.\nThe EXP System utilizes Star Drive Screws and Low Profile Nuts, so you can fasten your builds more securely than before with rivets, although you can still use whatever you are most comfortable with. When upgrading from Cortex to EXP, hardware, gears, and wheels will work with one another.\n\n\n\n\n\n\n\n\n\n\n\n\nElectronics Compatibility\nThe root of EXP is based upon the new VEX EXP Brain. Detailed below, it replaces the VEX ARM Cortex-based Microcontroller. This more powerful Brain allows you to control not only the new sensors and motors found in the EXP Kit, but also most of the Cortex Sensors you are familiar with so you will not have to give up anything when deciding to upgrade.\nEXP Brain Specifications\n\n\n\n\n\nImproved Robot\n\n10 Smart Ports on the Brain to communicate with a multitude of motors and sensors\n8 3-Wire Ports to communicate with both new EXP Sensors and Cortex Sensors (more information below)\n1.7\u201d Color Screen with buttons allowing for a total of 8 stored user projects\nBuilt in Inertial Sensor, 6-axis Gyro\/Accelerometer\nBuilt-in Bluetooth Radio paired with the EXP Controller (more information below)\nMicro SD Card for Datalogging and Storage\nThe Brain also has a real-time motor and sensor dashboard and built-in configurable drive program, allowing for immediate troubleshooting and demonstration opportunities without the need for coding\nProgrammed in VEXcode Blocks, C++, and Python (more information below)\n\nThe EXP Brain replaces the VEX ARM Cortex-based Microcontroller, allowing for a lower barrier of entry to the VEX system with how simple it is to use.\n\n\nThe EXP Brain is able to power and control mostly all of the sensors and motors you have been using and are used to from Cortex. If you are wanting to upgrade to EXP but have reservations that you will lose valuable electronics from Cortex, EXP was specifically designed to still support past electronics, while at the same time introducing much more powerful sensors and motors.\nCortex Electronics\nThe following list is of 3-Wire Sensors and Motors from the Cortex System and whether or not they are compatible with the EXP Brain and EXP System. Simply plug your compatible 3-Wire electronics the same way you have been doing with Cortex into the EXP Brain, and watch it come to life.\n\n\n\nName\nProduct Image\nPart Number\nEXP Compatibility\n\n\nLimit Switch\n\n276-2174\nCompatible\n\n\nBumper Switch\n\n276-2159\nCompatible\n\n\nOptical Shaft Encoder\n\n276-2156\nCompatible\n\n\nUltrasonic Range Finder\n\n276-2155\nCompatible\n\n\nLine Tracker\n\n276-2154\nCompatible\n\n\nLight Sensor\n\n276-2158\nCompatible\n\n\nPotentiometer V1&amp;V2\n\n\n\n\n276-2216\n276-7417\n\nCompatible\n\n\nLED Indicator\n\n276-2176\nCompatible\n\n\nGyro\n\n276-2333\nCompatible\n\n\nMotor 393\n\n276-2177\nCompatible*\n\n\nServo\n\n276-2162\nCompatible*\n\n\nAccelerometer\n\n276-2332\nCompatible\n\n\nVEX ARM Cortex-based Microcontroller\n\n276-2194\n\nNot Compatible\nreplaced with the VEX EXP Brain\n\n\n\nVEXnet Joystick\n\n276-2192\n\nNot Compatible\nreplaced with the VEX EXP Controller\n\n\n\nVEXnet Key 2.0\n\n276-3245\n\nNot Compatible\nreplaced with the EXP Brain and Controller Built-In Radio\n\n\n\n7.2V Robot Battery NiMH 2000mAh\n\n276-1491\n\nNot Compatible\nreplaced with the VEX EXP Battery\n\n\n\nVEX Flashlight\n\n276-2210\n\nNot Compatible\nreplaced with the V5 Optical Sensor\n\n\n\nVEX LCD Display\n\n276-2273\n\nNot Compatible\nreplaced with the EXP Brain's Built-In LCD\n\n\n\nProgramming Hardware Kit\n\n276-2186\n\nNot Compatible\nreplaced with the USB-C Cable\n\n\n\n\n*Power output from the 393 Motors and Servos will be reduced. They will be most useful for non-drivetrain functions.\nMostly all of the Cortex motors and sensors you find value in are compatible with the EXP Brain and System. Once plugged into the EXP Brain, you can either take control of them through the Brain\u2019s Device menu, allowing you to see and control all electronics currently plugged into the Brain, or by using VEXcode EXP. VEXcode EXP replaces ROBOTC, and allows you to configure and code your electronics using either Blocks, C++, or Python.\n\nView this section from the VEX Library for more information on VEXcode EXP.\u00a0\nEXP Electronics\nIn addition to all of the Cortex electronics that you may continue to use, there are also a number of improved EXP Motors and Sensors. The Smart Ports provide more complex sensing which results in more accurate data when compared to the Cortex Sensors. The following list includes the Motors and Sensors gained when upgrading to the base EXP Kit.\n\n\n\n\n\nThe V5 Optical Sensor is a combination of the following sensors:\n\nAmbient light sensor\nColor Sensor\nProximity Sensor\n\nThe Optical Sensor has a white LED to assist color detection in low light conditions, and can function as a flashlight. The Optical Sensor uses a Smart Port and allows for real-time sensor feedback through the usage of the EXP Brain\u2019s Sensor Dashboard.\n\n\n\n\n\n\n\nThe V5 Distance Sensor uses a pulse of classroom-safe laser light to measure the distance from the front of the sensor to an object.\nIt can also:\n\ndetect an object and determine the relative size of the object as small, medium, or large\nused to calculate a robot\u2019s approach speed of the robot\/sensor as it moves toward an object\n\nThe Distance Sensor uses a Smart Port and allows for real-time sensor feedback through the usage of the EXP Brain\u2019s Sensor Dashboard.\n\n\n\n\n\n\n\nThe Bumper Switch v2 is a single digital switch with a spring-loaded bumper which can be pushed in to change the state of the switch. This switch requires only a light touch to activate and is one of the 3-Wire series of sensors.\nThe Bumper Switch uses a 3-Wire Port and allows for real-time sensor feedback through the usage of the EXP Brain\u2019s Sensor Dashboard.\n\n\n\n\n\n\n\nThe V5 Smart Motor (5.5W) delivers 5.5W of power and precision, designed to perform reliably, effectively, and most importantly, safely in the classroom.\nThe V5 Smart Motor (5.5W) uses a Smart Port and allows for real-time sensor feedback through the usage of the EXP Brain\u2019s Sensor Dashboard.\nWith an integrated encoder measuring at 960ticks\/rev, users can control the motor\u2019s direction, speed, acceleration, position, and torque limit all without the use of a Motor Controller 29.\n\n"}
{"title":"Using VEXcode EXP Blocks Example Projects and Templates","label_names":"['VEX EXP']","body":"Example projects and templates are a great resource if you are just getting started with VEXcode EXP and want to explore different robot behaviors. Example projects and templates also allow you to observe how different blocks in VEXcode EXP are used.\n\nUsing Blocks Example Projects\n\n\n\n\n\nTo open an example project, select the File menu and choose Open Examples.\n\n\n\n\n\n\n\nIcons for many different example projects will be shown. Each icon represents a different project and are colored according to the block categories.\n\n\n\n\n\n\n\nThe Filter bar can be used to quickly find a specific type of example.\n\n\n\n\n\n\n\nTo open any example, select one from the menu.\n\n\n\n\n\n\n\nBlocks for the example base project will populate in the workspace. These blocks and their parameters can be changed or removed. Additional blocks can be added to modify the example project.\n\n\n\n\n\n\n\nSave and download the example to try it on your robot.\n\n\n\nUsing Templates\n\n\n\n\n\nThere is also a special type of example called a template.\n\n\n\n\n\n\n\nTemplates have a special icon and are used to create a blank project with a preset device configuration.\n\n\n\n\n\n\n\nIf using a standard robot build, like the Clawbot, a template can be used to quickly get started with a new project.\n\n\n\nNotes in Blocks Example Projects and Templates\n\n\n\n\n\nEach example project and template contains a note in the workspace.\n\n\n\n\n\n\n\nIn an example project, the note provides a short summary for what the project does and also lists the device configuration.\n\n\n\n\n\n\n\nIn a template, the description notes which devices are listed in the configuration.\nNotes can be used to document certain information in a project. For more information on notes, view the Using Notes in a Blocks Project in VEXcode EXP article.\n\n"}
{"title":"Using Notes in a Blocks Project in VEXcode EXP","label_names":"['VEX EXP']","body":"Here are some basic ways to manage notes in projects.\nAdding a Note to a Project\n\n\n\n\n\nRight-click or long-press anywhere in the Workspace and select 'Add Note.'\n\n\n\n\n\n\n\nThen, type any text, numbers, or symbols into the note.\n\nPress the \u201cEnter\u201d or \u201cReturn\u201d key to write a multi-line note.\nSelect anywhere in the Workspace when the note is complete.\n\n\n\n\nCollapsing Notes\n\n\n\n\n\nYou can collapse a note by selecting the down arrow in the top margin.\n\n\n\n\n\u00a0\n\n\nThis will collapse the note.\n\n\n\nMoving Notes Around\n\n\n\n\n\nYou can move a note by selecting the top margin and dragging it around.\n\n\n\nDeleting Notes\n\n\n\n\n\nYou can delete any note by selecting the 'X' located at the top right of the note.\n\n\n\n\n\u00a0\n\n\nYou can also delete a note by right-clicking or long-pressing on it and selecting 'Delete.'\n\n\n\nDuplicating Notes\n\n\n\n\n\nYou can duplicate a note by right-clicking or long-pressing on it and selecting 'Duplicate.'\n\n"}
{"title":"Using Curriculum Design to Improve Accessibility in STEM and Computer Science","label_names":"[]","body":"Movements like CSforAll are seeking to address issues of equity and inclusion within the field of Computer Science. CSTA Voice recently published an article highlighting how students with disabilities can be successful in computer science classes, when they are considered and supported.\n\n\n\u201cWhen students are given appropriate support and accessible tools\/curricula, they can succeed. Yet, inclusion of students with disabilities is often hampered by low expectations, as well as pedagogical and accessibility barriers which keep them from being fully included.\u201d\u00a0\n- Andrew Bennett, Maya Israel, Ph.D., &amp; Johnny Delgado,\u00a0Improving Accessibility in the Classroom With the UDL4CS Interactive Table\n\n\nThe article goes on to describe CSTA\u2019s new UDL4CS Interactive Table resource, and how it can be used to support accessibility in computer science classrooms. Much of the focus is on shaping curriculum and teaching to give options for students to learn, present, and access knowledge in multiple ways. They outline \u201cfive steps for successful implementation\u201d as a guide for how to make the most of classroom experiences to support all learners.\n\nEstablish Clear Goals\nAnticipate learner needs and barriers\nMeasurable outcomes and assessment plan\nInstructional Experience\nReflect\n\nThe design of STEM Labs across the continuum aligns well with these steps and the accessibility considerations recommended for supporting diverse learners. This table shows some of the ways that STEM Labs support this implementation process.\n\n\n\n\nUniversal Design for Learning (UDL) Step\nEngage-Play-Share STEM LabsVEX 123 &amp;VEX GO\nLearn-Practice-Compete STEM LabsVEX IQ (2nd gen) &amp; VEX EXP\n\n\n 1. Establish Clear Goals \n\nEach activity within the Play section of a STEM Lab begins with an animation and explanation that helps teachers and students to establish clear goals about the activity.\nThe images, animations, and words give options to access the goal and communicate about it to be sure that all students know what is expected of them.\n\n\nIQ 2nd generation and EXP STEM Labs begin with goal setting with the class. After viewing an animation of the end game for the Lab and discussing it, students and teachers work together to establish and document clear learning goals.\nThe videos, animations, discussions and engineering notebook documentation offer options for students to access and communicate about their goals.\n\n\n\n 2. Anticipate learner needs and\u00a0barriers \n\nThe Engage section of a STEM Lab offers a way to access students\u2019 prior knowledge and bridge any knowledge gaps in a low stakes way, in preparation for the Lab\u2019s activities.\nThe Background Information in each Unit allows teachers to anticipate knowledge gaps that they and their students may have, with descriptive information they can share with students to eliminate barriers.\n\n\nThe Learn section of IQ and EXP STEM Labs include student-facing captioned, teaching videos designed to help students access prior knowledge about a certain topic, and bridge any knowledge gaps in a low stakes way.\nEach video has an accompanying handout to offer additional options for accessing the material, as well as formative assessment questions. Students can review and revisit this content at any time to take the time they need for successful learning.\n\n\n\n 3. Measurable outcomes and assessment plan \n\nThe Goals, Standards and Summary sections of the STEM Labs offer information about how standards are reached through the Lab\u2019s activities. In addition, Objectives are offered with the corresponding Lab activity and assessment to be sure that students are reaching the learning objective during the Lab.\nStudents share their learning in different ways, from discussion to project sharing, offering options for expression to support diverse learners.\n\n\nThe Compete section of each Lesson offers students a hands-on, collaborative way to show their learning through playing the Lesson\u2019s mini-game. Students know what they are trying to accomplish, and teachers can easily see if they have met the Lesson goals by seeing how their robot behaves in the game.\nThe engineering notebook serves as documentation of learning, and gives students multimedia options for how to represent their learning process in a way that is comfortable to them.\n\n\n\n 4. Instructional Experience \n\nThe Play sections of a STEM Lab offer step by step instructions for how to model an activity for students, as well as prompts to support differentiation and facilitate group work.\nStudents work in groups to complete Lab activities, allowing them to work at their own pace, and teachers are given information for how to support learners with extra practice, challenges, and more.\nAdditionally, the Pacing Guide in the Unit Overview gives specific ways to adapt and extend a Unit to best meet all students\u2019 learning needs.\n\n\nThe Practice and Compete cycles of each Lesson and the culminating game allow students to work in groups and tailor their competition strategy to the component of the game or learning goal that they choose. This voice and choice in how to represent their learning through game play offers many options for student engagement, from documenting in the engineering notebook to iterating on the robot build or code to scouting and guiding team collaboration and more.\nThe emphasis on collaboration and teamwork throughout the Lab promotes inclusion of all students, and tactical strategies to support inclusive conversations are given in Lab instructions as well.\n\n\n\n 5. Reflect \n\nThe Mid-Play Break and Share sections of the Lab are designed to give students reflection opportunities to check in and express their learning and questions in a variety of ways.\nDiscussion prompts align with demonstrations and project sharing offering students options for how to express their learning in the way that best meets their needs.\n\n\nThe Debrief Conversation at the end of the Unit offers students an opportunity to share their learning with the teacher in response to the learning goals and discussion prompts.\nStudents can engage in this meeting in a way that meets their needs \u2013 from multimedia presentations to written responses to showing and telling about their engineering notebook.\n\n\n\n\n\nInclusivity in Computer Science and STEM is an important issue and one that we can work towards incrementally with each lesson we teach. At VEX, we are working to help make that incremental improvement possible and attainable for all teachers, as well as all students. Want to learn more about the CSTA resources mentioned here? Visit CSTA and become a member.\n\nReferences\nBennett, Andrew, et al. \u201cImproving Accessibility in the Classroom with the UDL4CS Interactive Table.\u201d Computer Science Teachers Association, CSTA Voice, 13 Jan. 2023, https:\/\/csteachers.org\/Stories\/improving-accessibility-in-the-classroom-with-the-udl4cs-interactive-table. "}
{"title":"Understanding and Using V5 Workcell Tools","label_names":"['VEX V5']","body":"Introduction\nThis article is intended for those who are just starting out with the VEX V5 Workcell and may be new to building, more specifically, building with metal. The purpose of this article is to familiarize you with the tools provided in the Workcell Kit in order to begin building. The Workcell uses two main tools; the Open End Wrench and the T15\/T8 Star Drive Key or T15\/T8 Star Screwdriver. View the video below as well as the information included in the rest of this article to learn more about these tools and their uses.\n\n    \n    \n  \nV5 Workcell Tool Uses\nOpen End Wrench\n\n\n\n\n\nThe purpose of the Open End Wrench is to hold a nut or standoff in place while a screw is being secured to it. By holding the nut or standoff in place with the wrench, it will allow the screw to be securely fastened to your build.\n\n\n\n\n\n\n\nWith the V5 Workcell, the smaller end of the wrench is used to hold:\n\n#8-32 Standoffs\n\nLength of the standoff does not matter.\n\n\n\nThe larger end of the wrench is used to hold:\n\n#8-32 Nylock Nuts\n\n\n\nT15 Star Drive Key \/ T15 Star Screwdriver\n\n\n\n\n\n\nThe purpose of the T15 Star Drive Key (pictured first) as well as the T15 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Screws. This is done by using the unique star drive shape of the key driving the imprinted #8-32 Star Drive Screw.\nFor more information and a demonstration on securing screws to nuts, view this article from the VEX Library.\n\n\nT8 Star Drive Key \/ T8 Star Screwdriver\n\n\n\n\n\n\nThe purpose of the T8 Star Drive Key (pictured first) as well as the T8 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Set Screws. These star drive set screws are the smaller screws located in\u00a0 Star Drive Shaft Collars.\nFor more information and a demonstration on securing screws to nuts, view this article from the VEX Library.\n\n"}
{"title":"Understanding and Using V5 Tools","label_names":"['VEX V5']","body":"Introduction\nThis article is intended for those who are just starting out in VEX V5 and may be new to building, more specifically, building with metal. The purpose of this article is to familiarize you with the tools provided in the V5 Kit in order to begin building. The V5 Kits contain two main tools; the Open End Wrench and the T15\/T8 Star Drive Key or T15\/T8 Star Screwdriver. View the video below as well as the information included in the rest of this article to learn more about these tools and their uses.\n\n    \n    \n  \nV5 Tool Uses\nOpen End Wrench\n\n\n\n\n\nThe purpose of the Open End Wrench is to hold a nut or standoff in place while a screw is being secured to it. By holding the nut or standoff in place with the wrench, it will allow the screw to be securely fastened to your build.\n\n\n\n\n\n\n\nIn V5, the smaller end of the wrench is used to hold:\n\n#8-32 Low Profile Nuts\n#8-32 Standoffs\n\nLength of the standoff does not matter.\n\n\n\nThe larger end of the wrench is used to hold:\n\n#8-32 Nylock Nuts\n#8-32 Hex Nuts\n#8-32 Keps Nuts\n\n\n\nT15 Star Drive Key \/ T15 Star Screwdriver\n\n\n\n\n\n\nThe purpose of the T15 Star Drive Key (pictured first) as well as the T15 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Screws. This is done by using the unique star drive shape of the key driving the imprinted #8-32 Star Drive Screw.\nFor more information and a demonstration on securing screws to nuts, view this article from the VEX Library.\n\n\nT8 Star Drive Key \/ T8 Star Screwdriver\n\n\n\n\n\n\nThe purpose of the T8 Star Drive Key (pictured first) as well as the T8 Star Screwdriver (pictured second) is to drive all the #8-32 Star Drive Set Screws. These star drive set screws are the smaller screws located in Universal Joints and Star Drive Shaft Collars.\nFor more information and a demonstration on securing screws to nuts, view this article from the VEX Library.\n\n"}
{"title":"Understanding and Using EXP Tools","label_names":"['VEX EXP']","body":"Introduction\nThis article is intended for those who are just starting out in VEX EXP and may be new to building, more specifically, building with metal. The purpose of this article is to familiarize you with the tools provided in the EXP Kit in order to begin building. The EXP Kit contains two main tools; the Open End Wrench and the T15 Star Drive Key. View the video below as well as the information included in the rest of this article to learn more about these tools and their uses.\n\n    \n    \n  \nNote: the video above shows references to V5, but the same concepts can be applied to EXP.\n\nEXP Tool Uses\nOpen End Wrench\n\n\n\n\n\nThe purpose of the Open End Wrench is to hold a nut or standoff in place while a screw is being secured to it. By holding the nut or standoff in place with the wrench, it will allow the screw to be securely fastened to your build.\n\n\n\n\n\n\n\nIn EXP, only the smaller end is used to hold:\n\n#8-32 Low Profile Nuts\n\nThis is the only nut in the EXP system.\n\n\n#8-32 Standoffs\n\nLength of the standoff does not matter.\n\n\n\n\n\nT15 Star Drive Key\n\n\n\n\n\n\nThe purpose of the T15 Star Drive Key is to drive all screws in your EXP Kit, the #8-32 Star Drive Screw. This is done by using the unique star drive shape of the key driving the imprinted #8-32 Star Drive Screw.\nFor more information and a demonstration on securing screws to nuts, view this article from the VEX Library.\n\n"}
{"title":"Effective Professional Development with VEX Professional Development Plus Training Courses","label_names":"[]","body":"In seeking to prepare students for lives and careers in the 21st Century, a focus on STEM and Computer Science (CS) has emerged, and is gaining attention.1 As such, more and more teachers are being asked to incorporate STEM and CS into their classrooms, or to become full time STEM teachers. However, many of these teachers do not have a STEM or CS background to draw from, so are looking for more varied and ongoing professional development opportunities to support their teaching practice.2 The traditional professional development model of in-person, one-off training sessions has value, but comes with many drawbacks. Finding the time to attend, the budget to pay for the training, possible travel, substitute teachers, and the inherent limitations that come with a group session, like scope and a lack of differentiation and personalization, can make the in-person model less effective for teachers. Additionally, a one-time session does not necessarily support teachers when they need professional development or support, and may not offer the content that they find relevant at the time of the PD. VEX Professional Development Plus (PD+) was developed to combat these ongoing issues with traditional teacher PD.\nWhat is PD+?\n\n\nPD+ is a multifaceted online professional learning platform that offers all teachers opportunities for professional growth and learning through continual and sustained training, mentoring, and support.\nThe beauty of PD+ is that it is not just one thing, or a one-off experience \u2013 it is a combination of resources that you can curate for yourself, to help you on your STEM teaching journey.\n\n\n\nWhat\u2019s in a PD+ Training Course?\nThe Training Courses within VEX Professional Development Plus (PD+) offer a unique solution to the challenges of traditional teacher PD, by giving teachers self-paced, hands-on, engaging training, with the opportunity for personalized learning and sustained support through the PD+ platform.\nEach Training Course is focused on a specific topic or VEX platform, to give targeted course content for all VEX platforms and STEM pedagogy. The courses consist of themed Chapters broken up into smaller Lessons. These video-based Lessons weave together concept knowledge, teacher modeling, and hands-on learning with your own VEX Robotics materials, so that you can have the experience of participating in the STEM Lab lessons that you will end up teaching to your own students. For instance, in the Building with VEX GO Training Course, teachers learn about following build instructions, then actually follow along with a VEX Expert to construct various builds with their VEX GO Kit. They then use these builds in a classroom investigation together, modeled by the Expert in the video, to see how the builds connect to curricular concepts.\n\nThe videos are intentionally designed to move slowly, and to build on one another, so that you can move through the course at a pace that best suits your needs and skill level. Training Courses designed for \u2018Getting Started\u2019 begin with things like charging a Battery and updating firmware, then progress to building and\/or coding activities. For those who desire extra support and tips, the videos within the Get Started Training Courses offer high levels of scaffolding at the start, gradually removing it as the course progresses. Those who are more comfortable can move through the content at a faster pace, using the links to articles, videos, or build instructions included in each Lesson to guide or extend their learning.\n\nLessons contain formative assessment questions, and links to the PD+ Community so you can ask questions about the content and engage with other VEX Educators and the Experts teaching the course for individualized learning and interactions. The variety, breadth, and depth of the Training Courses allows teachers to pursue interest-driven professional learning, a hallmark of effective teacher PD.3\nPD+ Training Courses Exemplify Effective Professional Development\nPD+ Training Courses, in tandem with the larger PD+ environment, satisfy the hallmarks of successful PD, providing a significant advantage over traditional, stand-alone, in-person professional development sessions.\n\n\nEffective professional development should be content focused, incorporate active learning, support collaboration, model effective practice, provide coaching and expert support, offer opportunities for feedback and reflection, and be of sustained duration.4\n\n\n\n\n\n\u2714\n\nContent focused\nCourses guide you through the concepts and skills needed to build, code, and teach STEM and CS with VEX Robotics confidently.\n\n\n\n\u2714\n\nIncorporates active learning\nUse your Kit to create VEX builds and carry out classroom investigations and activities as you participate in the same hands-on lessons you will be teaching.\n\n\n\n\u2714\n\nSupports collaboration\nAsk questions and get feedback from others in the PD+ Community to collaborate with educators and VEX Experts around the world. Extend your learning by joining in PD+ Live Sessions for in-person virtual learning.\n\n\n\n\u2714\n\nUses modeling of effective practice\nSuccessful teaching and learning strategies are modeled in each video, showing how to effectively teach lessons from VEX STEM Labs and Activities. Practical classroom tips for implementing each lesson are included, as well as discussion prompts you can use to spark engaging classroom dialogue around STEM topics.\n\n\n\n\u2714\n\nProvides coaching and expert support\nThe VEX Experts teaching the course are experienced educators, and bring years of classroom teaching experience to each Lesson within the course. Interact directly with the Experts via PD+, for individualized training and support on your STEM teaching journey.\n\n\n\n\u2714\n\nOffers opportunities for feedback and reflection\nCheck your understanding with formative assessment questions in each Lesson. Reflect on what you\u2019ve learned as you implement course activities with your students.\n\n\n\n\u2714\n\nIs of sustained duration\nPD+ provides a wealth of opportunities for ongoing, timely, personalized professional development, and is always growing. Watch additional videos, view STEM Labs, read articles, contribute to PD+ Community threads, and attend the annual VEX Robotics Educators Conference to continue pursuing your STEM teaching goals.\n\n\n\n\nLeverage Your Experience as a Learner in Your Teaching Practice\nTraining Courses allow educators to experience STEM Labs Lessons and Activities just as their students will in the classroom, providing insight into the student learning experience, promoting the practice of teachers learning alongside their students.\n\n\n \u201cMany of the qualities of a constructivist learning environment are either aligned or the same as the qualities of effective online professional development. Examples of these qualities include collaboration and interactivity which are important for being able to build knowledge by manipulating learning materials and resources.\u201d\n- Joshua C. Elliot, The Evolution from Traditional to Online Professional Development: A Review\n\n\nCourses are not simply product training, but set you up for success by integrating hands-on learning experiences with best practices for teaching and learning. The self-paced nature also gives the freedom and flexibility to spend more or less time in a Chapter as you see fit, aligning personal classroom needs and professional development interests with course content.\n\n\u201c \u201cI find myself logging into PD+ daily as a way to connect, learn and share ideas about robotics in a way that no other platform has available for teachers. I even got to meet all of my new PD+ colleagues in person at the conference! During my planning time, I watch videos that are geared to developing my understanding of robotics. VEX PD+ is the best tool, and one I use on a daily basis to strengthen my STEM teaching skills.\u201d\n\u2013 Anna V. Blake, K-5 Elementary Technology Integrator\n\nThe responsive nature of PD+ and the comprehensive layers of support it provides makes PD+ Training Courses unique in their ability to offer educators the elements of highly effective professional development in a sustainable way. Virtual professional development, like PD+ Training Courses, enables flexible sustained learning with follow-up, which can be more effective than a single workshop.6 Rather than attending yet another in-person session that is too soon forgotten, engage with PD+ to develop STEM teaching expertise, raise students' achievement, and take control of your professional learning journey.\n\nFeatures of a Training Course\n\n\n\n\n\nHands-on learning with your VEX materials\u00a0\nTraining Courses allow you to use your own VEX Kits and materials to complete the activities within each Lesson. Like an in-person workshop, you will be able to build, code, and test your builds and projects to complete a variety of explorations.\nGetting Started courses are a great place to start if you are new to a VEX platform, and will walk you through a step-by-step process to get you ready to teach with VEX.\n\n\n\n\n\n\n\nVideo-based lessons let you learn at your own pace\nEach Lesson in a Training Course centers on an instructor-led video, that will walk you through what you need to know to complete the Lesson activity. The on-demand nature of Training Course content means that you can watch videos, and complete Lesson activities anywhere, at any time, based on your own schedule and needs.\nBeside the video, Lesson descriptions offer a chapter and lesson level overview so you know what you will be learning about, as well as what materials you will need to complete the Lesson activity. Any resources that are mentioned in the video, or that can be used to extend your learning are also linked on the Lesson page.\u00a0\n\n\n\n\n\n\n\nFormative assessment helps you monitor your progress\nLessons also have built-in formative assessment, like Check Your Understanding questions or reflection prompts, so that you have a tool to monitor your own progress and learning. For instance, if an answer is unclear to you, you can go back and rewatch part of the video or use the additional resources linked on the page to learn more, before moving on to the next Lesson.\u00a0\n\n\n\n\n\n\n\nAdditional resources help you extend your professional learning\nMake the most of your professional learning by using the Training Courses in conjunction with other PD+ and VEX resources. Within Lessons, PD+ videos, articles, or educational resources will be linked so you have easy access to next steps, and the tools that can help you take your learning further.\u00a0\nAdditionally, each Training Course has an associated PD+ Community thread, enabling you to directly interact with other course participants and the PD+ experts leading the course at any time to ask questions, comment on course content, or spark a discussion based on your learning.\u00a0\n\n\n\nParticipating in a PD+ Training Course\n\n\n\n\n\nTo begin a PD+ Training Course, select the course tile you wish to participate in. There is no 'enrollment' necessary, you can begin a course at any time by opening Chapter 1 Lesson 1 and completing the Lesson. You can then proceed to complete the course at your own pace. This flexibility enables you to engage with training when it is right for you, on your own schedule.\u00a0\n\n\n\n\n\n\n\nYour progress within a Training Course will be saved, so that you can pick it back up at any time as best meets your needs. From the course main page, you can see an overview of Chapter topics and the Lessons contained within each. It is recommended to move through Lessons sequentially, as each Chapter will build on what was learned previously.\u00a0\n\n\nTo learn more about the content of any of the PD+ Training Courses, view the course overview:\n\nIntroduction to VEX 123\nIntroduction to Building with VEX GO\nIntroduction to VEX IQ (2nd gen)\nIntroduction to VEX EXP\nIntroduction to VEX V5\nEngineering Design Process with Sensors\nUsing 123 and GO in Your Regular Education Classrooms\nCross Curricular Connections with VEXcode VR\nHands On, Minds On with Claire Cameron\nPlanning and Running a VEX Camp\n\n\n1\u00a0 National Science Teachers Association. \u201cPosition Statement: STEM Education Teaching and Learning.\u201d NSTA.org https:\/\/www.nsta.org\/nstas-official-positions\/stem-education-teaching-and-learning. Accessed 7 February 2023.\n2\u00a0 Harter, Lauren and Jason McKenna. \u201cFostering Communities of Practice: Insights from an Online Educational Robotics Professional Development Pilot.\u201d IARIA: The Fourteenth International Conference on Mobile, Hybrid, and Online Learning, 2022, https:\/\/www.thinkmind.org\/index.php?view=article&amp;articleid=elml_2022_2_20_58006. Accessed 6 February 2023.\n3\u00a0 Elliott, Joshua C. \"The evolution from traditional to online professional development: A review.\" Journal of Digital Learning in Teacher Education 33.3 (2017): 114-125.\n4\u00a0 Darling-Hammond, Linda, Maria E. Hyler, and Madelyn Gardner. \"Effective teacher professional development.\" (2017).\n5\u00a0 Elliott, Joshua C. \"The evolution from traditional to online professional development: A review.\" Journal of Digital Learning in Teacher Education 33.3 (2017): 114-125.\n6\u00a0 Brasili, Alexandria, and Sue Allen. \"Beyond the Webinar: Dynamic Online STEM Professional Development.\" Afterschool Matters 29 (2019): 9-16.\n"}
{"title":"VEX EXP Controller Firmware Recovery","label_names":"['VEX EXP']","body":"If you have attempted to update your VEX EXP Controller\u2019s firmware and your controller power indicator LED is fast red blinking, this means that part of the firmware on your controller is failing to load and needs to be repaired to continue using your controller.\n\nPlease note that there are two different microcontrollers inside of the VEX EXP Controller with firmware - each firmware will produce the same flashing red indication, but the connection process to fix the issue is different. Each process will be outlined in this article.\nVEXcode EXP Web-Based Windows Users: You MUST install a driver before attempting this process. View this article for the steps to install the driver before continuing.\nThe firmware recovery process can only be done via a wired connection. This means that you must use a computer such as a Windows, Mac, or Chromebook. Tablets utilize a bluetooth connection and are not supported at this time. Your VEX EXP Controller must be hard-wired connected to your device via a USB-C cable.\n\nApp-Based VEXcode EXP - Repairing Both Controller Firmwares\n\nOpen up app-based VEXcode EXP installed on your computer. Make sure you have no other VEX applications open.\nConnect your VEX EXP Controller to your computer via a USB-C cable.\n\nYou will be prompted to update your Controller\u2019s firmware.\n\nSelect \u201cUpdate\u201d and wait for the update process to complete.\nIf the update fails or there is no progress in the update process for more than 2 minutes, please disconnect your controller, wait 10 seconds and then reconnect, before trying step 3 again.\nIf you are still unable to repair the controller, please remove the battery from the controller for at least 30 seconds before trying again.\nIn some configurations, local computer restrictions may prevent the firmware update. Please try the web-based version if all steps to this point have been unsuccessful. The web-based steps are outlined below.\n\n\nWeb-Based VEXcode EXP - Repairing Primary Controller Firmware\n\nConnect your VEX EXP Controller to your computer via a USB-C cable.\n\nOpen the web-based version of VEXcode EXP at codeexp.vex.com.\n\nSelect the controller icon in the top menu, and then \u201cRecover (Fast Red Blinking).\u201d\n\nFollow the prompts in VEXcode EXP and when asked to connect to the controller you should see \u201cVEX EXP Controller FW Upgrade\u201d as an option.If you do not see \u201cVEX EXP Controller FW Upgrade\u201d as an option, try the following:\n\nTry reconnecting your Controller to the device.\u00a0\nEnsure no other VEX applications are open.\nIf on Windows, ensure you have the Driver installed.\nTry the \u201cRepairing the Secondary Firmware\u201d section outlined below.\n\n\nContinue the update process by following all the prompts in VEXcode EXP.\n\n\nWeb-Based VEXcode EXP - Repairing Secondary Controller Firmware\n\nConnect your VEX EXP Controller to your computer via a USB-C cable.\n\nOpen the web-based version of VEXcode EXP at codeexp.vex.com.\n\nSelect the controller icon in the top menu, and then \u201cRecover (Fast Red Blinking).\u201d\nFollow the on screen prompts to complete the update process.\nIf you do not see the controller and you have already tried the process for the main firmware repair, please remove the battery from the controller for at least 30 seconds before trying again with the primary firmware repair process.\n\nIf you are still having issues, please send feedback via the \u201cFeedback\u201d button in VEXcode EXP. Ensure to include diagnostic data and an email address. More information about sending feedback is included in this article. Then, please contact VEX support.\n\n"}
{"title":"Using Interactive Activities in the VR 123 Playspace","label_names":"[]","body":"The 123 Playspace in VEXcode VR includes several interactive Activities. This article includes information about what interactive Activities are and describes the additional features the VR 123 Robot has for some of the Activities. Information for using these Activities successfully is also provided.\n\nWhat Kinds of Activities are Available in the VR 123 Playspace ?\nThere are two types of Activities available in the VR 123 Playspace, \"flat\" Activities and interactive Activities. View this article to learn more about choosing an Activity in the 123 Playspace.\n\n\n\n\n\nA \"flat\" Activity is one in which the elements on the Field are fixed, and appear 2-dimensional. The robot can navigate over and around the elements, but can't push them or move them in any way.\u00a0\n\n\n\n\n\n        \n        interactive-activity.mp4\"&gt;\n      \n\n\nAn interactive Activity is one in which some or all of the elements on the Field can be moved by the 123 Robot.\n\n\n\n\n\n        \n        flat-interactive-elements\"&gt;\n      \n\n\nSome interactive Activities combine both flat and interactive elements. In these activities, the robot will be able to move some elements on the Field, and others will be flat and able to be driven over. Elements that can be moved have a more 3D appearance, while those that cannot appear flat.\n\n\n\n\n\n\n\nThe Choose Location Button can be used to change the starting position of the VR 123 Robot on the Field. This can make an Interactive Activity more or less challenging, depending on the location chosen.\nView this article to learn more about setting the starting position of the VR 123 Robot.\n\n\nFeatures of the VR 123 Robot in Interactive Activities\nThe VR Robot may have additional features in the interactive Activities.\u00a0\n\n\n\n\n\nIn some interactive Activities, there is a green plow attachment at the front of the Robot that can be used to push elements on the Playground. When the VR 123 Robot turns, the plow attachment may inadvertently push game elements out of the way, so keep that in mind while coding.\n\n\n\n\n\n\nIn other interactive Activities, the VR 123 Robot may have different Art Ring attachments for added engagement. To learn more about the VR 123 Playspace, see this section of articles.\n"}
{"title":"Connecting with App-based VEXcode EXP to an EXP Brain - Android","label_names":"['VEX EXP']","body":"It takes just a few steps to connect a VEX EXP Brain to App-Based VEXcode EXP on your Android tablet. Before beginning, make sure that you know the name of your Brain. For help naming your Brain see\u00a0this article.\nTo Connect a VEX EXP Brain\n\n\n\nInsert the battery into the EXP Brain.\n\n\n\n\n\nTurn on the EXP Brain by pressing the checkmark button.\n\n\n\n\n\nLaunch app-based VEXcode EXP.\n\n\n\n\n\n\n\nYou may get a message asking you to allow the app to access your files. Select 'Allow'.\n\n\n\n\n\n\n\nSelect the Brain button.\n\n\n\n\n\n\n\nSelect 'Connect.'\u00a0\n\n\n\n\n\nA list of available EXP Brains will appear. Select the name of the Brain you want to connect to.\n\n\n\n\n\n\n\nOnce a Brain is chosen, select the 'Connect' button.'\n\n\n\n\n\n\n\nA 4-digit Radio Connection Code will appear on the Brain's screen\n\n\n\n\n\n\u00a0\n\n\nType the code into the prompt in the app and select 'submit'.\n\n\n\n\n\nThe Brain icon will turn green to indicate it is connected. If you select the Brain icon, it will indicate the name of the Brain is it connected to.\u00a0\n\n\n\nTo Disconnect a VEX EXP Brain\n\n\n\nSelect \u2018Disconnect\u2019 to disconnect your EXP Brain from VEXcode EXP.\n\n\n\nConnection Issues\n\nIf you are still having trouble connecting your VEX EXP Brain to VEXcode EXP, see this article to troubleshoot your Bluetooth connection on Android.\nIf you are unable to resolve your issue, please contact VEX support.\n"}
{"title":"Engaging Students Who Complete an IQ Build Quickly","label_names":"[]","body":"As you are implementing IQ STEM Labs in your setting, students will naturally complete their builds at different times. If you want your class to work through STEM Labs together at a relatively uniform pace, it is important to think ahead about how you will engage those students who finish building earlier than others. This article provides several suggestions for meaningful learning activities they can complete as the rest of the group finishes building.\u00a0\nHave Early Finishers Help Other Students\nOne way early finishers can put their skills to good use and learn while doing so, is by providing building help to students who need it. It's important to work together with your class to establish guidelines for student helpers, so they are able to provide assistance that helps their classmates to learn without stepping in too much and doing the building for them. Have a class discussion about what giving and receiving help from peers should look like and sound like, and create the guidelines together. Here are some suggestions for the kinds of guidelines that you could establish with your class.\nHelpers\n\nHelp only those who ask for help.\nHelp students in the order on the sign-up sheet.\nAsk questions to be sure what kind of help is needed.\nProvide suggestions for solving building problems, but do not touch the robot\/build.\n\nStudents who need help\n\nAsk a helper for help first, before asking the teacher.\nBe patient and wait your turn.\nBe specific about the building problem you need assistance with.\u00a0\nTry the suggestions provided by the helpers, and ask more questions if needed. Do not expect helpers to do the building for you!\n\nCreating a protocol for classroom helpers ahead of time will ensure that both the helpers and those who are being helped are challenged and engaged. Helpers will need to think carefully about how to communicate effectively, and those who are being helped will still need to use the information provided to engage in the productive struggle required when solving problems. Additionally, creating a sign-up sheet to establish in what order students will be helped can help prevent disagreements about whose turn it is.\nOnce you have established your classroom helping protocols, have students role play the helping procedure to practice it before they actually begin building in your classroom. This will go a long way towards helping students to employ the procedure successfully.\nHave Students Complete IQ Activities\nThere are a number of IQ Activities students can do independently using pieces remaining in the IQ Kit after a build is completed. Students can be directed to choose from a list of these Activities, or can be assigned specific Activities depending on current learning goals. All of the activities to the left can be done with limited Kit contents.\n\n\n\n\n\n\nWheel It!\nTallest Tower Challenge\nSammy Rescue\nWheel and Axle Lunar Rover\nBuild a Wagon\nPinball Wizard\nSigns\nBuild It, Make It, Engineer It\nCovered Maze Box\nRamp Racers\nPendulum Time\nHang Out\n\n\n\n\n\n\n\n\nAdditionally, you can assign students an IQ Activity that gives them an opportunity to test their build. For example, if your students have built the BaseBot, they can do the Drive Forward and Reverse Activity. If they have built the Clawbot, they can try The Claw.\n\n\nFor more information about using VEX IQ Activities in the classroom, see this article.\nHave Students Practice Coding Using VEXcode VR\nIf students are already familiar with VEXcode VR, students can practice coding a Virtual Robot as they wait for others to finish building. Assign students a VEXcode VR Activity that is appropriate for their level of experience for them to complete independently or in pairs. For more information about VEXcode VR, see this group of articles.\u00a0\nCreate a list of Additional Building Extension Activities Students Can Always Do\nAnother strategy for engaging students who are finished is to create a list of activities students can refer to and choose from when they are finished building. Engaging students in the creation of this list will make the list more relevant to your students and in your particular setting. Some ideas you may want to include in your are:\n\nDocument your Robot build in your Engineering Notebook.\n\nOrganize your IQ Kit or help others organize theirs.\nWrite a list of tips and tricks for completing a build successfully.\nSketch and label an idea for adding a feature to your build in your Engineering Notebook.\n\nThis list can be dynamic, as you and your students can add to it whenever a new idea arises."}
{"title":"Using the Pen on the VR 123 Robot","label_names":"[]","body":"The VR 123 Robot in the 123 Playspace in VEXcode VR is equipped with a VR Pen. This enables you to add color, lines, and drawings to your projects on the Field. You can adjust the Pen width and color, move the Pen up and down to draw, and fill in areas on the Field with color using the Pen.\n\nSetting the Pen Width\n\n\n\n\n\nThe [Set pen width] block is used to adjust the width of the line drawn by the Pen on the VR 123 Robot. The default width is set to thin.\nThe line can be made more fine by setting the Pen width to 'extra thin', or wider by setting the Pen width to 'medium', 'wide', or 'extra wide'.\u00a0\n\n\n\n\n\n\n\nThis image shows an example of the difference in line thickness from 'extra thin' (at the bottom) to 'extra wide' (at the top).\u00a0\n\n\nMoving the Pen\n\n\n\n\n\nTo draw with the Pen on the VR 123 Robot, you must move the Pen 'down' onto the Field using the [Move Pen] block.\u00a0\nThe default setting for the Pen is 'up', or not drawing on the Field.\u00a0\n\n\n\n\n\n\n\nThis image shows an example where the Pen was moved between 'down' and 'up' to draw lines and leave a space between.\n\n\n\n\n\n\n\nMoving the Pen 'down' then immediately 'up' will result in drawing a spot on the Field, as shown in this image.\n\n\nSetting the Pen Color\n\n\n\n\n\nThere are two ways to adjust the Pen color. The first is using the [Set Pen color] block to set the Pen color to one of four preset basic colors \u2013 black, red, green, or blue.\nThe default color for the Pen on the VR 123 Robot is black.\n\n\n\n\n\n\n\nYou can also use the [Set Pen color] block with color sliders to set the Pen color to any shade.\nMove the sliders within the block to adjust the red, green, and blue values.\nMove the opacity slider to adjust how solid or translucent your color appears on the Field.\n\n\n\n\n\n\n\nAs the sliders are moved, the color in the [Set Pen color] block will change to reflect that color combination.\nContinue moving the sliders until your desired color is created.\n\n\n\n\n\n\n\nIn this example, the [Set Pen color] block is used to draw a multi-colored square.\n\n\nFilling an Area with Color\n\n\n\n\n\nYou can also use the Pen on the VR 123 Robot to color in an area on the Field, using the [Fill area with color] block.\nMove the sliders within the block to adjust the red, green, and blue values.\u00a0\nMove the opacity slider to adjust how solid or translucent your color appears on the Field.\nContinue moving the sliders until your desired color is created.\n\n\n\n\n\n\n\nIn this example, the [Fill area with color] block was used to color the Field. You can also use this feature to color in shapes that you have drawn with the Pen.\u00a0\n\n"}
{"title":"Using the Playground Window in the 123 Playspace","label_names":"[]","body":"The 123 Playspace in VEXcode VR has several features that enable you to select Activities, set up the Field and VR 123 Robot, change the view of the Field, and more.\n\nUsing the Activities Button\nUpon opening the 123 Playspace, you will be prompted to select an Activity from the dialog box.\n\n\n\n\n\nOnce an Activity is open in the 123 Playspace, you can select a new Activity at any time using the Activities button.\n\n\n\n\n\n\n\nThis will open the Activity dialogue box. Use the scroll bar to scroll to the Activity you would like to use. Select the Activity button to open the Activity.\u00a0\nView this article to learn more about choosing an Activity in the 123 Playspace.\n\n\n\nUsing the Start and Stop Buttons\nThe Start and Stop buttons in the Playground Window can be used to start and stop your project.\n\n\n\n\n\nOnce an Activity is open in the 123 Playspace, you can select a new Activity at any time using the Activities button.\n\n\n\n\n\n\n\nSelect the Start button to begin running your project on the Field.\nNote: When a project is started, both the Activities button and the Choose Location button become inactive. You cannot change starting location or Activity while a project is running.\u00a0\u00a0\n\n\n\n\n\n\n\nWhen the project is started, the Stop button will appear. Select the Stop button to stop the project at any time.\u00a0\n\n\nUsing the Reset Button\nThe Reset button is used to reset the Field at any time.\n\n\n\n\n\nSelect the Reset button to return the Field, VR 123 Robot, and timer to their original positions.\u00a0\nIn order to restart a project from the beginning, you must select the Reset button prior to restarting the project.\n\n\n\n\n\n\n\nOnce the Reset button is pressed, the Field will return to its original state.\n\n\nUnderstanding the Playground Timer\nThe Playground Timer in the 123 Playspace shows the time elapsed while a project is running.\u00a0\n\n\n\n\n\nThe Playground Timer will not begin until the project is started.\u00a0\n\n\n\n\n\n\n\nThe Playground Timer will stop running when the Stop button is selected.\nNote: The Playground Timer will continue to run until the Stop button is selected, even if the project has ended and the VR 123 Robot has stopped moving.\u00a0\n\n\nUsing the Choose Location Button\nYou can change the starting position of the VR 123 Robot on the Field with the Choose Location button.\n\n\n\n\n\nSelect the Choose Location button to open the starting position dialogue box.\n\n\n\n\n\n\n\nFollow the prompts in the dialogue box to select your desired starting location and direction, then select 'Confirm'.\nView this article to learn more about setting the starting position of the VR 123 Robot.\n\n\nUnderstanding the Camera View Button\nThere are two camera views of the 123 Playspace. Use the Camera View button the switch between them.\u00a0\n\n\n\n\n\nThe default camera view is a top down view of the Field. Select the Camera View button to change to the angled view.\n\n\n\n\n\n\n\nWhen viewing the angled camera, the Camera View button will change to the top down camera. Select the Camera View button to return to the top down default view.\n\n\nUsing the Expand Button\nWhen using the Custom Activity, the Expand button will appear to enable you to customize the Field within the 123 Playspace.\n\n\n\n\n\nSelect the Expand button to customize the Field by uploading an image to the Field, or to download a Field or Playground image, or clear the Field.\u00a0\nView this article to learn more about using these Custom Activity features.\u00a0\n\n"}
{"title":"Setting the Starting Position of the VR 123 Robot","label_names":"[]","body":"Each Activity that opens in the 123 Playspace has a default starting position for the VR 123 Robot. You can change the starting position on the Field and the direction the VR 123 Robot is facing with the Choose Location button.\u00a0\n\nUsing the Choose Location Button\n\n\n\n\n\nFrom the Playground Window, you can select the 'Choose Location' button at any time to set the starting position of the VR 123 Robot on the Field.\u00a0\n\n\n\n\n\n\n\nThe Choose Location dialogue box will open, asking you where you want the robot to start.\n\n\nSetting the VR 123 Robot's Location\n\n\n\n\n\nWithin the dialogue box, select the square on the Field in which you would like the VR 123 Robot to be placed.\n\n\n\n\n\n\n\nOnce selected, the VR 123 Robot will appear in the new location.\u00a0\nTo select a different location, select a different square on the Field.\u00a0\n\n\nChanging the Starting Direction of the VR 123 Robot\n\n\n\n\n\nUse the left and right arrow buttons in the dialogue box to change the direction the VR 123 Robot is facing. Each press of the button will rotate the robot 90 degrees in the selected direction. Continue pressing the buttons until the VR 123 Robot faces your desired direction.\u00a0\n\n\n\n\n\n\n\nThe VR 123 Robot will turn and face the direction selected.\u00a0\n\n\n\n\n\n\n\nOnce you have the VR 123 Robot in the desired starting location and direction, select the Confirm button to return to the 123 Playspace.\n\n\n\n\n\n\n\nThe VR 123 Robot is now ready to be coded from its new starting position!\nYou can change the starting position at any time using the Choose Location button.\n\n"}
{"title":"Choosing an Activity in the 123 Playspace","label_names":"[]","body":"When using the 123 Playspace in VEXcode VR, there are several Activities that set the Field layout for the VR 123 Robot to run on. This article will walk you through how to choose an Activity, and how to use the Custom Activity feature.\u00a0\n\nChoosing an Activity upon opening the 123 Playspace\n\n\n\n\n\nWhen you open the 123 Playspace in VEXcode VR, the 'Select an Activity' dialog box will appear when the playground is opened.\u00a0\nUse the scroll bar to scroll through the Activities listed. Each Activity title corresponds to a preset themed 123 Field with elements that the 123 Robot can drive on or around.\u00a0\n\n\n\n\n\n\n\nTo choose an Activity, select the button of the Activity title.\u00a0\n\n\n\n\n\n\n\nThe Activity will then open in the 123 Playspace. The VR 123 Robot and Field elements will be in default starting positions.\u00a0\nView this article to learn more about setting the starting position of the VR 123 Robot.\n\n\n\nChoosing a New Activity While Using the 123 Playspace\n\n\n\n\n\nYou can change the Activity at any time while using the 123 Playspace. Select the Activities button, as shown in the image to the right.\u00a0\u00a0\n\n\n\n\n\n\n\nThis will open the 'Select an Activity' dialog box. Use the scroll bar to scroll through the Activities.\u00a0\nSelect an Activity button to choose a new Activity.\n\n\n\n\n\n\n\nThe new Activity will then open in the 123 Playspace. The VR 123 Robot and Field elements will be in default starting positions.\u00a0\nView this article to learn more about setting the starting position of the VR 123 Robot.\n\n\n\nUsing the Custom Activity Field\n\n\n\n\n\nThe 'Custom' Activity will open a blank Field in the 123 Playspace, that you can use as is, or customize by uploading your own image or Field setup.\u00a0\n\n\n\n\n\n\n\nThe Custom Field opens as a blank Field by default. You can code the VR 123 Robot to drive on this Field and use it as is.\u00a0\n\n\nUploading a Custom Image to the Field\n\n\n\n\n\nTo customize the Field, select the Expand button, as shown in the image on the right.\n\n\n\n\n\n\n\nSelect the 'Upload' button to upload a custom image to the Field. The Upload button is used to upload custom .png and .jpg image files that are less than 1 megabyte.\n\n\n\n\n\n\n\nA window will open to select your image file. Note this image shows the window opened on a Mac. This may look different depending on your device.\n\n\n\n\n\n\n\nThe image file will then open on the Field.\n\n\n\nOther Features in the Custom Activity Field Expand Button\nThe Download Field Button\n\n\n\n\n\nThe 'Download Field' button will download the image of the VR 123 Field as a .png without the VR 123 Robot or any of the other Playground buttons.\n\n\n\n\n\n\n\nHere is an example of a downloaded Field image from the Activity above\n\n\nThe Download Playground Button\n\n\n\n\n\nThe 'Download Playground' button will download the entire Playground Window image as a .png image file. This includes:\n\nThe image of the VR 123 Field\nThe current position of the VR Robot\nThe timer of the project being run\nAll of the Playground Window buttons\n\n\n\n\n\n\n\n\nHere is an example of the downloaded Playground image from the Playground above.\n\n\nThe Clear Button\n\n\n\n\n\nThe 'Clear' button will clear the Field of any current uploaded images, and return it to the empty VR 123 Field when selected.\n\n\n\n\n\n\n\nYou can then upload a new image to the Field, use it as is, or select a new Activity.\n\n"}
{"title":"Using the VEX EXP Robot Battery","label_names":"[]","body":"This article describes the features and characteristics of the VEX EXP\u2014part number 280-7126\u2014including the Status Button, LED indicators, charge time, and the built-in energy-saving shutdown mode.\nLED Status Display\nThe VEX EXP Robot Battery Li-ion 2,500 mAh has 4 green LEDs, which form a bar graph that displays the level of charge of the Battery. During normal operation, these LEDs are off to conserve energy. The Battery also has a Status Button. Pressing and releasing the Status Button causes the LEDs to turn on for about 4 seconds to indicate the current charge level of the Battery. View this animation to see how to check the Battery level using the Battery\u2019s LEDs.\n\n    \n    EXP Low Battery.mp4\"&gt;\n  \nThe following table shows the charge level thresholds and the corresponding LEDs:\n\n\n\n\nCharge Level\n\n\nLEDs on When Status Button Pressed\n\n\n\n\n0-24%\n\n\n1\n\n\n\n\n25-49%\n\n\n1, 2\n\n\n\n\n50-74%\n\n\n1, 2, 3\n\n\n\n\n75-100%\n\n\n1, 2, 3, 4\n\n\n\n\n\u00a0\nWhen the Battery is charging, the highest-most LED (i.e., the LED farthest from the Status Button) will blink, indicating the charge level. For example, when the charge level is between 50-74%, LEDs 1 and 2 will be solidly on, and LED 3 will be blinking (LED 4 will be off). If the charge level is between 0 and 24%, then LED 1 will be blinking, and the other LEDs will be off. View this animation to see how the Battery\u2019s LEDs indicate the current charge level during charging.\n\n    \n    EXP Charging Battery.mp4\"&gt;\n  \nCharge Times\nCharging from 0% to 100% normally takes just over 2 hours. When a new Battery is charged for the first time, or when a Battery has been stored over long periods of time (a few months), it may take longer to charge the Battery. This is because the Battery has to pre-charge at a slower rate to protect the cells. After this initial charge, the Battery charge rate will return to normal.For fastest charge times, using the recommended USB cable and charger is recommended. The charger needs to be able to supply at least 2.4 A of current. Chargers with a current rating of 0.5 A or more will still charge the Battery but will cause charge times to increase accordingly.\nEnergy-saving Shutdown Mode\nIf the Battery has not been used for several hours, it will go into shutdown mode to save energy. This means the Battery\u2019s output will be disabled, and it will not supply power to the Brain. Pressing the Status Button will wake up the Battery. This means if the Battery has been inserted into the Brain and the Brain will not turn on, you must first press the Status Button on the Battery. This wakes up the Battery. Then press the power Button (Check Button) on the Brain to turn it on.\nPlugging the Battery into a charger will also automatically wake up the Battery.\nTechnical Characteristics of the Battery\n\n\n\n\nCharacteristic\n\nEXP Li-ion Battery\n\n\nNominal capacity\n2500 mAh\n\n\n\nApproximate charge time\n\n2.5 hours\n\n\nMax continuous current*\n\n15 A\n\n\n\n\n*Current is also temperature-limited, so max continuous current may be lower in very hot environments."}
{"title":"Using the VEX IQ Robot Battery","label_names":"[]","body":"This article describes the features and characteristics of the VEX IQ Robot Battery (2nd generation)\u2014part number 228-7045\u2014including the Status Button, LED indicators, charge time, and the built-in energy-saving shutdown mode.\nLED Status Display\nThe VEX IQ Robot Battery Li-ion 2,000 mAh (2nd generation) has 4 green LEDs, which form a bar graph that displays the level of charge of the Battery. During normal operation, these LEDs are off to conserve energy. The Battery also has a Status Button. Pressing and releasing the Status Button causes the LEDs to turn on for about 4 seconds to indicate the current charge level of the Battery. View this animation to see how to check the Battery level using the Battery\u2019s LEDs.\n\n    \n    IQ Low Battery.mp4\"&gt;\n  \nThe following table shows the charge level thresholds and the corresponding LEDs:\n\n\n\n\nCharge Level\n\n\nLEDs on When Status Button Pressed\n\n\n\n\n0-24%\n\n\n1\n\n\n\n\n25-49%\n\n\n1, 2\n\n\n\n\n50-74%\n\n\n1, 2, 3\n\n\n\n\n75-100%\n\n\n1, 2, 3, 4\n\n\n\n\n\u00a0\nWhen the Battery is charging, the highest-most LED (i.e., the LED farthest from the Status Button) will blink, indicating the charge level. For example, when the charge level is between 50-74%, LEDs 1 and 2 will be solidly on, and LED 3 will be blinking (LED 4 will be off). If the charge level is between 0 and 24%, then LED 1 will be blinking, and the other LEDs will be off. View this animation to see how the Battery\u2019s LEDs indicate the current charge level during charging.\n\n    \n    IQ Charging Battery.mp4\"&gt;\n  \nCharge Times\nCharging from 0% to 100% normally takes just over 2 hours. When a new Battery is charged for the first time, or when a Battery has been stored over long periods of time (a few months), it may take longer to charge the Battery. This is because the Battery has to pre-charge at a slower rate to protect the cells. After this initial charge, the Battery charge rate will return to normal.\nFor fastest charge times, using the recommended USB cable and charger is recommended. The charger needs to be able to supply at least 2.4 A of current. Chargers with a current rating of 0.5 A or more will still charge the Battery but will cause charge times to increase accordingly.\nEnergy-saving Shutdown Mode\nIf the Battery has not been used for several hours, it will go into shutdown mode to save energy. This means the Battery\u2019s output will be disabled, and it will not supply power to the Brain. Pressing the Status Button will wake up the Battery. This means if the Battery has been inserted into the Brain and the Brain will not turn on, you must first press the Status Button on the Battery. This wakes up the Battery. Then press the power Button (Check Button) on the Brain to turn it on.\nPlugging the Battery into a charger will also automatically wake up the Battery.\nTechnical Characteristics of the Battery\n\n\n\n\nCharacteristic\n\nIQ Li-ion Battery\n\n\nNominal capacity\n2000 mAh\n\n\n\nApproximate charge time\n\n2 hours\n\n\nMax continuous current*\n\n8 A\n\n\n\n\n*Current is also temperature-limited, so max continuous current may be lower in very hot environments."}
{"title":"Understanding Robot Features in GO Competition \u2013 Mars Math Expedition Playground in VEXcode VR","label_names":"[]","body":"The VR Robot used in the GO Competition \u2013 Mars Math Expedition Playground in VEXcode VR is a virtual version of the Competition Advanced Hero Robot, used in the VEX GO Mars Math Expedition Competition. The virtual Hero Robot has the same dimensions, motors, and sensors as the physical robot. In VEXcode VR\u2019s version of the Mars Math Expedition Competition, the Hero Robot is pre configured and all blocks needed to code the robot to complete tasks on the Field are automatically added to the Toolbox when the Playground is selected. \n\nRobot Controls\nThe Virtual Hero Robot has the following controls:\n\n\n\n        \n      \n\n\nA drivetrain with a gyro. This enables the \u201cDrivetrain\u201d category of blocks in the Toolbox of VEXcode VR to drive and turn the robot.\n\n\n\n\n\n        \n      \n\n\nA moveable Arm controlled by the Arm Motor. This allows the robot to raise and lower game objects on the Field.\n\nThe Arm moves in a continuous motion using the [Spin] block. The default position is for the arm to be lowered.\nThe Arm can be moved to a specific position using the [Spin to position] block. The Arm motor can move from 0 degrees (lowest) to 420 degrees (highest). This can be useful when completing tasks like lifting samples onto the Lab.\n\n\n\n\nRobot Sensors\n\n\n\n\n\nA Gyro Sensor that is used with the Drivetrain. This allows the robot to make accurate and precise turns.\nThe drivetrain heading reports a value from 0 to 359.9 degrees, and clockwise is positive.\n\n\n\n\n\n\n\nThe Front Eye Sensor is located on the front of the Virtual Hero Robot, as shown in this image.\nWhen the Arm is lowered, the Front Eye Sensor is located between the forks.\n\n\n\n\n\n\n\nThe Eye Sensor can report if an object is present, the color of an object, as well as its brightness and hue value.\n\n"}
{"title":"Using Example Projects with the GO Competition - Mars Math Expedition Playground","label_names":"[]","body":"Example projects provide students with an easy way to get started learning how to use different blocks to complete the tasks on the GO Competition - Mars Math Expedition Playground.\n\nWhat are some of the Mars Math Expedition Playground Example Projects?\n\n\n\n\n\nExample projects are provided for each aspect of game play, such as tilting the Solar Panel and clearing the Landing Site.\n\n\n\nGetting Started Using Mars Math Expedition Example Projects\n\n\n\n\n\nTo open an example project, select the File menu.\n\n\n\n\n\n\n\nSelect 'Open Examples.\n\n\n\n\n\n\n\nSelect an Example Project. The Mars Math Expedition Playground Example projects feature the VR Competition Advanced Hero Robot in the icon.\n\n\n\n\n\n\n\nOnce the Example Project loads, be sure to select the correct Stage on the Playground to ensure it runs properly. The note in the project will include the Stage. For more information about how to select the correct Stage in the playground, see this article.\n\n\n\nUsing Mars Math Expedition Example Projects with Students\nUsing example projects allows students to get started coding right away on the GO Competition - Mars Math Expedition Playground. Once an example project has been selected, the following steps will support your students as they learn to code the VR Hero Robot to complete tasks and earn points.\n\n\n\n\n\nStep 1: Open an example project, making sure to select the correct Stage. Run the Example Project for Students.\nGuide students to open the GO Competition \u2013 Mars Math Expedition Playground, select the correct Stage, and press the Start button to run the example project. Have students observe the behaviors of the VR Hero Robot, and talk about how they relate to the example project.\n\n\n\n\n\n\nStep 2: Modify the example project to make it your own.\n\nEncourage students to think about the particular aspect of game play demonstrated in the example project, and how they could change the code to complete tasks and earn points on the Playground.\u00a0\nStudents should choose one thing to change at a time, so they can see the direct effects of their changes. Remind students to run their projects frequently to see how each change affects the behavior of the robot.\nStudents can continue modifying projects in this way many times, observing the results of the changes they are making and using this information in order to improve their ability to complete game tasks and earn points.\nFor additional information on the use of any block or command, access the Help section by clicking on the question mark in the upper right corner of the workspace.\n\n\n\n\n\n\nStep 3: Experiment with another example project or try your own.\u00a0\nAfter students have iterated on one example project several times, they may be ready to use what they have learned to create their own projects, or to remix another example project to continue to improve their coding.\n"}
{"title":"Using the Playground Features in the GO Competition \u2013 Mars Math Expedition ","label_names":"[]","body":"The GO Competition \u2013 Mars Math Expedition Playground in VEXcode VR enables you to code a Virtual VEX GO Hero Robot to complete tasks from the VEX GO Mars Math Expedition Competition. The Playground Window in GO Competition \u2013 Mars Math Expedition has a few game-specific features on top of the current VR Playground Window Features.\n\n\nSelecting a Stage\n\n\n\n\n\nThere are four Stages in the GO Competition \u2013 Mars Math Expedition. Each Stage adds tasks and the Field size grows.\nWhen the GO Competition \u2013 Mars Math Expedition Playground is selected, it will open the Stage 1 Field by default.\u00a0\n\n\n\n\n\n\n\nTo select a different Stage, first select the Expand button in the upper left corner of the Playground Window.\n\n\n\n\n\n\n\nNext, select the location icon that appears when the menu is open.\n\n\n\n\n\n\n\nThen, select your desired Stage from the \u2018Select Stage\u2019 options.\nTo learn more about the tasks included in each Stage of the competition, see this article.\nFollow these steps to change your Stage selection at any time.\n\n\n\nDownloading a Playground Image\n\n\n\n\n\nYou can download an image of the GO Competition \u2013 Mars Math Expedition Playground at any time. This can be useful to show the position of the robot and game objects at the end of a project.\nTo download a Playground image, first select the Expand button in the top left corner of the Playground Window.\n\n\n\n\n\n\n\nThen, select the Download Playground button.\nThe Download Playground button will download the entire Playground Window image as a .png image file. This includes:\n\nThe current position of the VR Robot and game objects on the Field\nThe timer at the moment of download\nThe score\nAll buttons on the Playground Window\n\n\n\n\n\n\n\n\nHere is an example of a downloaded Playground image at the end of a project to lift a game object.\n\n\n\nUsing the Helicopter Button\n\n\n\n\n\nThe Stages 3 and 4 Fields of the GO Competition \u2013 Mars Math Expedition Playground include a helicopter that can be placed on the Landing Site when debris is cleared.\nIn the VEXcode VR Playground, this task is completed using the Helicopter button, in the lower right corner of the Playground Window.\n\n\n\n\n\n\n\nThe Helicopter button is inactive until the debris is cleared from the Landing Site. When inactive, the button will appear to be grayed out, and you will not be able to select it.\n\n\n\n\n\n\n\nThe Helicopter button will become active when the debris is cleared from the Landing Site. One example of \u2018cleared debris\u2019 is shown in the image to the right.\n\n\n\n\n\n        \n      \n\n\nSelect the Helicopter button to move the Helicopter onto the Landing Site, in order to score the extra point.\nView this screen recording to see one example of how the Helicopter button can be used once the Landing Site is cleared.\n\n"}
{"title":"Stages and Scoring on the GO Competition \u2013 Mars Math Expedition Playground","label_names":"[]","body":"The GO Competition - Mars Math Expedition Playground provides four stages of gameplay, beginning with Stage 1 and progressing through Stage 4. The stages are cumulative, with each new stage adding complexity by opening up additional tasks which can be completed in order to score points. For information about how to select a stage on this Playground, see this article.\u00a0\nEach completed task in Mars Math Expedition is worth one point. This article will describe each stage of the Field, and the tasks associated with that stage.\n\n\nStage 1\u00a0 - Crater and Rover Tasks\nIn Stage 1, one point can be earned for the following tasks:\n\nRemove a sample from a crater.\nMove the Rover out of the crater.\n\n\n\n\n\n\nSelect the Pick Up a Sample Example Project in VEXcode VR to see how to remove a sample from a crater to earn one point.\nTo learn more about using Example Projects in the Mars Math Expedition Playground, see this article.\n\n\n\nStage 2 - Lab Scoring\nIn Stage 2, one point can be earned for all Stage 1 tasks, in addition to the following tasks:\n\nMove a sample to the Lab Tile.\nPlace a sample on top of the Lab.\nPlace the sample onto its matching colored square.\n\n\n\n\n\n\nSelect the Moving Samples Example Project in VEXcode VR to see a project that earns three points - one for removing the sample from the crater, one for moving the sample to the Lab Tile, and one for placing the sample on top of the Lab.\n\n\n\nStage 3 - Solar Panel, Landing Site and Rocket Scoring\nIn Stage 3, one point can be earned for all Stage 1 and 2 tasks, in addition to the following tasks:\n\nTilt the Solar Panel down.\nClear the debris from the Landing Site.\nPlace the Helicopter on the Landing Site.\nLift the Rocket Ship upright.\nEnd with the Robot touching the Red Tile.\n\n\n\n\n\n\nSelect the Tilt the Solar Panel Example Project in VEXcode VR to view a project that demonstrates one way of tilting the Solar Panel down. Select the Clear the Landing Site Example project to view a project that shows how to clear the debris from the Landing Site.\u00a0\n\n\n\nStage 4 - Fuel Cell Scoring\nIn Stage 4, one point can be earned for all Stage 1, 2, and 3 tasks, in addition to the following tasks:\n\nRemove a fuel cell from its cradle.\nMove a fuel cell to the Rocket Ship.\nMove a fuel cell to the Landing Site.\n\n\n\n\n\n\nSelect the Scoring with Fuel Cells Example Project in VEXcode VR to view a project that demonstrates one way of removing a Fuel Cell from its cradle and moving it the Rocket Ship.\n\n\n\n\n\n\n\nIn Stage 4, all of the tasks are available and players can strategize by coding the VR Hero Bot to complete the tasks that will earn them the most points in a one-minute match.\n\n"}
{"title":"Using the VEX Pin Tool with VEX IQ","label_names":"[]","body":"The VEX Pin Tool makes it easy to disassemble pieces in the VEX IQ construction system. The Pin Tool has several features that can be used to make disassembling easy: the Puller, the Pusher, and the Lever.\n\nThe Puller can be used by placing the tool over the unwanted pin, squeezing the handles, and pulling out the pin.\n\nEach handle is also designed to be used for disassembly. One side is constructed to push out pins.\n\nThe other side incorporates the Lever, which can be used to pry two beams apart.\n\nView the Pin Tool in action to see how each of the features work.\n\n    \n  "}
{"title":"Understanding Standoff vs. Hex Nut Retainers","label_names":"[]","body":"Nut Retainers have many purposes, but one of their major functions is to provide the ability to tighten a nut without the use of a wrench. Although both perform similar functions, there are two sets of retainers in the VEX Ecosystem: one sized to fit #8-32 Nylock and Hex Nuts, the other sized to fit #8-32 Low Profile Nuts and all Standoffs. The purpose of this article is to explain the difference between Standoff Retainers and Hex Nut Retainers.\nNote: Standoff Retainers are used in the EXP Education Kit and Classroom Bundles.\n\n\n\n\n\nThis image shows the difference in compatible size between Hex Nut Retainers and Standoff Retainers. Note that while only the 1-Post Retainer is shown, the same holds true for all Hex Nut Retainers and Standoff Retainers.\nFor Hex Nut Retainers, the maximum width across flats (or the diameter measured from face to face) on a nut is 8.6000mm (the width of #8-32 Nylock and Hex Nuts), while the maximum width across flats for Standoff Retainers is 6.3500mm (the width of #8-32 Low Profile Nuts and all Standoffs).\u00a0\nThis means that #8-32 Nylock and Hex Nuts will\u00a0only fit in Hex Nut Retainers, and that #8-32 Low Profile Nuts and Standoffs will only work effectively with Standoffs Retainers. While you can place #8-32 Low Profile Nuts and Standoffs into Hex Nut Retainers, they will not be self-tightened as they are too small to be held in place.\n\n\nBelow is an easy-to-reference chart that explains which nut\/standoff is compatible with each corresponding Nut Retainer. All nuts can be found here, all standoffs can be found here, all Hex Nut Retainers can be found here, and all Standoff Retainers can be found here.\n"}
{"title":"Understanding Standoff vs. Hex Nut Retainers","label_names":"['VEX V5', 'VEX EXP']","body":"Nut Retainers have many purposes, but one of their major functions is to provide the ability to tighten a nut without the use of a wrench. Although both perform similar functions, there are two sets of retainers in the VEX Ecosystem: one sized to fit #8-32 Nylock and Hex Nuts, the other sized to fit #8-32 Low Profile Nuts and all Standoffs. The purpose of this article is to explain the difference between Standoff Retainers and Hex Nut Retainers.\n\n\n\n\n\nThis image shows the difference in compatible size between Hex Nut Retainers and Standoff Retainers. Note that while only the 1-Post Retainer is shown, the same holds true for all Hex Nut Retainers and Standoff Retainers.\nFor Hex Nut Retainers, the maximum width across flats (or the diameter measured from face to face) on a nut is 8.6000mm (the width of #8-32 Nylock and Hex Nuts), while the maximum width across flats for Standoff Retainers is 6.3500mm (the width of #8-32 Low Profile Nuts and all Standoffs).\u00a0\nThis means that #8-32 Nylock and Hex Nuts will\u00a0only fit in Hex Nut Retainers, and that #8-32 Low Profile Nuts and Standoffs will only work effectively with Standoffs Retainers. While you can place #8-32 Low Profile Nuts and Standoffs into Hex Nut Retainers, they will not be self-tightened as they are too small to be held in place.\n\n\nBelow is an easy-to-reference chart that explains which nut\/standoff is compatible with each corresponding Nut Retainer. All nuts can be found here, all standoffs can be found here, all Hex Nut Retainers can be found here, and all Standoff Retainers can be found here.\n"}
{"title":"VEX GO STEM Lab Unit Concepts","label_names":"[]","body":"This table shows all of the VEX GO STEM Lab units and the main concepts covered in each one. Links are available to each Unit, from which the Unit Overview and individual Lab content can be viewed.\u00a0\nAll VEX GO STEM Labs follow the same Engage \u2013 Play \u2013 Share format. To learn more about what a STEM Labs is, see this article. To learn more about implementing a VEX GO STEM Lab Unit in your classroom, see this article.\nTo see how these Units can be sequenced together, see the VEX GO Cumulative Pacing Guide. To see how these STEM Lab Units connect to VEX GO Activity Series and Activities in a suggested sequence, see the 1:1 Pacing Guide.\n\u00a0\n\n\n\n\n  STEM Lab Unit  \n\n\n  Unit Concepts  \n\n\n\n\nLink to Intro to Building\n\n\n\nIntroduction to building with VEX GO Kit pieces\u00a0\nDesign constraints\nSpatial language\n\n\u00a0\n\n\n\n\n\nLink to Physical Science\n\n\n\nForce and motion\nGathering and using data\n\n\u00a0\n\n\n\n\n\nLink to Mars Rover \u2013 Surface Operations\n\n\n\nCoding\nSequencing\u00a0\nProject planning\n\n\u00a0\n\n\n\n\n\nLink to Mars Rover \u2013 Landing Challenge\n\n\n\nCoding\u00a0\nSequencing\nSensors\nLoops\n\n\n\n\n\n\nLink to Mars Rover \u2013 Exploring Mars Geology\n\n\n\nCoding\nSensors\nLoops\nConditionals\nMy Blocks\n\n\u00a0\n\n\n\n\n\nLink to Simple Machines\n\n\n\nWhat is a simple machine?\u00a0\nForce and motion\n\n\u00a0\n\n\n\n\n\nLink to Fractions\n\n\n\nNumerator\/Denominator\nEquivalent fractions\n\n\u00a0\n\n\n\n\n\nLink to Pendulum Game\n\n\n\nBuilding a pendulum\nIterative problem solving\nCollaboration\n\n\n\n\n\n\nLink to Fun Frogs\n\n\n\nLife Science \u2013 Life Cycles\nWriting\n\n\u00a0\n\n\n\n\n\nLink to Code Base\n\n\n\nRemote controlled driving\nCoding\nSensors\n\n\n\n\n\n\nLink to Battle Boats\n\n\n\nCoordinate plane\n\n\u00a0\n\n\n\n\n\nLink to Look Alike\n\n\n\nTraits\nTrait inheritance\n\n\n\n\n\n\nLink to Parade Float\n\n\n\nEngineering Design Process\nCoding\nSequencing\n\n\n\n\n\n\nLink to Robot Jobs\n\n\n\nCoding\nSequencing\nProject planning\n\n\n\n\n\n\nLink to Super Car\n\n\n\nForce and motion\nSpeed\nGathering and using data\n\n\n\n\n\n\nLink to Ocean Emergency\n\n\n\nCoding\nRobot behaviors\nSequencing\n\n\n\n\n\n\nLink to Helping Hand\n\n\n\nMechanisms\nAuthentic problem solving\n\n\n\n\n\n\nLink to Magnet Car\n\n\n\nMagnetism\n\n\n\n\n\n\nLink to Pantograph\n\n\n\nMechanics of a pantograph\nScale\n\n\n\n\n\n\nLink to Robot Arm\n\n\n\nWhat is a robotic arm?\u00a0\nUsing a robotic arm\nCoding a robotic arm\n\n\n\n\n\n\nLink to Mars Math Expedition\n\n\n\nVEX GO Competitions\nCollaboration\n\n\n\n\n\n\nLink to Ocean Science Exploration\n\n\n\nVEX GO Competitions\nCollaboration\n\n\n\n\n\n\nLink to Village Engineering Construction\n\n\n\nVEX GO Competitions\nCollaboration\n\n\n\n\n\n\nLink to City Technology Rebuild\n\n\n\nVEX GO Competitions\nCollaboration\n\n\n\n\n\n\u00a0\n\u00a0"}
{"title":"VEX 123 STEM Lab Unit Concepts","label_names":"[]","body":"This table shows all of the VEX123 STEM Lab units and the main concepts covered in each one. Links are available to each Unit, from which the Unit Overview and individual Lab content can be viewed.\u00a0\nAll VEX 123 STEM Labs follow the same Engage \u2013 Play \u2013 Share format. To learn more about what a STEM Labs is, see this article. To learn more about implementing a VEX 123 STEM Lab Unit in your classroom, see this article.\nTo see how these Units can be sequenced together, see the VEX 123 Cumulative Pacing Guide. To see how these STEM Lab Units connect to VEX 123 Activity Series and Activities in a suggested sequence, see the 1:1 Pacing Guide.\n\u00a0\n\n\n\n\n  STEM Lab Unit  \n\n\n  Unit Concepts  \n\n\n\n\n Link to Meet Your Robot  \n\n\n\nWhat is a robot?\nIntroduction to the 123 Robot\nLiteracy\n\n\u00a0\n\n\n\n\n\n  Link to Number Line  \n\n\n\nNumeracy\u00a0\nAddition\u00a0\n\n\u00a0\n\n\n\n\n  \n  Link to Touch to Code  \n\n\n\nProgramming Language\u00a0\nRobot Behaviors\nSequencing\u00a0\nPhonics\n\n\u00a0\n\n\n\n\n  \n  Link to Moving from Touch to Coder  \n\n\n\nRobot Behaviors\nIntroduction to the VEX Coder\n\n\u00a0\n\n\n\n\n  \n  Link to Find the Bug  \n\n\n\nDebugging\nUsing the Step button\nSequencing\n\n\u00a0\n\n\n\n\n  \n  Link to Role Play Robot  \n\n\n\nSequencing\nSocial Emotional Learning (SEL)\u00a0\n\n\u00a0\n\n\n\n\n  \n  Link to Calm Down Robot  \n\n\n\nSequencing\u00a0\nSocial Emotional Learning (SEL)\n\n\u00a0\n\n\n\n\n  \n  Link to Coding Fundamentals  \n\n\n\nRobot Behaviors\nSequencing\nDebugging\n\n\u00a0\n\n\n\n\n  \n  Link to Little Red Robot  \n\n\n\nEye Sensor\nLiteracy\n\n\u00a0\n\n\n\n\n  \n  Mars Rover \u2013 Surface Operations  \n\n\n\nRobot Behaviors\nIntroduction to VEXcode 123\u00a0\n\n\u00a0\n\n\n\n\n  \n  Mars Rover \u2013 Landing Challenge  \n\n\n\nEye Sensor\nSequencing\nLoops\n\n\u00a0\n\n\n\n\n\u00a0\n\u00a0"}
{"title":"Flex Wheels for V5","label_names":"[]","body":"What Are Flex Wheels?\nFlex wheels are soft wheels that are designed to be compliant, and are useful for a variety of applications, such as:\n\nPicking up hard plastic game objects\nPicking up objects that have an irregular shape (e.g., cubes, discs, etc.)\nDriving over field obstacles where regular drive wheels may have difficulty\n\nFlex Wheels were originally designed for the VEXpro product line, which primarily uses 1\/2\" hex or 1-1\/8\" round bore for most applications. However, V5 uses 1\/8\" and 1\/4\" square shafts. In order to use Flex Wheels on a V5 robot, you will also need to use some specific adapters that allow Flex Wheels to be driven by V5 shafts.\nThis guide will identify which parts are needed to make each size of Flex Wheel work on either the V5 \u00bc\u201d High Strength Square Shaft or the \u215b\u201d Square Shaft, both of which are standard in V5.\nFlex Wheel Sizes\nThere are four different sizes of Flex Wheel that are legal for use on VRC robots. The two smaller sizes have a hex bore, while the two larger ones have a round bore.\n\n\n\nDiameter of Wheel\nWidth of Wheel\nBore\n\n\n1.625\u201d\n0.500\u201d\n\u00bd\u201d Hex (undersized)\n\n\n2\u201d\n0.500\u201d\n\u00bd\u201d Hex (undersized)\n\n\n3\u201d\n1.000\u201d\n1.125\u201d Round (undersized)\n\n\n4\u201d\n1.000\u201d\n1.125\u201d Round (undersized)\n\n\n\nBecause the Flex Wheel material is flexible, the bores are intentionally undersized so that they do not slip on their intended shaft. Because of this, when you look at a Flex Wheel the bore will be significantly smaller than its matching adapter.\nFlex Wheel Durometers\n\nEach size of Flex Wheel is offered in three different durometers. Durometers identify the relative hardness of materials, and indicate the flexibility of the resulting Flex Wheel; the \u2018A\u2019 refers to the particular scale of measurement used for flexible mold rubbers. Higher-number durometers (e.g., 60A) are more rigid, while lower numbers (e.g., 30A) are very flexible.\nChoosing a Flex Wheel durometer based on your specific use case can be helpful for several reasons:\n\nAllows you to vary how much the wheel flexes when intaking an object. For example, a softer wheel may be better suited for picking up harder objects while a harder wheel may be better suited for picking up softer objects.\nIf an intake is wide enough to intake multiple game objects at once, you can use different durometers to affect the grip on one side of the intake to help prevent objects from jamming.\nIn a drive application, your choice of durometer flex wheels is like adjusting a suspension on a car. Softer wheels will dampen impacts better and can easily climb objects in their path, but might make the robot bouncy as it drives on flat ground. Harder wheels will have a \u201csmoother\u201d drive, but may have more trouble climbing over objects.\n\n\n\n\nDurometer\nSimilar to a\u2026\n\n\n30A\nSoft Rubber Band\n\n\n45A\nPencil Eraser\n\n\n60A\nCar Tire\n\n\n\n\n1.625\u201d And 2\u201d Flex Wheel Assembly\nThe two smallest Flex Wheels, 1.625\u201d and 2\u201d, require two accessory parts in order to be compatible with a V5 \u00bc\u201d High Strength Square Shaft.\nAn additional two inserts can be used to make these wheels compatible with a V5 \u215b\u201d Square Shaft.\nSee the diagrams below to help understand which parts are necessary to use the 1.625\u201d and 2\u201d Flex Wheels on your robot.\n\n\n3\u201d And 4\u201d Flex Wheel Assembly\nThe two larger sizes of Flex Wheels, 3\u201d and 4\u201d, require four accessory parts in order to be compatible with a V5 \u00bc\u201d High Strength Square Shaft.\nAn additional two inserts can be used to make these wheels compatible with a \u215b\u201d Square Shaft.\nSee the diagrams below to help understand which parts are necessary to use the 3\u201d and 4\u201d Flex Wheels on your robot.\n\n\nOptionally, VersaHubs can be retained to Flex Wheels using standard V5 hardware (note that this does not replace the use of the adapters described in this article, but can provide some additional stability if needed). Long screws can be used as through-bolts with nuts on the other side, or \u00bc\u201d standoffs can be pressed into the bolt circles inside of the 3\u201d and 4\u201d Flex wheels to allow shorter screws to capture the Plastic VersaHubs on both sides of the wheel.\nSummary Table\nThis table summarizes the parts needed to build a single Flex Wheel Assembly to use on a V5 Robot.\n\n\n\nFlex Wheel Size\nV5 Shaft Size\nVersaHex Adapter\nVersaHub\n\nHigh Strength Shaft Insert276-3881\n\n\n\n1.625\u201d or 2\u201d\n\u00bc\u201d High Strength\n2x Required\nNot Required\nNot Required\n\n\n\u215b\u201d Square\n2x Required\nNot Required\n2x Required\n\n\n3\u201d or 4\u201d\n\u00bc\u201d High Strength\n2x Required\n2x Required\nNot Required\n\n\n\u215b\u201d Square\n2x Required\n2x Required\n2x Required\n\n\n\n\u00a0\nPart Substitutes\nThere are a few parts that are functionally identical to those in the images above, which can be used interchangeably to make Flex Wheel Assemblies. The following parts can be substituted for each other, and all are legal for use on VRC robots.\nVersaHubs\nThe following parts are functionally identical:\n\n\n217-8079 - 1\/2\u201d Hex Bore Plastic VersaHub v2\n\n217-2592 - 1\/2\u201d Hex Bore Aluminum VersaHub\n\nVersaHex Adaptors\nThe following parts are functionally identical:\n\n\n217-8004 - Plastic 1\/2\" VersaHex Adapters v2 (1\/4\" Square Bore) (48-pack)\n\n217-7946 - 1\/2\" VersaHex Adapters v2 (1\/4\" Square Bore, 1\/8\" Long) (8 Pack)\n\n217-7947 - 1\/2\" VersaHex Adapters v2 (1\/4\" Square Bore, 1\/4\" Long) (8 Pack)\n\nCleaning Flex Wheels\nAfter prolonged use, teams may find they need to clean their Flex Wheels. VEX recommends using deionized water on a clean rag to wipe the surface of the wheels. Do not use Isopropyl Alcohol to clean Flex Wheels, as it may damage the compound used to manufacture the wheels.\nAlternative Flex Wheel Mounting Methods\nThe methods of assembly shown above are the intended and best solutions for mounting Flex Wheels on V5 robots. However, we understand that they may not be feasible for all teams for a variety of reasons. If you have Flex Wheels, and are missing one or more of the adaptors shown above, there are still ways you can make Flex Wheels work on your VRC or non-competition robot.\nIt is important to note that these alternatives may or may not perform as well as the methods shown above, and that some of these alternatives will perform better than others. The alternative methods all use parts that were not initially designed to work together, but work if you are in a pinch.\nAlternatives for 1.625\u201d and 2\u201d Flex Wheel\nThe following alternatives for 1.625\u201d and 2\u201d Flex Wheels are listed in order of ease of assembly.\nAlternative 1: 276-3891 Clamping Shaft Collar (\u215b\u201d Shaft) or 276-6102 High Strength Clamping Shaft Collar\nThe Clamping Shaft Collars can be pressed into the hex bore of the 1.625\u201d and 2\u201d Flex Wheels as a slight interference fit to make these wheels compatible with a \u215b\u201d Shaft or \u00bc\u201d Shaft.\nAssembly Steps:\n\nStep 1: Line up the shaft collar and the Flex Wheel. It may be easier to place the shaft collar on a solid surface while holding the Flex Wheel above.\n\nStep 2: Push the Flex Wheel over the shaft collar. It may be easiest to push the Flex Wheel down at an angle and then rock it over the shaft collar to get the shaft collar into the bore.\n\n\nAlternative 2: 276-2551 12T HS Gear (\u00bc\u201d HS Shaft)\nThe 12T HS Gear is also a good interference fit into the hex bore on the 1.625\u201d and 2\u201d Flex Wheels. This option makes the Flex Wheels fit on a \u00bc\u201d HS Shaft.\nNote: Because this part is metal, it may begin to tear the Flex Wheel over time. Use this method with caution so as to not destroy your wheels.\nAssembly Steps:\n\nStep 1: Line up the 12T pinion and the Flex Wheel. It may be easier to place the pinion on a solid surface while holding the Flex Wheel above.\n\nStep 2: Push the Flex Wheel over the 12T pinion. It may be easiest to push the Flex Wheel down at an angle and then rock it over the pinion to get the pinion in the bore.\n\n\nAlternative 3: Lockbars and Standoffs (\u215b\u201d Shaft)\nA hub for the 1.625\u201d or 2\u201d Flex Wheels can be created using either the Metal Lock Bar (275-1065) or the Plastic Lock Bar (276-2016-002) with 1\u201d #8-32 screws, \u00bd\u201d #8-32 Standoffs, \u00bd\u201d Long Spacers, and your preferred #8-32 Nuts.\nAssembly Steps:\n\nStep 1: Thread two \u00bd\u201d standoffs onto 1\u201d screws as shown below.\n\nStep 2: Slide the Flex Wheel over the standoffs as shown below.\n\nStep 3: Insert the 0.375\u201d OD 0.5\u201d long spacer into the hex bore of the wheel.\n\nStep 4: Attach the second lock bar and tighten nuts onto screws.\n\n\nAlternative 4: Hub from 276-1499 Intake Roller (\u215b\u201d shaft)\nThe inner Plastic Hub from a 276-1499 Intake Roller can be used inside of Flex Wheels as well. Simply cut the rubber overmold away from the part, and insert the plastic hub into the 1.625\u201d or 2\u201d Flex Wheel similarly to the steps in Alternatives 1 &amp; 2.\nAssembly Steps:\n\nStep 1: Slice on the line shown on the Intake Roller and remove the inner plastic hub from the overmold.\n\nStep 2: Line up the plastic hub and the Flex Wheel. It may be easier to place the plastic hub on a solid surface while holding the Flex Wheel above.\n\nStep 3: Push the Flex Wheel over the plastic hub. It may be easiest to push the Flex Wheel down at an angle and then rock it over the hub to get the hub into the bore.\n\n\nAlternatives for 3\u201d and 4\u201d Flex Wheels\nThe following alternatives for 3\u201d and 4\u201d Flex Wheels are listed in order of ease of assembly.\nAlternative 1: 2 16T Sprockets, 6P (276-8328) (\u00bc\u201d HS Shaft)\nTwo 16T 6P Sprockets can be inserted into the bore of the Flex Wheel. A 0.25\u201d long (0.375\u201d OD) nylon spacer can be used to improve functionality by keeping the sprockets evenly spaced inside of the wheel.\n\nStep 1: Fully insert the first sprocket by squishing the Flex Wheel into an oval shape\n\nStep 2: Rotate the sprocket in the bore of the Flex Wheel. Insert a shaft (not pictured) and a high strength shaft adapter if needed.\n\nStep 3: Put the 0.25\u201d long (0.375\u201d OD) nylon spacer and the second sprocket, along with a high strength shaft adapter if needed, onto the shaft.\n\nStep 4: Push the sprocket assembly into the Flex Wheel. As the second sprocket goes into the Flex Wheel bore it may be easiest to work your way around the sprocket teeth progressively in a circle, pushing them into the bore in sections by applying pressure to the sprocket.\n\n\nAlternative 2: 60T High Strength Gear (\u00bc\u201d HS Shaft)\nA 60t gear has a bolt pattern that is close to the bolt pattern on the Flex Wheel. The patterns don\u2019t line up perfectly to the eye, but the softer Flex Wheels are flexible enough that they can stretch to make the hole pattern line up.\n\nStep 1: Align two holes of the gear and the Flex Wheel\n\nStep 2: Insert two 1.75\u201d bolts into holes of the gear and Flex Wheel.\n\nStep 3: Screw on nuts\n\n\nAlternative 3: Custom Polycarbonate Plates and Lock Bars (\u215b\u201d Shaft)\nAll VRC teams have an allowance of 0.065\u201d polycarbonate, which can be used to make a plate that mounts to the side of a Flex Wheel and holds a lock bar.\n\nStep 1: Cut custom polycarbonate plates. The important features are holes on a 1.875\u201d bolt circle to mount to the Flex Wheel, 2 holes to mount the lock bar insert and a clearance hole in the center of the plate for the shaft.\n\nStep 2: Attach the plates\n\nStep 3: Attach the lock bars\n\nStep 4: Screw on nuts\n\n"}
{"title":"Facilitating the Workcell Capstone Project Competition","label_names":"['VEX V5']","body":"In Workcell STEM Lab 13: Capstone Project, students will design a Workcell that will sort all 36 randomly dispensed disks into the matching colored End Zones as quickly as possible.\n\nSorting disks correctly will award points. Scoring disks incorrectly or inefficiently will result in a loss of points. Bonus points will be awarded depending on how disks are stacked in the End Zones, as well as how quickly. The winner of the Capstone Project is determined by who has the most points at the end of all runs.\nOrganizing your classroom for this competition will help ensure success for you and your students.\nStudents should be in groups and paired with their associated Workcell. Groups should remain with their assigned Workcell throughout the entirety of Lab 13, as groups will design and modify their Workcell in ways specific and unique to their group.\nSTEM Lab 13 is designed to be completed over a period of multiple weeks. The recommended time is 4 weeks, however, this could vary depending on your classroom and students. The Rethink section of STEM Lab 13 encompasses the Capstone Project competition.\n\nBefore Starting the Competition\nBefore class, have the following items prepared:\n\nAt least five copies per group of the printed score sheet on the last page of the rules document\n\nThe V5 Workcell Leaderboard\n\nMatch schedule\n\nMatches can move more smoothly if you and your students know when each group is expected to be ready to compete. Each run should take no longer than 10 minutes, but you will need to allow time for setup and scoring at the end. Creating a schedule that allows for roughly 15 minutes per match should account for setup and scoring.\nYou will want to assign each group at least two runs during the competition so that students can iterate on their strategy and build between matches.\nEstablishing a time table will help you plan your class time to allow for a successful competition. Having a predetermined schedule will also enable you to announce the matches throughout class, so that your focus can remain on scoring and timing.\nPost your schedule with assigned times for each group, or print it and give it out to students so that they can clearly see when they are expected to be ready. This timetable will then set the parameters for students\u2019 practice time. An example match schedule is shown below.\n\n\n\n\n\nDuring the Competition\nUse the following guide to facilitate the competition in your classroom. It is recommended that the Play section of STEM Lab 13 takes approximately one week to complete, and the Rethink section takes approximately three weeks. Again, this can change depending on the needs of your classroom and students. The following recommendations are made based on a time frame of four weeks, and can be adjusted to suit your situation.\nThe optional Collaboration and Programming Rubrics allow you to provide students with feedback and assess their projects throughout STEM Lab 13 and the competition.\nFour Weeks Before the Competition (Week One)\nIn the Play section, students will be introduced to different concepts that will prepare them to design their own Workcell for the Capstone Project Competition.\n\nBring students together for whole class instruction and introduce the Lab to the students.\n\nStudents will learn about Workcell design by analyzing why the build in Lab 11 is laid out in a specific way. By going through and understanding the design of the Lab, they will learn about concepts such as the Workcell arm\u2019s mechanical limits, how and why conveyors are placed in certain locations, and the importance of pick up and drop off locations.\nThroughout the Play section, students will also explore how moving the location of the arm affects its X, Y, and Z-coordinates, how to mechanically move the location of the arm on the Workcell, and the option to create custom V5 Smart Cables.\nTell students that these concepts can be applied when they design their own Workcell in the Rethink section.\nExplain to students that there is no prescribed build for this Lab. There is an example Lab 13 build pictured in this Lab, but there are no associated build instructions. Students can design and build any type of Workcell that they want for this Lab, as long as it adheres to the rules for the competition.\n\n\nFollow the facilitation prompts at the beginning of each of the Play pages to facilitate the Play section.\n\nThree Weeks Before the Competition (Week Two)\n\nAs a whole class, introduce the competition to the students. Reiterate that there is not a prescribed build for this competition. Students can use examples found throughout Lab 13, the previous 12 Labs, and the Workcell Extensions. However, students are free to design any layout they see fit to be successful in the competition. Students can use the information from the Play section when designing their Workcell.\nBreak students into their groups if they haven\u2019t already done so. Ensure they have their assigned Workcell, their device with VEXcode V5, and their engineering notebooks. Recommended group size is between 2-4 students per Workcell.\nInstruct groups to first watch the two videos on this page and then read the rules document before brainstorming on a design.\n\nHand out multiple printed score sheets to the students. Two of these will be used for their actual scored runs; any additional sheets can be used to score while practicing.\nAs students are watching the videos and reading the rules, circle the room and answer any questions that arise.\n\n\nWhen students have finished watching the video and reading the rules document, ensure they understand the rules by asking groups the following formative assessment questions before moving on:\n\nWorkcell Lab 13: Capstone Project \u2013 Check Your Understanding Questions\nWorkcell Lab 13: Capstone Project \u2013 Check Your Understanding Answer Key\n\n\nOnce it is clear that all groups are on the same page with the rules, tell them to begin working on their design. As groups are working, circle the room and ask students the following questions:\n\nHow are you approaching the challenge? What is your strategy? How are you thinking of designing their Workcell to compete?\nFor groups that are struggling, encourage them to look back at the Play section for specific steps on how to find the x, y, and z-coordinates once the arm has been moved, how to understand the arm's mechanical limits, or how to make custom V5 cables.\n\nIf groups are still unsure where to start, encourage them to look through the Workcell Extensions for ideas and inspiration, as well as step-by-step help on how to build certain mechanisms. More information on these mechanisms can be found in this article.\n\n\n\n\n\nTwo Weeks Before the Competition (Week Three)\nAfter groups have designed their first iteration, encourage students to test their designs, record the outcome, make adjustments, and then try again. Please note that it may take students multiple weeks to get a Workcell in a condition to be able to compete. Students should be iterating on both the physical design of the Workcell as well as the code.\nOnce groups have designed and tested their Workcells enough times to get a working version, it will be time to compete.\nThe Day Before the Competition\nTell students that on competition day they will be allowed two full runs. The highest score of those two runs will be taken as their final score. You, the teacher, will go through the room and record each group\u2019s first score, and then start back with the first group to obtain their second score. This will give each group time between their runs to fix any hardware or coding problems that arise during their first run.\nNote that groups will not physically compete against each other. Each group will compete while you, the teacher, watch the run to record the time as well as the score.\nWhenever a group is not actively being scored, they should plan to be practicing and iterating. It is recommended that you follow a posted match schedule so that students have an expectation of when they will be competing. Give students this schedule now so they can prepare properly for the competition the next day.\nCompetition Day\nTo keep track of the score and time for each group, use the V5 Workcell Leaderboard. This allows students to see their score in real time. Information on how to facilitate the Capstone Project Competition using this leaderboard can be found in this article.\n\n\nAfter the Competition\nAfter all groups have competed, bring students back together for a whole-class discussion. Ask students some of these questions to wrap up the challenge.\n\nHow did you interpret the rules in order to make design decisions?\nWhat was your strategy to obtain the highest score?\nWhat did your group find difficult about this challenge?\nDid your project work the first time you tried it? If not, what changes did you make to improve it?\nHow did your group work together to solve the challenge?\n\nYou can also print each group\u2019s scores, or even the whole class\u2019s rankings, from the leaderboard.\n"}
{"title":"VR Educators Start Here","label_names":"[]","body":" -->\n\nWelcome to teachVR.vex.com!\n\nThere are a number of ways that you can bring coding to life for your students with VEXcode VR. This page is a hub of resources that you can use as you begin teaching with VEXcode VR, and return to later\u00a0to learn more. Here to help you take the guesswork out of teaching with VEXcode VR, teachVR.vex.com is a support for you as you continue to grow and learn on your teaching journey.\nDuring the height of the Covid-19 pandemic, I was faced with teaching a combined fourth and fifth grade classroom operating on a hybrid schedule. My students loved learning STEM with VEX GO when they were in person, but that was only every other day. Fortunately, I was able to add VEXcode VR to our curriculum, and students could continue learning computer science from home in a fun and engaging way. Despite the challenging schedule, my fourth and fifth graders were able to have productive and meaningful computer science learning experiences thanks to VEXcode VR. My students enjoyed coding the VR robot so much that it has remained a vital part of our robotics and STEM curriculum to this day!\nAudra Selkowitzformer Kindergarten teacher\n\n\n\n            \n\nCan't view this video? Download here\u00a0&gt;\n\nIntroducing VEXcode VR!\nBorn out of a pandemic need when physical robots were not an option for many students, VEXcode VR has grown to become a core component of robotics and computer science classes around the world. With VEXcode VR, students code Virtual Robots (VR) in immersive and engaging Playgrounds to learn and practice computer science concepts and supplement what they are doing and learning with physical robots.\nCoding anytime, anywhere\n\n\nUsing a web-based platform with no student accounts or installations required, you can code a VR Robot\u00a0and see it move in seconds! Over 15 immersive, 3D Playgrounds bring coding challenges to life for students, motivating them to keep learning, experimenting, and problem solving even after class has ended. VEXcode VR Enhanced and Premium\u00a0offer even more Playgrounds, enhanced graphics, and greater robot capabilities to take student engagement even further.\n\n\n\nSame VEXcode, new challenges\n\n\nBecause it\u2019s based in VEXcode, the skills students have learned in other VEX platforms transfers easily to VR, and can be built upon through coding Virtual Robots. Students can grow from block-based to text-based coding with Python capability in VEXcode VR Enhanced and Premium.\n\n\n\nSharing made simple\n\n\nStudents can download and share their projects, offering teachers a way to see what students are doing behind their screens. This gets even easier with VEXcode VR Enhanced and Premium, where Dropbox and Google Drive sharing capabilities\u2014and extra class organizational tools\u2014are available.\n\n\n\nSomething for everyone\n\n\nFrom navigating a maze to crashing a castle; coding a underwater ocean cleaning robot to drawing artwork with the VR Robot pen; and moving magnetic disks to creating constellations, VEXcode VR has Playgrounds and coding challenges for every student, no matter what their interest or experience level.\n\n\n\n\nEngage Students from the Start\nGetting started is as easy as typing vr.vex.com\u00a0into your browser. With no login required, students can immediately begin coding!\n\n\n\nEasy to start, easy to use\n\nA Tutorial video viewable upon launch gives a quick overview of how to use VEXcode VR. Students can watch the Get Started video and make their VR Robot move in minutes!\n\n\n\n\nSee your robot move immediately\n\nBuild your project and watch it run with the press of a button. No downloading, wires, or compiler errors involved. Does your project run as intended? Press Start to find out! Then add, edit, and iterate on your project with ease.\n\n\n\n\nMake the invisible visible\n\nView sensor data in real time with features like the Dashboard. With visibility of abstract concepts like decision making, students have a window to better understand how their code connects to robot behaviors.\n\n\n\nRead this Insights article to learn more about how VEXcode VR supports student engagement.\u00a0Insights is part of VEX Professional Development Plus (PD+), along with a wealth of other professional development resources. Like what you see? PD+ is included with a VEXcode VR Premium subscription.\n\nCurricular Resources at Your Fingertips\nWhether you are teaching beginners or experienced coders, VEXcode VR curricular resources will help you shape your class in the way that best meets the needs of your students.\n\n\nVEXcode VR Activities\u00a0are simple, student-facing, editable Google Docs that offer a coding challenge with scaffolded levels of exploration.\nWith filters for difficulty level, category, and Playground, finding an Activity for your students is easier than ever. Subject area tags make cross-curricular connections visible, so you can confidently and comfortably infuse computer science into your classroom.\n\n\n\n\n\nThe\u00a0Computer Science Level 1 Blocks\u00a0and Python courses\u00a0offer longer, more comprehensive, and highly scaffolded instruction that can be taught in a variety of ways. Both courses give students a solid foundation in coding with either VEXcode VR Blocks or Python, while teaching coding concepts\u2014from Drivetrain commands to building algorithms\u2014through coding challenges with virtual robots.\n\n\n\nScopes and Sequences\nThese curated scope and sequences offer 9 week implementations to help you plan your teaching with VEXcode VR courses and Activities.\n\n9 Week Scope and Sequence for Units 1-5\n9 Week Scope and Sequence for Units 6-9\n\n\nVEXcode VR is Versatile\nThe depth and breadth of Playgrounds, curricular options, and coding challenges makes VEXcode VR a versatile classroom tool. Whether you are looking to foreground coding concepts before building physical robots, differentiate teaching of coding concepts for reteaching or acceleration, give students extra practice outside of class, blend VR with physical robots in cohort groups, or use computer science to expand a class project, there is a way to do all of this and more. Learn more about how teachers are bringing VEXcode VR into their classrooms to make their teaching easier and more engaging for students.\nSelect a tab below to see a teacher\u2019s story about blending VEXcode VR into their teaching, and get a clearer picture of the possibilities that VEXcode VR offers to make teaching and learning robotics and computer science more effective and engaging.\n\n\n\nReal World Connections \nDifferentiating Instruction\nTeaching Coding First \nCoding Anywhere\nMaking Kits Go Further\n\n\n\n\n\nMaking real world connections through VR\nMeredith is a 4th grade teacher who has been teaching with VEX GO in her classroom. Her students engaged with building robots, but were even more excited about learning to code the Code Base. Meredith taught the Ocean Emergency STEM Lab Unit, tying it into their ocean life science unit. Her students were not only engrossed in the coding challenges, but were fascinated by the idea of real ocean cleaning robots! Meredith used this to extend their studies, developing a project around ocean pollution, ecology, and real-world solutions. Her project plan included the Coral Reef Cleanup VEXcode VR Activity to to extend what students were learning about coding and connect it to their project.;\nBuilding on the Ocean Emergency STEM Lab, students created new and inventive solutions to clean up the coral reef with their virtual robots! Meredith used the Coral Reef Cleanup Activity to teach her students about loops, sensors, and algorithms\u2014connecting their projects to the ongoing real-world issues of cleaning trash from the oceans. They kept a tally of how much trash they had collected, and set a class goal to collect more and more by the end of the year. Because VEXcode VR could be used at home, students shared their projects with families and parents began to ask if they too could contribute to the challenge goal! Not only did VEXcode VR enable students to learn about new coding concepts, but Meredith used it to capitalize on students\u2019 engagement in real-world issues, opening their eyes to the STEM careers and solutions that are happening around them.\n\n\n\nFrom reteaching to accelerating learning with VR\nTom has been teaching Intro to Robotics to his 7th and 8th grade students using VEX IQ for several years. He loves how the hands-on nature of VEX IQ promotes collaboration and engagement among his students. Most students were new to building in this way, so it created a natural community of learners within his classes. When it came to coding, however, he found that each year his students seemed to have a wider range of experience and prior knowledge. As a result, he spent more and more time trying to find ways to differentiate his instruction to accommodate reteaching concepts while also extending challenges for his more advanced students. Trying to do this with one set of IQ robots proved difficult, but with VEXcode VR, Tom found that he could have students working in the same Playground, but at the level that they needed\u2014making his differentiation plan much simpler.\nWhen it came time to teach the Treasure Hunt STEM Lab Unit, Tom could insert VEXcode VR Activities to augment his instruction seamlessly. After each Lesson in the Unit, Tom added VEXcode VR into his lesson plan. For his students who needed reteaching, he assigned Level 1 of a related Activity for extra practice; for the students who needed additional challenges, Levels 2 or 3 of the same Activity extended their learning. Since the whole class was working in the same Playground, they could seek each other out more easily to ask questions and collaborate, and working in VEXcode meant what they learned with the virtual robot could easily be transferred to the physical ones. Not only did Tom\u2019s planning time decrease, but his students\u2019 engagement grew as well!\n\n\n\nForegrounding coding concepts with VR\nGayle is a high school science teacher who teaches a Robotics and Computer Science elective class each semester. Since it is an elective class, the students who take the course are highly engaged and motivated, and eager to get their hands on the VEX EXP Kits to build and modify their robots. She found that sometimes it was difficult to get students to focus conceptually on their code when they were more distracted or interested in the engineering component of a Lab. To help ground students in coding concepts before beginning to build, Gayle began using VEXcode VR at the start of each semester. By beginning with the coding, she could make sure that her students had a shared understanding of foundational concepts that she could then refer back to throughout the semester.\nUsing the Computer Science Level 1 course, Gayle had students read the course materials for homework, then discuss and engage in the challenges and Activities during class time. This gave students a chance to come to class ready with questions so that their class time could be focused on conceptual learning and engaging coding challenges. Students worked in pairs on class coding activities, and Gayle supplemented with different levels of VR Activities as needed for students ready for an extra challenge. The pair programming dynamic helped to establish collaborative decision making routines that could be built upon throughout the course. When students moved into coding their EXP robots, Gayle found them revisiting the work they had done in VEXcode VR to help them problem solve. Seeing students working together on both building and coding, Gayle realized firsthand the value of grounding her coding instruction with virtual robots and growing into EXP\n\n\n\n\u201cTaking robots home\u201d with VR\nRaj is a middle grades STEM teacher, and sees students in grades 3-6 twice a week for a STEM Specials class. Beginning with VEX GO in 3rd grade, and transitioning to VEX IQ in 5th grade, Raj has seen students\u2019 engagement and excitement around robotics grow dramatically over time. Students ask nearly every day to stay longer, or come by after school, or to take a robot home\u2014and Raj knew this motivation was something that he could capitalize on to extend students\u2019 learning. Raj introduced all of his students to VEXcode VR as a way to engage with coding both in class and outside of class time.\nSince his students were already comfortable with VEXcode, using the virtual robot was not difficult. The immediate feedback of the virtual robot was even preferable for some students, who struggled with the patience needed to code the physical robot. Raj began by introducing a VR Challenge to his students; he posted and shared a VR Activity, and students worked on it over a two-week period as part of their Choice Board activities, after school, or at home. They shared their projects with Raj, and he posted them on the Challenge board for others to see. Throughout the weeks he saw students referencing projects that were on the wall, or asking Raj to see the projects in VR, so they could see how they worked. Over time, Raj began to see and hear students within and across grade levels talking to each other about coding concepts in the hallways, cafeteria, and during robotics club time. Other teachers were also asking about the projects, and were curious about how they could incorporate coding into other subject areas. Parent engagement in what students were doing in his class grew as well, because they now had firsthand knowledge of their students\u2019 learning.\n\n\n\nExtending the use of VEX Kits through VR\nSteph teaches robotics and computer science in a junior-senior high school. Using VEX IQ and VEX EXP, Steph is able to teach multiple classes with the same robots throughout the day; however, the constraint of available kits often keeps students from fully exploring coding concepts in the ways that Steph would like them to. Steph began using VEXcode VR to augment the curriculum, giving students an opportunity to stretch their engagement and learning through virtual robots in addition to their physical robots.\nSteph created virtual and physical robot cohort groups that allowed her to teach coding concepts for each group more deeply. Students had additional opportunities to revisit concepts, practice what they were learning, and extend their knowledge through extra challenges using either VEXcode VR or the physical robots. Using the 1:1 Pacing Guides, Steph aligned VEXcode VR Activities with STEM Lab Units so students learned similar concepts across all classes\u2014they just alternated the format in which they worked. Students either used VR first and then switched to physical robots, or vice versa. Working in this way helped to grow Steph\u2019s own teaching practice, essentially having multiple chances to teach the same content back to back, and using students\u2019 experiences to directly inform teaching across classes.\n\n\n\n\n\n\nConnecting VR and other VEX Platforms\nVEX 1:1 Pacing Guides identify common concepts between STEM Lab Units and VR Activities, offering clear pathways to extend student learning and engagement with VEXcode VR. The 1:1 Pacing Guides take the guesswork out of bringing VEXcode VR into your classroom by showing you how to supplement what you are already doing with VEX robotics with the added benefit of VEXcode VR.\nSee how VEXcode VR can supplement physical robots in your setting with the 1:1 Pacing Guides.\n\nVEX GO 1:1 Pacing Guide\nVEX IQ (1st generation) 1:1 Pacing Guide\nVEX IQ (2nd generation) 1:1 Pacing Guide\nVEX EXP 1:1 Pacing Guide\n\n\nTeacher Supports for VEXcode VR\nVEXcode VR includes a number of resources to help as you teach with virtual robots in your setting.\n\n\nSolutions for Activities and Course Challenges \u2013 All Activities and Course Challenges have sample solutions so you have a starting point for assessing students\u2019 projects. There are many ways to solve a challenge, but solution files will offer one example of a successful project for each level of the Activity or Course Challenge.\u00a0Get the Solutions in the VEXcode VR Teacher Portal.\n\n\nProject sharing and class organization \u2013 VEXcode VR Enhanced and Premium\u00a0offer the ability to connect to Google Drive and Dropbox, to make your students\u2019 project organization easier than ever before.\u00a0Learn more about sharing files in this article.\n\n\nOrganize class use of VEXcode VR\u00a0\u2013 Assign students a class code so that their project files are automatically sorted for you based on your sharing preferences.\u00a0Learn more about class codes in this article.\n\n\n\nVEX Professional Development Plus (PD+)\n\n\nVEX Robotics offers comprehensive professional development resources available on pd.vex.com. VEX\u2019s Professional Development Plus (PD+) platform is your destination for a wealth of resources designed to empower educators in the world of STEM. The VEX PD+ platform offers two tiers - a free tier and an All-Access paid tier. PD+ is included with VEXcode VR Premium, or you can subscribe separately.\nVEX PD+ free tier\n\n\n\n\n\nThe VEX PD+ free tier includes access to:\n\n\nIntroductory Certification Courses: These self-paced online courses provide training on each VEX platform. Each course contains formative assessment and tracks your progress, making it easy for you to check your understanding and complete the course at your own pace. Once you become certified, you gain access to the VEX Professional Learning Community (PLC).\n\nProfessional Learning Community (PLC): Join a network of global educators and VEX Experts, where you can learn, share, and benefit from a wealth of shared experiences. This is your virtual Teacher\u2019s Lounge, where you can have meaningful dialogue, share expertise, ask questions, and work collaboratively to improve your STEM teaching and learning.\n\n\n\n\nVEX PD+ paid tier (All-Access)\n\n\n\n\n\nThe VEX PD+ paid tier (All-Access) includes access to:\n\n\n1-1 Sessions: Schedule a 1-1 session with a VEX expert, get guidance and support tailored to your needs.\n\nTraining Courses: Video-based, expert-led courses that range from introductory \u2018Getting Started\u2019 courses to more advanced and pedagogy focused courses.\n\nVEX Video Library: Access to hundreds of videos across a variety of topics and VEX platforms, available anytime and from anywhere.\n\n\n\n\n\n\nLive Sessions: Thematic, hour-long, expert-led sessions that provide insights and practical takeaways about teaching with VEX.\n\nVEX Robotics Educators Conference: An annual conference that brings the VEX PD+ Community together for in-person, hands-on learning, inspiring keynotes, and learning sessions with VEX education experts.\n\n\n\n\n\n\nEvery user will also have access to their own dashboard, which includes a tour of all the VEX PD+ features, allowing them to get started easily. We are continuously updating PD+ with new materials, ensuring our platform remains a rich, dynamic resource for our educators.\nWe are here to support you on your professional journey. If you have any questions, or feedback, you can use the feedback tool in VEX PD+. We're excited for you to explore, learn, and connect.\n\n\nEmbedded resources in VEXcode VR\nTutorials, example projects, and the built-in Help offer students multiple avenues to answer questions, troubleshoot a project, or problem solve a solution as they are working in VEXcode VR. This helps teachers remain facilitators of learning, and help students gain independence and agency over their learning.\n\n\n\nTutorials\u00a0are short videos that open and play within VEXcode VR and cover a range of topics about how to navigate and use VEXcode VR.\nView this article to learn more about viewing Tutorials in VEXcode VR\n\n\n\n\n\n\n\nExample Projects\u00a0are sample VEXcode VR projects that can be run to show a particular coding concept or challenge feature. Students can open and run an example project, observe the VR Robot, then modify the example project to make it their own.\nView this article to learn about using Example Blocks Projects\nView this article to learn about using Example Python Projects\n\n\n\n\n\n\n\nHelp explains what each command in the Toolbox does, in a popup format in the workspace. The Help is a great resource to use with students to further explore a command and how it can be used in a project.\nView this article to learn about accessing Help in a Blocks Project\nView this article to learn about accessing Help in a Python Project\n\n\n\n\n\nResearch Based, Standards Aligned\nDeveloped by teachers for teachers, VEXcode VR offers research-based and standards-aligned curricular resources so that you can teach with confidence.\nSupported by educational research\nVEXcode VR was born out of a pandemic need, when physical robots were not an option for many students. Since its inception, VEXcode VR has grown and continues to offer teachers and students a strong supplemental resource to broaden their robotics and computer science curricula in many different educational settings. Learn more about how teachers have used VEXcode VR with their students:\n\nRead about Teaching and Learning Computer Science with VEXcode VR \nRead about Insights and Implications from a School Implementation \nRead about Learning Programming Anywhere with VEXcode VR \n\nAligned to standards\nAll VEXcode VR curricular resources are aligned to standards. You can view standards alignment by country for both the Computer Science Level 1 Course and VR Activities.\n\nComputer Science Level 1 Course standards by country\nVR Activities standards by country\n\n\nWhat\u2019s Next?\nThe content and resources on this page are a \u2018home base\u2019 for you on your teaching journey with VEXcode VR. This page is just an introduction, and is by no means an exhaustive list of all that is on offer within VEXcode VR. From here, you can continue your teaching journey on the path of your choice.\n\nLearn about VEXcode VR Enhanced and Premium\n\ncs.vex.com\u00a0- View all of the curricular resources for VEXcode VR\n\nhelp.vex.com\u00a0- Explore the VEX Library to learn more about using and teaching VEXcode VR\n\npd.vex.com\u00a0- Engage with VEXcode VR educators worldwide in the Community, watch videos to grow your knowledge and teaching practice with VEXcode VR, and more\n\nsupport.vex.com\u00a0- Visit support.vex.com for additional customer support\n\nCommon VEXcode VR Resources\n\n\n\nCurricular Resources\n\nVR Activities and Courses\nVEXcode VR\nContent Standards \nCumulative Pacing Guide\n1:1 Pacing Guide\n\n\n\n\n\nProfessional Learning\n\nProfessional Development\nPD+ Free Trial\nVEX Library\n\n\n\n\n\nAdditional Teacher Support\n\nPrintables\nEducation Research\nCamps\n\n\n\n\n\nSales, Funding and Implementation Support\n\nProduct Information\nPricing and Quotes\nFunds and Grants\nContact Us\n\n\n\n\n"}
